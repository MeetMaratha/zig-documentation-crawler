[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [math](https://ziglang.org/documentation/master/std/#std.math)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/math.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [ByteAlignedInt](https://ziglang.org/documentation/master/std/#std.math.ByteAlignedInt)
  * [CompareOperator](https://ziglang.org/documentation/master/std/#std.math.CompareOperator)
  * [Complex](https://ziglang.org/documentation/master/std/#std.math.complex.Complex)
  * [F80](https://ziglang.org/documentation/master/std/#std.math.F80)
  * [Frexp](https://ziglang.org/documentation/master/std/#std.math.frexp.Frexp)
  * [IntFittingRange](https://ziglang.org/documentation/master/std/#std.math.IntFittingRange)
  * [Log2Int](https://ziglang.org/documentation/master/std/#std.math.Log2Int)
  * [Log2IntCeil](https://ziglang.org/documentation/master/std/#std.math.Log2IntCeil)
  * [Min](https://ziglang.org/documentation/master/std/#std.math.Min)
  * [Modf](https://ziglang.org/documentation/master/std/#std.math.modf.Modf)
  * [Order](https://ziglang.org/documentation/master/std/#std.math.Order)


## Namespaces
  * [big](https://ziglang.org/documentation/master/std/#std.math.big)
  * [complex](https://ziglang.org/documentation/master/std/#std.math.complex)


## Global Variables
## Values
[deg_per_rad](https://ziglang.org/documentation/master/std/#std.math.deg_per_rad)| | 180.0/pi  
---|---|---  
[e](https://ziglang.org/documentation/master/std/#std.math.e)| | Euler's number (e)  
[ln10](https://ziglang.org/documentation/master/std/#std.math.ln10)| | ln(10)  
[ln2](https://ziglang.org/documentation/master/std/#std.math.ln2)| | ln(2)  
[log10e](https://ziglang.org/documentation/master/std/#std.math.log10e)| | log10(e)  
[log2e](https://ziglang.org/documentation/master/std/#std.math.log2e)| | log2(e)  
[phi](https://ziglang.org/documentation/master/std/#std.math.phi)| | Phi or Golden ratio constant (Φ) = (1 + sqrt(5))/2  
[pi](https://ziglang.org/documentation/master/std/#std.math.pi)| | Archimedes' constant (π)  
[rad_per_deg](https://ziglang.org/documentation/master/std/#std.math.rad_per_deg)| | pi/180.0  
[sqrt1_2](https://ziglang.org/documentation/master/std/#std.math.sqrt1_2)| | 1/sqrt(2)  
[sqrt2](https://ziglang.org/documentation/master/std/#std.math.sqrt2)| | sqrt(2)  
[tau](https://ziglang.org/documentation/master/std/#std.math.tau)| | Circle constant (τ)  
[two_sqrtpi](https://ziglang.org/documentation/master/std/#std.math.two_sqrtpi)| | 2/sqrt(π)  
## Functions `pub fn acos[](https://ziglang.org/documentation/master/std/#std.math.acos.acos)(x: anytype) @TypeOf(x)`
    
Returns the arc-cosine of x. `pub fn acosh[](https://ziglang.org/documentation/master/std/#std.math.acosh.acosh)(x: anytype) @TypeOf(x)`
    
Returns the hyperbolic arc-cosine of x. `pub fn add[](https://ziglang.org/documentation/master/std/#std.math.add)(comptime T: type, a: T, b: T) (error{Overflow}!T)`
    
Returns the sum of a and b. Returns an error on overflow. `pub fn alignCast[](https://ziglang.org/documentation/master/std/#std.math.alignCast)(comptime alignment: Alignment[](https://ziglang.org/documentation/master/std/#std.mem.Alignment), ptr: anytype) AlignCastError[](https://ziglang.org/documentation/master/std/#std.math.AlignCastError)!AlignCastResult[](https://ziglang.org/documentation/master/std/#std.math.AlignCastResult)(alignment, @TypeOf(ptr))`
    
Align cast a pointer but return an error if it's the wrong alignment `pub fn approxEqAbs[](https://ziglang.org/documentation/master/std/#std.math.approxEqAbs)(comptime T: type, x: T, y: T, tolerance: T) bool`
    
Performs an approximate comparison of two floating point values `x` and `y`. Returns true if the absolute difference between them is less or equal than the specified tolerance. `pub fn approxEqRel[](https://ziglang.org/documentation/master/std/#std.math.approxEqRel)(comptime T: type, x: T, y: T, tolerance: T) bool`
    
Performs an approximate comparison of two floating point values `x` and `y`. Returns true if the absolute difference between them is less or equal than `max(|x|, |y|) * tolerance`, where `tolerance` is a positive number greater than zero. `pub fn asin[](https://ziglang.org/documentation/master/std/#std.math.asin.asin)(x: anytype) @TypeOf(x)`
    
Returns the arc-sin of x. `pub fn asinh[](https://ziglang.org/documentation/master/std/#std.math.asinh.asinh)(x: anytype) @TypeOf(x)`
    
Returns the hyperbolic arc-sin of x. `pub fn atan[](https://ziglang.org/documentation/master/std/#std.math.atan.atan)(x: anytype) @TypeOf(x)`
    
Returns the arc-tangent of x. `pub fn atan2[](https://ziglang.org/documentation/master/std/#std.math.atan2.atan2)(y: anytype, x: anytype) @TypeOf(x, y)`
    
Returns the arc-tangent of y/x. `pub fn atanh[](https://ziglang.org/documentation/master/std/#std.math.atanh.atanh)(x: anytype) @TypeOf(x)`
    
Returns the hyperbolic arc-tangent of x. `pub inline fn boolMask[](https://ziglang.org/documentation/master/std/#std.math.boolMask)(comptime MaskInt: type, value: bool) MaskInt`
    
Returns a mask of all ones if value is true, and a mask of all zeroes if value is false. Compiles to one instruction for register sized integers. `pub fn cast[](https://ziglang.org/documentation/master/std/#std.math.cast)(comptime T: type, x: anytype) ?T`
    
Cast an integer to a different integer type. If the value doesn't fit, return null. `pub fn cbrt[](https://ziglang.org/documentation/master/std/#std.math.cbrt.cbrt)(x: anytype) @TypeOf(x)`
    
Returns the cube root of x. `pub inline fn ceil[](https://ziglang.org/documentation/master/std/#std.math.ceil)(value: anytype) @TypeOf(value)`
    
Returns the smallest integral value not less than the given floating point number. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @ceil `pub fn ceilPowerOfTwo[](https://ziglang.org/documentation/master/std/#std.math.ceilPowerOfTwo)(comptime T: type, value: T) (error{Overflow}!T)`
    
Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. If the value doesn't fit, returns an error. `pub fn ceilPowerOfTwoAssert[](https://ziglang.org/documentation/master/std/#std.math.ceilPowerOfTwoAssert)(comptime T: type, value: T) T`
    
Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. Asserts that the value fits. `pub fn ceilPowerOfTwoPromote[](https://ziglang.org/documentation/master/std/#std.math.ceilPowerOfTwoPromote)(comptime T: type, value: T) std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Int[](https://ziglang.org/documentation/master/std/#std.meta.Int)(@typeInfo(T).int.signedness, @typeInfo(T).int.bits + 1)`
    
Returns the next power of two (if the value is not already a power of two). Only unsigned integers can be used. Zero is not an allowed input. Result is a type with 1 more bit than the input type. `pub fn clamp[](https://ziglang.org/documentation/master/std/#std.math.clamp)(val: anytype, lower: anytype, upper: anytype) @TypeOf(val, lower, upper)`
    
Odd ramp function
```
    | _____
    | /
    |/
 -------/-------
    /|
 _____/ |
    |

```

Limit val to the inclusive range [lower, upper]. `pub fn compare[](https://ziglang.org/documentation/master/std/#std.math.compare)(a: anytype, op: CompareOperator[](https://ziglang.org/documentation/master/std/#std.math.CompareOperator), b: anytype) bool`
    
This function does the same thing as comparison operators, however the operator is a runtime-known enum value. Works on any operands that support comparison operators. `pub fn comptimeMod[](https://ziglang.org/documentation/master/std/#std.math.comptimeMod)(num: anytype, comptime denom: comptime_int) IntFittingRange[](https://ziglang.org/documentation/master/std/#std.math.IntFittingRange)(0, denom - 1)`
    
Return the mod of `num` with the smallest integer type `pub fn copysign[](https://ziglang.org/documentation/master/std/#std.math.copysign.copysign)(magnitude: anytype, sign: @TypeOf(magnitude)) @TypeOf(magnitude)`
    
Returns a value with the magnitude of `magnitude` and the sign of `sign`. `pub inline fn cos[](https://ziglang.org/documentation/master/std/#std.math.cos)(value: anytype) @TypeOf(value)`
    
Cosine trigonometric function on a floating point number. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @cos `pub fn cosh[](https://ziglang.org/documentation/master/std/#std.math.cosh.cosh)(x: anytype) @TypeOf(x)`
    
Returns the hyperbolic cosine of x. `pub fn degreesToRadians[](https://ziglang.org/documentation/master/std/#std.math.degreesToRadians)(ang: anytype) if (@TypeOf(ang) == comptime_int) comptime_float else @TypeOf(ang)`
    
Converts an angle in degrees to radians. T must be a float or comptime number or a vector of floats. `pub fn divCeil[](https://ziglang.org/documentation/master/std/#std.math.divCeil)(comptime T: type, numerator: T, denominator: T) !T`
    
Divide numerator by denominator, rounding toward positive infinity. Returns an error on overflow or when denominator is zero. `pub fn divExact[](https://ziglang.org/documentation/master/std/#std.math.divExact)(comptime T: type, numerator: T, denominator: T) !T`
    
Divide numerator by denominator. Return an error if quotient is not an integer, denominator is zero, or on overflow. `pub fn divFloor[](https://ziglang.org/documentation/master/std/#std.math.divFloor)(comptime T: type, numerator: T, denominator: T) !T`
    
Divide numerator by denominator, rounding toward negative infinity. Returns an error on overflow or when denominator is zero. `pub fn divTrunc[](https://ziglang.org/documentation/master/std/#std.math.divTrunc)(comptime T: type, numerator: T, denominator: T) !T`
    
Divide numerator by denominator, rounding toward zero. Returns an error on overflow or when denominator is zero. `pub inline fn exp[](https://ziglang.org/documentation/master/std/#std.math.exp)(value: anytype) @TypeOf(value)`
    
Base-e exponential function on a floating point number. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @exp `pub inline fn exp2[](https://ziglang.org/documentation/master/std/#std.math.exp2)(value: anytype) @TypeOf(value)`
    
Base-2 exponential function on a floating point number. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @exp2 `pub fn expm1[](https://ziglang.org/documentation/master/std/#std.math.expm1.expm1)(x: anytype) @TypeOf(x)`
    
Returns e raised to the power of x, minus 1 (e^x - 1). This is more accurate than exp(e, x) - 1 when x is near 0. `pub inline fn floatEps[](https://ziglang.org/documentation/master/std/#std.math.float.floatEps)(comptime T: type) T`
    
Returns the machine epsilon of floating point type T. `pub inline fn floatEpsAt[](https://ziglang.org/documentation/master/std/#std.math.float.floatEpsAt)(comptime T: type, x: T) T`
    
Returns the local epsilon of floating point type T. `pub inline fn floatExponentBits[](https://ziglang.org/documentation/master/std/#std.math.float.floatExponentBits)(comptime T: type) comptime_int`
    
Returns the number of bits in the exponent of floating point type T. `pub inline fn floatExponentMax[](https://ziglang.org/documentation/master/std/#std.math.float.floatExponentMax)(comptime T: type) comptime_int`
    
Returns the maximum exponent that can represent a normalised value in floating point type T. `pub inline fn floatExponentMin[](https://ziglang.org/documentation/master/std/#std.math.float.floatExponentMin)(comptime T: type) comptime_int`
    
Returns the minimum exponent that can represent a normalised value in floating point type T. `pub inline fn floatFractionalBits[](https://ziglang.org/documentation/master/std/#std.math.float.floatFractionalBits)(comptime T: type) comptime_int`
    
Returns the number of fractional bits in the mantissa of floating point type T. `pub inline fn floatMantissaBits[](https://ziglang.org/documentation/master/std/#std.math.float.floatMantissaBits)(comptime T: type) comptime_int`
    
Returns the number of bits in the mantissa of floating point type T. `pub inline fn floatMax[](https://ziglang.org/documentation/master/std/#std.math.float.floatMax)(comptime T: type) T`
    
Returns the largest normal number representable in floating point type T. `pub inline fn floatMin[](https://ziglang.org/documentation/master/std/#std.math.float.floatMin)(comptime T: type) T`
    
Returns the smallest normal number representable in floating point type T. `pub inline fn floatTrueMin[](https://ziglang.org/documentation/master/std/#std.math.float.floatTrueMin)(comptime T: type) T`
    
Returns the smallest subnormal number representable in floating point type T. `pub inline fn floor[](https://ziglang.org/documentation/master/std/#std.math.floor)(value: anytype) @TypeOf(value)`
    
Returns the largest integral value not greater than the given floating point number. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @floor `pub fn floorPowerOfTwo[](https://ziglang.org/documentation/master/std/#std.math.floorPowerOfTwo)(comptime T: type, value: T) T`
    
Returns the nearest power of two less than or equal to value, or zero if value is less than or equal to zero. `pub fn frexp[](https://ziglang.org/documentation/master/std/#std.math.frexp.frexp)(x: anytype) Frexp[](https://ziglang.org/documentation/master/std/#std.math.frexp.Frexp)(@TypeOf(x))`
    
Breaks x into a normalized fraction and an integral power of two. f == frac * 2^exp, with |frac| in the interval [0.5, 1). `pub fn gamma[](https://ziglang.org/documentation/master/std/#std.math.gamma.gamma)(comptime T: type, x: T) T`
    
Returns the gamma function of x, gamma(x) = factorial(x - 1) for integer x. `pub fn gcd[](https://ziglang.org/documentation/master/std/#std.math.gcd.gcd)(a: anytype, b: anytype) @TypeOf(a, b)`
    
Returns the greatest common divisor (GCD) of two unsigned integers (`a` and `b`) which are not both zero. For example, the GCD of `8` and `12` is `4`, that is, `gcd(8, 12) == 4`. `pub fn hypot[](https://ziglang.org/documentation/master/std/#std.math.hypot.hypot)(x: anytype, y: anytype) @TypeOf(x, y)`
    
Returns sqrt(x * x + y * y), avoiding unnecessary overflow and underflow. `pub fn ilogb[](https://ziglang.org/documentation/master/std/#std.math.ilogb.ilogb)(x: anytype) i32`
    
Returns the binary exponent of x as an integer. `pub inline fn inf[](https://ziglang.org/documentation/master/std/#std.math.float.inf)(comptime T: type) T`
    
Returns the value inf for floating point type T. `pub fn isFinite[](https://ziglang.org/documentation/master/std/#std.math.isfinite.isFinite)(x: anytype) bool`
    
Returns whether x is a finite value. `pub inline fn isInf[](https://ziglang.org/documentation/master/std/#std.math.isinf.isInf)(x: anytype) bool`
    
Returns whether x is an infinity, ignoring sign. `pub fn isNan[](https://ziglang.org/documentation/master/std/#std.math.isnan.isNan)(x: anytype) bool`
`pub inline fn isNegativeInf[](https://ziglang.org/documentation/master/std/#std.math.isinf.isNegativeInf)(x: anytype) bool`
    
Returns whether x is an infinity with a negative sign. `pub inline fn isNegativeZero[](https://ziglang.org/documentation/master/std/#std.math.iszero.isNegativeZero)(x: anytype) bool`
    
Returns whether x is negative zero. `pub fn isNormal[](https://ziglang.org/documentation/master/std/#std.math.isnormal.isNormal)(x: anytype) bool`
    
Returns whether x is neither zero, subnormal, infinity, or NaN. `pub inline fn isPositiveInf[](https://ziglang.org/documentation/master/std/#std.math.isinf.isPositiveInf)(x: anytype) bool`
    
Returns whether x is an infinity with a positive sign. `pub inline fn isPositiveZero[](https://ziglang.org/documentation/master/std/#std.math.iszero.isPositiveZero)(x: anytype) bool`
    
Returns whether x is positive zero. `pub fn isPowerOfTwo[](https://ziglang.org/documentation/master/std/#std.math.isPowerOfTwo)(int: anytype) bool`
    
Asserts `int > 0`. `pub fn isSignalNan[](https://ziglang.org/documentation/master/std/#std.math.isnan.isSignalNan)(x: anytype) bool`
    
TODO: LLVM is known to miscompile on some architectures to quiet NaN - this is tracked by <https://github.com/ziglang/zig/issues/14366> `pub fn lcm[](https://ziglang.org/documentation/master/std/#std.math.lcm.lcm)(a: anytype, b: anytype) @TypeOf(a, b)`
    
Returns the least common multiple (LCM) of two integers (`a` and `b`). For example, the LCM of `8` and `12` is `24`, that is, `lcm(8, 12) == 24`. If any of the arguments is zero, then the returned value is 0. `pub fn ldexp[](https://ziglang.org/documentation/master/std/#std.math.ldexp.ldexp)(x: anytype, n: i32) @TypeOf(x)`
    
Returns x * 2^n. `pub fn ldexp[](https://ziglang.org/documentation/master/std/#std.math.ldexp.ldexp)(x: anytype, n: i32) @TypeOf(x)`
    
Returns x * 2^n. `pub fn lerp[](https://ziglang.org/documentation/master/std/#std.math.lerp)(a: anytype, b: anytype, t: anytype) @TypeOf(a, b, t)`
    
Performs linear interpolation between _a_ and _b_ based on _t_. _t_ ranges from 0.0 to 1.0, but may exceed these bounds. Supports floats and vectors of floats. `pub fn lgamma[](https://ziglang.org/documentation/master/std/#std.math.gamma.lgamma)(comptime T: type, x: T) T`
    
Returns the natural logarithm of the absolute value of the gamma function. `pub fn log[](https://ziglang.org/documentation/master/std/#std.math.log.log)(comptime T: type, base: T, x: T) T`
    
Returns the logarithm of x for the provided base. `pub fn log10[](https://ziglang.org/documentation/master/std/#std.math.log10.log10)(x: anytype) @TypeOf(x)`
    
Returns the base-10 logarithm of x. `pub fn log10_int[](https://ziglang.org/documentation/master/std/#std.math.log10.log10_int)(x: anytype) std[](https://ziglang.org/documentation/master/std/#std).math[](https://ziglang.org/documentation/master/std/#std.math).Log2Int[](https://ziglang.org/documentation/master/std/#std.math.Log2Int)(@TypeOf(x))`
    
Return the log base 10 of integer value x, rounding down to the nearest integer. `pub fn log1p[](https://ziglang.org/documentation/master/std/#std.math.log1p.log1p)(x: anytype) @TypeOf(x)`
    
Returns the natural logarithm of 1 + x with greater accuracy when x is near zero. `pub fn log2[](https://ziglang.org/documentation/master/std/#std.math.log2.log2)(x: anytype) @TypeOf(x)`
    
Returns the base-2 logarithm of x. `pub fn log2_int[](https://ziglang.org/documentation/master/std/#std.math.log2_int)(comptime T: type, x: T) Log2Int[](https://ziglang.org/documentation/master/std/#std.math.Log2Int)(T)`
    
Return the log base 2 of integer value x, rounding down to the nearest integer. `pub fn log2_int_ceil[](https://ziglang.org/documentation/master/std/#std.math.log2_int_ceil)(comptime T: type, x: T) Log2IntCeil[](https://ziglang.org/documentation/master/std/#std.math.Log2IntCeil)(T)`
    
Return the log base 2 of integer value x, rounding up to the nearest integer. `pub fn log_int[](https://ziglang.org/documentation/master/std/#std.math.log_int.log_int)(comptime T: type, base: T, x: T) Log2Int[](https://ziglang.org/documentation/master/std/#std.math.Log2Int)(T)`
    
Returns the logarithm of `x` for the provided `base`, rounding down to the nearest integer. Asserts that `base > 1` and `x > 0`. `pub fn lossyCast[](https://ziglang.org/documentation/master/std/#std.math.lossyCast)(comptime T: type, value: anytype) T`
    
Cast a value to a different type. If the value doesn't fit in, or can't be perfectly represented by, the new type, it will be converted to the closest possible representation. `pub fn maxInt[](https://ziglang.org/documentation/master/std/#std.math.maxInt)(comptime T: type) comptime_int`
    
Returns the maximum value of integer type T. `pub fn minInt[](https://ziglang.org/documentation/master/std/#std.math.minInt)(comptime T: type) comptime_int`
    
Returns the minimum value of integer type T. `pub fn mod[](https://ziglang.org/documentation/master/std/#std.math.mod)(comptime T: type, numerator: T, denominator: T) !T`
    
Returns numerator modulo denominator, or an error if denominator is zero or negative. Negative numerators never result in negative return values. `pub fn modf[](https://ziglang.org/documentation/master/std/#std.math.modf.modf)(x: anytype) Modf[](https://ziglang.org/documentation/master/std/#std.math.modf.Modf)(@TypeOf(x))`
    
Returns the integer and fractional floating-point numbers that sum to x. The sign of each result is the same as the sign of x. In comptime, may be used with comptime_float `pub fn mul[](https://ziglang.org/documentation/master/std/#std.math.mul)(comptime T: type, a: T, b: T) (error{Overflow}!T)`
    
Returns the product of a and b. Returns an error on overflow. `pub fn mulWide[](https://ziglang.org/documentation/master/std/#std.math.mulWide)(comptime T: type, a: T, b: T) std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Int[](https://ziglang.org/documentation/master/std/#std.meta.Int)( @typeInfo(T).int.signedness, @typeInfo(T).int.bits * 2, )`
    
Multiply a and b. Return type is wide enough to guarantee no overflow. `pub inline fn nan[](https://ziglang.org/documentation/master/std/#std.math.float.nan)(comptime T: type) T`
    
Returns the canonical quiet NaN representation for floating point type T. `pub fn negate[](https://ziglang.org/documentation/master/std/#std.math.negate)(x: anytype) !@TypeOf(x)`
`pub fn negateCast[](https://ziglang.org/documentation/master/std/#std.math.negateCast)(x: anytype) !std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Int[](https://ziglang.org/documentation/master/std/#std.meta.Int)(.signed, @bitSizeOf(@TypeOf(x)))`
    
Returns the negation of the integer parameter. Result is a signed integer. `pub fn nextAfter[](https://ziglang.org/documentation/master/std/#std.math.nextafter.nextAfter)(comptime T: type, x: T, y: T) T`
    
Returns the next representable value after `x` in the direction of `y`. `pub fn order[](https://ziglang.org/documentation/master/std/#std.math.order)(a: anytype, b: anytype) Order[](https://ziglang.org/documentation/master/std/#std.math.Order)`
    
Given two numbers, this function returns the order they are with respect to each other. `pub fn pow[](https://ziglang.org/documentation/master/std/#std.math.pow.pow)(comptime T: type, x: T, y: T) T`
    
Returns x raised to the power of y (x^y). `pub fn powi[](https://ziglang.org/documentation/master/std/#std.math.powi.powi)(comptime T: type, x: T, y: T) (error{ Overflow, Underflow, }!T)`
    
Returns the power of x raised by the integer y (x^y). `pub fn radiansToDegrees[](https://ziglang.org/documentation/master/std/#std.math.radiansToDegrees)(ang: anytype) if (@TypeOf(ang) == comptime_int) comptime_float else @TypeOf(ang)`
    
Converts an angle in radians to degrees. T must be a float or comptime number or a vector of floats. `pub fn raiseDivByZero[](https://ziglang.org/documentation/master/std/#std.math.raiseDivByZero)() void`
`pub fn raiseInexact[](https://ziglang.org/documentation/master/std/#std.math.raiseInexact)() void`
`pub fn raiseInvalid[](https://ziglang.org/documentation/master/std/#std.math.raiseInvalid)() void`
`pub fn raiseOverflow[](https://ziglang.org/documentation/master/std/#std.math.raiseOverflow)() void`
`pub fn raiseUnderflow[](https://ziglang.org/documentation/master/std/#std.math.raiseUnderflow)() void`
`pub fn rem[](https://ziglang.org/documentation/master/std/#std.math.rem)(comptime T: type, numerator: T, denominator: T) !T`
    
Returns the remainder when numerator is divided by denominator, or an error if denominator is zero or negative. Negative numerators can give negative results. `pub fn rotl[](https://ziglang.org/documentation/master/std/#std.math.rotl)(comptime T: type, x: T, r: anytype) T`
    
Rotates left. Only unsigned values can be rotated. Negative shift values result in shift modulo the bit count. `pub fn rotr[](https://ziglang.org/documentation/master/std/#std.math.rotr)(comptime T: type, x: T, r: anytype) T`
    
Rotates right. Only unsigned values can be rotated. Negative shift values result in shift modulo the bit count. `pub inline fn round[](https://ziglang.org/documentation/master/std/#std.math.round)(value: anytype) @TypeOf(value)`
    
Rounds the given floating point number to the nearest integer. If two integers are equally close, rounds away from zero. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @round `pub fn shl[](https://ziglang.org/documentation/master/std/#std.math.shl)(comptime T: type, a: T, shift_amt: anytype) T`
    
Shifts left. Overflowed bits are truncated. A negative shift amount results in a right shift. `pub fn shlExact[](https://ziglang.org/documentation/master/std/#std.math.shlExact)(comptime T: type, a: T, shift_amt: Log2Int[](https://ziglang.org/documentation/master/std/#std.math.Log2Int)(T)) !T`
    
Shifts a left by shift_amt. Returns an error on overflow. shift_amt is unsigned. `pub fn shr[](https://ziglang.org/documentation/master/std/#std.math.shr)(comptime T: type, a: T, shift_amt: anytype) T`
    
Shifts right. Overflowed bits are truncated. A negative shift amount results in a left shift. `pub inline fn sign[](https://ziglang.org/documentation/master/std/#std.math.sign)(i: anytype) @TypeOf(i)`
    
Returns -1, 0, or 1. Supports integer and float types and vectors of integer and float types. Unsigned integer types will always return 0 or 1. Branchless. `pub fn signbit[](https://ziglang.org/documentation/master/std/#std.math.signbit.signbit)(x: anytype) bool`
    
Returns whether x is negative or negative 0. `pub inline fn sin[](https://ziglang.org/documentation/master/std/#std.math.sin)(value: anytype) @TypeOf(value)`
    
Sine trigonometric function on a floating point number. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @sin `pub fn sinh[](https://ziglang.org/documentation/master/std/#std.math.sinh.sinh)(x: anytype) @TypeOf(x)`
    
Returns the hyperbolic sine of x. `pub inline fn snan[](https://ziglang.org/documentation/master/std/#std.math.float.snan)(comptime T: type) T`
    
Returns a signalling NaN representation for floating point type T. `pub fn sqrt[](https://ziglang.org/documentation/master/std/#std.math.sqrt.sqrt)(x: anytype) Sqrt[](https://ziglang.org/documentation/master/std/#std.math.sqrt.Sqrt)(@TypeOf(x))`
    
Returns the square root of x. `pub fn sub[](https://ziglang.org/documentation/master/std/#std.math.sub)(comptime T: type, a: T, b: T) (error{Overflow}!T)`
    
Returns a - b, or an error on overflow. `pub inline fn tan[](https://ziglang.org/documentation/master/std/#std.math.tan)(value: anytype) @TypeOf(value)`
    
Tangent trigonometric function on a floating point number. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @tan `pub fn tanh[](https://ziglang.org/documentation/master/std/#std.math.tanh.tanh)(x: anytype) @TypeOf(x)`
    
Returns the hyperbolic tangent of x. `pub inline fn trunc[](https://ziglang.org/documentation/master/std/#std.math.trunc)(value: anytype) @TypeOf(value)`
    
Rounds the given floating point number to an integer, towards zero. Uses a dedicated hardware instruction when available. This is the same as calling the builtin @trunc `pub fn wrap[](https://ziglang.org/documentation/master/std/#std.math.wrap)(x: anytype, r: anytype) @TypeOf(x)`
    
Odd sawtooth function
```
    |
   / | /  /
  /  |/  /
 --/----/----/--
 /  /|  /
 /  / | /
    |

```

Limit x to the half-open interval [-r, r).
## Error Sets
  * [AlignCastError](https://ziglang.org/documentation/master/std/#std.math.AlignCastError)


## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
