[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [valgrind](https://ziglang.org/documentation/master/std/#std.valgrind)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/valgrind.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [ClientRequest](https://ziglang.org/documentation/master/std/#std.valgrind.ClientRequest)


## Namespaces
  * [MempoolFlags](https://ziglang.org/documentation/master/std/#std.valgrind.MempoolFlags)
  * [cachegrind](https://ziglang.org/documentation/master/std/#std.valgrind.cachegrind)
  * [callgrind](https://ziglang.org/documentation/master/std/#std.valgrind.callgrind)
  * [memcheck](https://ziglang.org/documentation/master/std/#std.valgrind.memcheck)


## Global Variables
## Values
## Functions `pub fn IsTool[](https://ziglang.org/documentation/master/std/#std.valgrind.IsTool)(base: [2]u8, code: usize) bool`
`pub fn ToolBase[](https://ziglang.org/documentation/master/std/#std.valgrind.ToolBase)(base: [2]u8) u32`
`pub fn countErrors[](https://ziglang.org/documentation/master/std/#std.valgrind.countErrors)() usize`
    
Counts the number of errors that have been recorded by a tool. Nb: the tool must record the errors with VG_(maybe_record_error)() or VG_(unique_error)() for them to be counted. `pub fn createMempool[](https://ziglang.org/documentation/master/std/#std.valgrind.createMempool)(pool: [*]u8, rzB: usize, is_zeroed: bool, flags: usize) void`
`pub fn destroyMempool[](https://ziglang.org/documentation/master/std/#std.valgrind.destroyMempool)(pool: [*]u8) void`
    
Destroy a memory pool. `pub fn disableErrorReporting[](https://ziglang.org/documentation/master/std/#std.valgrind.disableErrorReporting)() void`
    
Disable error reporting for this thread. Behaves in a stack like way, so you can safely call this multiple times provided that enableErrorReporting() is called the same number of times to re-enable reporting. The first call of this macro disables reporting. Subsequent calls have no effect except to increase the number of enableErrorReporting() calls needed to re-enable reporting. Child threads do not inherit this setting from their parents -- they are always created with reporting enabled. `pub fn discardTranslations[](https://ziglang.org/documentation/master/std/#std.valgrind.discardTranslations)(qzz: []const u8) void`
    
Discard translation of code in the slice qzz. Useful if you are debugging a JITter or some such, since it provides a way to make sure valgrind will retranslate the invalidated area. Returns no value. `pub fn doClientRequest[](https://ziglang.org/documentation/master/std/#std.valgrind.doClientRequest)(default: usize, request: usize, a1: usize, a2: usize, a3: usize, a4: usize, a5: usize) usize`
`pub fn enableErrorReporting[](https://ziglang.org/documentation/master/std/#std.valgrind.enableErrorReporting)() void`
    
Re-enable error reporting. (see disableErrorReporting()) `pub fn freeLikeBlock[](https://ziglang.org/documentation/master/std/#std.valgrind.freeLikeBlock)(addr: [*]u8, rzB: usize) void`
`pub fn innerThreads[](https://ziglang.org/documentation/master/std/#std.valgrind.innerThreads)(qzz: [*]u8) void`
`pub fn mallocLikeBlock[](https://ziglang.org/documentation/master/std/#std.valgrind.mallocLikeBlock)(mem: []u8, rzB: usize, is_zeroed: bool) void`
`pub fn mapIpToSrcloc[](https://ziglang.org/documentation/master/std/#std.valgrind.mapIpToSrcloc)(addr: *const u8, buf64: [64]u8) usize`
    
Map a code address to a source file name and line number. buf64 must point to a 64-byte buffer in the caller's address space. The result will be dumped in there and is guaranteed to be zero terminated. If no info is found, the first byte is set to zero. `pub fn mempoolAlloc[](https://ziglang.org/documentation/master/std/#std.valgrind.mempoolAlloc)(pool: [*]u8, mem: []u8) void`
    
Associate a piece of memory with a memory pool. `pub fn mempoolChange[](https://ziglang.org/documentation/master/std/#std.valgrind.mempoolChange)(pool: [*]u8, addrA: [*]u8, mem: []u8) void`
    
Resize and/or move a piece associated with a memory pool. `pub fn mempoolExists[](https://ziglang.org/documentation/master/std/#std.valgrind.mempoolExists)(pool: [*]u8) bool`
    
Return if a mempool exists. `pub fn mempoolFree[](https://ziglang.org/documentation/master/std/#std.valgrind.mempoolFree)(pool: [*]u8, addr: [*]u8) void`
    
Disassociate a piece of memory from a memory pool. `pub fn mempoolTrim[](https://ziglang.org/documentation/master/std/#std.valgrind.mempoolTrim)(pool: [*]u8, mem: []u8) void`
    
Disassociate any pieces outside a particular range. `pub fn monitorCommand[](https://ziglang.org/documentation/master/std/#std.valgrind.monitorCommand)(command: [*]u8) bool`
    
Execute a monitor command from the client program. If a connection is opened with GDB, the output will be sent according to the output mode set for vgdb. If no connection is opened, output will go to the log output. Returns 1 if command not recognised, 0 otherwise. `pub fn moveMempool[](https://ziglang.org/documentation/master/std/#std.valgrind.moveMempool)(poolA: [*]u8, poolB: [*]u8) void`
    
Resize and/or move a piece associated with a memory pool. `pub fn nonSimdCall0[](https://ziglang.org/documentation/master/std/#std.valgrind.nonSimdCall0)(func: fn (usize) usize) usize`
`pub fn nonSimdCall0[](https://ziglang.org/documentation/master/std/#std.valgrind.nonSimdCall0)(func: fn (usize) usize) usize`
`pub fn nonSimdCall1[](https://ziglang.org/documentation/master/std/#std.valgrind.nonSimdCall1)(func: fn (usize, usize) usize, a1: usize) usize`
`pub fn nonSimdCall1[](https://ziglang.org/documentation/master/std/#std.valgrind.nonSimdCall1)(func: fn (usize, usize) usize, a1: usize) usize`
`pub fn nonSimdCall2[](https://ziglang.org/documentation/master/std/#std.valgrind.nonSimdCall2)(func: fn (usize, usize, usize) usize, a1: usize, a2: usize) usize`
`pub fn nonSimdCall2[](https://ziglang.org/documentation/master/std/#std.valgrind.nonSimdCall2)(func: fn (usize, usize, usize) usize, a1: usize, a2: usize) usize`
`pub fn nonSimdCall3[](https://ziglang.org/documentation/master/std/#std.valgrind.nonSimdCall3)(func: fn (usize, usize, usize, usize) usize, a1: usize, a2: usize, a3: usize) usize`
`pub fn nonSimdCall3[](https://ziglang.org/documentation/master/std/#std.valgrind.nonSimdCall3)(func: fn (usize, usize, usize, usize) usize, a1: usize, a2: usize, a3: usize) usize`
`pub fn resizeInPlaceBlock[](https://ziglang.org/documentation/master/std/#std.valgrind.resizeInPlaceBlock)(oldmem: []u8, newsize: usize, rzB: usize) void`
`pub fn runningOnValgrind[](https://ziglang.org/documentation/master/std/#std.valgrind.runningOnValgrind)() usize`
    
Returns the number of Valgrinds this code is running under. That is, 0 if running natively, 1 if running under Valgrind, 2 if running under Valgrind which is running under another Valgrind, etc. `pub fn stackChange[](https://ziglang.org/documentation/master/std/#std.valgrind.stackChange)(id: usize, newstack: []u8) void`
    
Change the start and end address of the stack id. start is the new lowest addressable stack byte, end is the new highest addressable stack byte. `pub fn stackDeregister[](https://ziglang.org/documentation/master/std/#std.valgrind.stackDeregister)(id: usize) void`
    
Unmark the piece of memory associated with a stack id as being a stack. `pub fn stackRegister[](https://ziglang.org/documentation/master/std/#std.valgrind.stackRegister)(stack: []u8) usize`
    
Mark a piece of memory as being a stack. Returns a stack id. start is the lowest addressable stack byte, end is the highest addressable stack byte.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
