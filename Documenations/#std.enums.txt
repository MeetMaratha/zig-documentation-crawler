[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [enums](https://ziglang.org/documentation/master/std/#std.enums)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/enums.zig)
This module contains utilities and data structures for working with enums.
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [BoundedEnumMultiset](https://ziglang.org/documentation/master/std/#std.enums.BoundedEnumMultiset)
  * [EnumArray](https://ziglang.org/documentation/master/std/#std.enums.EnumArray)
  * [EnumFieldStruct](https://ziglang.org/documentation/master/std/#std.enums.EnumFieldStruct)
  * [EnumIndexer](https://ziglang.org/documentation/master/std/#std.enums.EnumIndexer)
  * [EnumMap](https://ziglang.org/documentation/master/std/#std.enums.EnumMap)
  * [EnumMultiset](https://ziglang.org/documentation/master/std/#std.enums.EnumMultiset)
  * [EnumSet](https://ziglang.org/documentation/master/std/#std.enums.EnumSet)


## Namespaces
## Global Variables
## Values
## Functions `pub fn directEnumArray[](https://ziglang.org/documentation/master/std/#std.enums.directEnumArray)( comptime E: type, comptime Data: type, comptime max_unused_slots: comptime_int, init_values: EnumFieldStruct[](https://ziglang.org/documentation/master/std/#std.enums.EnumFieldStruct)(E, Data, null), ) [directEnumArrayLen[](https://ziglang.org/documentation/master/std/#std.enums.directEnumArrayLen)(E, max_unused_slots)]Data`
    
Initializes an array of Data which can be indexed by @intCast(usize, @intFromEnum(enum_value)). If the enum is non-exhaustive, the resulting array will only be large enough to hold all explicit fields. If the enum contains any fields with values that cannot be represented by usize, a compile error is issued. The max_unused_slots parameter limits the total number of items which have no matching enum key (holes in the enum numbering). So for example, if an enum has values 1, 2, 5, and 6, max_unused_slots must be at least 3, to allow unused slots 0, 3, and 4. The init_values parameter must be a struct with field names that match the enum values. If the enum has multiple fields with the same value, the name of the first one must be used. `pub fn directEnumArrayDefault[](https://ziglang.org/documentation/master/std/#std.enums.directEnumArrayDefault)( comptime E: type, comptime Data: type, comptime default: ?Data, comptime max_unused_slots: comptime_int, init_values: EnumFieldStruct[](https://ziglang.org/documentation/master/std/#std.enums.EnumFieldStruct)(E, Data, default), ) [directEnumArrayLen[](https://ziglang.org/documentation/master/std/#std.enums.directEnumArrayLen)(E, max_unused_slots)]Data`
    
Initializes an array of Data which can be indexed by @intCast(usize, @intFromEnum(enum_value)). The enum must be exhaustive. If the enum contains any fields with values that cannot be represented by usize, a compile error is issued. The max_unused_slots parameter limits the total number of items which have no matching enum key (holes in the enum numbering). So for example, if an enum has values 1, 2, 5, and 6, max_unused_slots must be at least 3, to allow unused slots 0, 3, and 4. The init_values parameter must be a struct with field names that match the enum values. If the enum has multiple fields with the same value, the name of the first one must be used. `pub fn directEnumArrayLen[](https://ziglang.org/documentation/master/std/#std.enums.directEnumArrayLen)(comptime E: type, comptime max_unused_slots: comptime_int) comptime_int`
    
Determines the length of a direct-mapped enum array, indexed by @intCast(usize, @intFromEnum(enum_value)). If the enum is non-exhaustive, the resulting length will only be enough to hold all explicit fields. If the enum contains any fields with values that cannot be represented by usize, a compile error is issued. The max_unused_slots parameter limits the total number of items which have no matching enum key (holes in the enum numbering). So for example, if an enum has values 1, 2, 5, and 6, max_unused_slots must be at least 3, to allow unused slots 0, 3, and 4. `pub fn fromInt[](https://ziglang.org/documentation/master/std/#std.enums.fromInt)(comptime E: type, integer: anytype) ?E`
`pub fn nameCast[](https://ziglang.org/documentation/master/std/#std.enums.nameCast)(comptime E: type, comptime value: anytype) E`
    
Deprecated: Use @field(E, @tagName(tag)) or @field(E, string) `pub fn tagName[](https://ziglang.org/documentation/master/std/#std.enums.tagName)(comptime E: type, e: E) ?[:0]const u8`
    
A safe alternative to @tagName() for non-exhaustive enums that doesn't panic when `e` has no tagged value. Returns the tag name for `e` or null if no tag exists. `pub fn values[](https://ziglang.org/documentation/master/std/#std.enums.values)(comptime E: type) []const E`
    
Returns the set of all named values in the given enum, in declaration order. `pub inline fn valuesFromFields[](https://ziglang.org/documentation/master/std/#std.enums.valuesFromFields)(comptime E: type, comptime fields: []const EnumField[](https://ziglang.org/documentation/master/std/#std.builtin.Type.EnumField)) []const E`
    
Looks up the supplied fields in the given enum type. Uses only the field names, field values are ignored. The result array is in the same order as the input.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
