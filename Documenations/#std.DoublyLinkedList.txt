[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [DoublyLinkedList](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/DoublyLinkedList.zig)
A doubly-linked list has a pair of pointers to both the head and tail of the list. List elements have pointers to both the previous and next elements in the sequence. The list can be traversed both forward and backward. Some operations that take linear O(n) time with a singly-linked list can be done without traversal in constant O(1) time with a doubly-linked list:
  * Removing an element.
  * Inserting a new element before an existing element.
  * Pushing or popping an element from the end of the list.


## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
first: ?*Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node) = null
```

```
last: ?*Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node) = null
```

## Types
  * [Node](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node)


## Namespaces
## Global Variables
## Values
## Functions `pub fn append[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.append)(list: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList), new_node: *Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node)) void`
    
Insert a new node at the end of the list. `pub fn concatByMoving[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.concatByMoving)(list1: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList), list2: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList)) void`
    
Concatenate list2 onto the end of list1, removing all entries from the former. `pub fn insertAfter[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.insertAfter)(list: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList), existing_node: *Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node), new_node: *Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node)) void`
`pub fn insertBefore[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.insertBefore)(list: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList), existing_node: *Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node), new_node: *Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node)) void`
`pub fn len[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.len)(list: DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList)) usize`
    
Iterate over all nodes, returning the count. `pub fn pop[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.pop)(list: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList)) ?*Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node)`
    
Remove and return the last node in the list. `pub fn popFirst[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.popFirst)(list: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList)) ?*Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node)`
    
Remove and return the first node in the list. `pub fn prepend[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.prepend)(list: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList), new_node: *Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node)) void`
    
Insert a new node at the beginning of the list. `pub fn remove[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.remove)(list: *DoublyLinkedList[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList), node: *Node[](https://ziglang.org/documentation/master/std/#std.DoublyLinkedList.Node)) void`
    
Remove a node from the list.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
