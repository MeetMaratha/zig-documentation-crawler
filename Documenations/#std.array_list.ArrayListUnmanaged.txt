[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [array_list](https://ziglang.org/documentation/master/std/#std.array_list)
  * [ArrayListUnmanaged](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListUnmanaged)


Loading...
# Type Function[[src]](https://ziglang.org/documentation/master/std/#src/std/array_list.zig)
An ArrayList, but the allocator is passed as a parameter to the relevant functions rather than stored in the struct itself. The same allocator must be used throughout the entire lifetime of an ArrayListUnmanaged. Initialize directly or with `initCapacity`, and deinitialize with `deinit` or use `toOwnedSlice`.
## Parameters
```
T: type
```

## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
items: Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.Slice) = &[_]T{}
```

Contents of the list. This field is intended to be accessed directly.
Pointers to elements in this slice are invalidated by various functions of this ArrayList in accordance with the respective documentation. In all cases, "invalidated" means that the memory has been passed to an allocator's resize or free function.
```
capacity: usize = 0
```

How many T values this list can hold without allocating additional memory.
## Types
  * [FixedWriter](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.FixedWriter)
  * [SentinelSlice](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.SentinelSlice)
  * [Slice](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.Slice)
  * [Writer](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.Writer)
  * [WriterContext](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.WriterContext)


## Namespaces
## Global Variables
## Values
[empty](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.empty)| `Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)`| An ArrayList containing no elements.  
---|---|---  
## Functions `pub fn addManyAsArray[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.addManyAsArray)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), comptime n: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!*[n]T`
    
Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. The returned pointer becomes invalid when the list is resized. `pub fn addManyAsArrayAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.addManyAsArrayAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), comptime n: usize) *[n]T`
    
Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. Never invalidates element pointers. The returned pointer becomes invalid when the list is resized. Asserts that the list can hold the additional items. `pub fn addManyAsSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.addManyAsSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), n: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)![]T`
    
Resize the array, adding `n` new elements, which have `undefined` values. The return value is a slice pointing to the newly allocated elements. The returned pointer becomes invalid when the list is resized. Resizes list if `self.capacity` is not large enough. `pub fn addManyAsSliceAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.addManyAsSliceAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), n: usize) []T`
    
Resize the array, adding `n` new elements, which have `undefined` values. The return value is a slice pointing to the newly allocated elements. Never invalidates element pointers. The returned pointer becomes invalid when the list is resized. Asserts that the list can hold the additional items. `pub fn addManyAt[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.addManyAt)( self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), index: usize, count: usize, ) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)![]T`
    
Add `count` new elements at position `index`, which have `undefined` values. Returns a slice pointing to the newly allocated elements, which becomes invalid after various `ArrayList` operations. Invalidates pre-existing pointers to elements at and after `index`. Invalidates all pre-existing element pointers if capacity must be increased to accommodate the new elements. Asserts that the index is in bounds or equal to the length. `pub fn addManyAtAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.addManyAtAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), index: usize, count: usize) []T`
    
Add `count` new elements at position `index`, which have `undefined` values. Returns a slice pointing to the newly allocated elements, which becomes invalid after various `ArrayList` operations. Invalidates pre-existing pointers to elements at and after `index`, but does not invalidate any before that. Asserts that the list has capacity for the additional items. Asserts that the index is in bounds or equal to the length. `pub fn addOne[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.addOne)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!*T`
    
Increase length by 1, returning pointer to the new item. The returned element pointer becomes invalid when the list is resized. `pub fn addOneAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.addOneAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) *T`
    
Increase length by 1, returning pointer to the new item. Never invalidates element pointers. The returned element pointer becomes invalid when the list is resized. Asserts that the list can hold one additional item. `pub fn allocatedSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.allocatedSlice)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.Slice)`
    
Returns a slice of all the items plus the extra capacity, whose memory contents are `undefined`. `pub fn append[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.append)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), item: T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Extend the list by 1 element. Allocates more memory as necessary. Invalidates element pointers if additional memory is needed. `pub fn appendAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.appendAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), item: T) void`
    
Extend the list by 1 element. Never invalidates element pointers. Asserts that the list can hold one additional item. `pub inline fn appendNTimes[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.appendNTimes)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), value: T, n: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Append a value to the list `n` times. Allocates more memory as necessary. Invalidates element pointers if additional memory is needed. The function is inline so that a comptime-known `value` parameter will have a more optimal memset codegen in case it has a repeated byte pattern. `pub inline fn appendNTimesAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.appendNTimesAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), value: T, n: usize) void`
    
Append a value to the list `n` times. Never invalidates element pointers. The function is inline so that a comptime-known `value` parameter will have better memset codegen in case it has a repeated byte pattern. Asserts that the list can hold the additional items. `pub fn appendSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.appendSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), items: []const T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Append the slice of items to the list. Allocates more memory as necessary. Invalidates element pointers if additional memory is needed. `pub fn appendSliceAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.appendSliceAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), items: []const T) void`
    
Append the slice of items to the list. Asserts that the list can hold the additional items. `pub fn appendUnalignedSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.appendUnalignedSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), items: []align(1) const T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Append the slice of items to the list. Allocates more memory as necessary. Only call this function if a call to `appendSlice` instead would be a compile error. Invalidates element pointers if additional memory is needed. `pub fn appendUnalignedSliceAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.appendUnalignedSliceAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), items: []align(1) const T) void`
    
Append an unaligned slice of items to the list. Only call this function if a call to `appendSliceAssumeCapacity` instead would be a compile error. Asserts that the list can hold the additional items. `pub fn clearAndFree[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.clearAndFree)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) void`
    
Invalidates all element pointers. `pub fn clearRetainingCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.clearRetainingCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) void`
    
Invalidates all element pointers. `pub fn clone[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.clone)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)`
    
Creates a copy of this ArrayList. `pub fn deinit[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.deinit)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) void`
    
Release all allocated memory. `pub fn ensureTotalCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.ensureTotalCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), new_capacity: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Modify the array so that it can hold at least `new_capacity` items. Implements super-linear growth to achieve amortized O(1) append operations. Invalidates element pointers if additional memory is needed. `pub fn ensureTotalCapacityPrecise[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.ensureTotalCapacityPrecise)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), new_capacity: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
If the current capacity is less than `new_capacity`, this function will modify the array so that it can hold exactly `new_capacity` items. Invalidates element pointers if additional memory is needed. `pub fn ensureUnusedCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.ensureUnusedCapacity)( self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), additional_count: usize, ) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Modify the array so that it can hold at least `additional_count` **more** items. Invalidates element pointers if additional memory is needed. `pub fn expandToCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.expandToCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) void`
    
Increases the array's length to match the full capacity that is already allocated. The new elements have `undefined` values. Never invalidates element pointers. `pub fn fixedWriter[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.fixedWriter)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) FixedWriter[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.FixedWriter)`
    
Initializes a Writer which will append to the list but will return `error.OutOfMemory` rather than increasing capacity. `pub fn fromOwnedSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.fromOwnedSlice)(slice: Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.Slice)) Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)`
    
ArrayListUnmanaged takes ownership of the passed in slice. Deinitialize with `deinit` or use `toOwnedSlice`. `pub fn fromOwnedSliceSentinel[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.fromOwnedSliceSentinel)(comptime sentinel: T, slice: [:sentinel]T) Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)`
    
ArrayListUnmanaged takes ownership of the passed in slice. Deinitialize with `deinit` or use `toOwnedSlice`. `pub fn getLast[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.getLast)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) T`
    
Return the last element from the list. Asserts that the list is not empty. `pub fn getLastOrNull[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.getLastOrNull)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) ?T`
    
Return the last element from the list, or return `null` if list is empty. `pub fn initBuffer[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.initBuffer)(buffer: Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.Slice)) Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)`
    
Initialize with externally-managed memory. The buffer determines the capacity, and the length is set to zero. When initialized this way, all functions that accept an Allocator argument cause illegal behavior. `pub fn initCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.initCapacity)(gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), num: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)`
    
Initialize with capacity to hold `num` elements. The resulting capacity will equal `num` exactly. Deinitialize with `deinit` or use `toOwnedSlice`. `pub fn insert[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.insert)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), i: usize, item: T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Insert `item` at index `i`. Moves `list[i .. list.len]` to higher indices to make room. If `i` is equal to the length of the list this operation is equivalent to append. This operation is O(N). Invalidates element pointers if additional memory is needed. Asserts that the index is in bounds or equal to the length. `pub fn insertAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.insertAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), i: usize, item: T) void`
    
Insert `item` at index `i`. Moves `list[i .. list.len]` to higher indices to make room. If in` is equal to the length of the list this operation is equivalent to append. This operation is O(N). Asserts that the list has capacity for one additional item. Asserts that the index is in bounds or equal to the length.` `pub fn insertSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.insertSlice)( self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), index: usize, items: []const T, ) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Insert slice `items` at index `i` by moving `list[i .. list.len]` to make room. This operation is O(N). Invalidates pre-existing pointers to elements at and after `index`. Invalidates all pre-existing element pointers if capacity must be increased to accommodate the new elements. Asserts that the index is in bounds or equal to the length. `pub fn orderedRemove[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.orderedRemove)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), i: usize) T`
    
Remove the element at index `i` from the list and return its value. Invalidates pointers to the last element. This operation is O(N). Asserts that the list is not empty. Asserts that the index is in bounds. `pub fn pop[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.pop)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) ?T`
    
Remove and return the last element from the list. If the list is empty, returns `null`. Invalidates pointers to last element. `pub fn replaceRange[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.replaceRange)( self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), start: usize, len: usize, new_items: []const T, ) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Grows or shrinks the list as necessary. Invalidates element pointers if additional capacity is allocated. Asserts that the range is in bounds. `pub fn replaceRangeAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.replaceRangeAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), start: usize, len: usize, new_items: []const T) void`
    
Grows or shrinks the list as necessary. Never invalidates element pointers. Asserts the capacity is enough for additional items. `pub fn resize[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.resize)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), new_len: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Adjust the list length to `new_len`. Additional elements contain the value `undefined`. Invalidates element pointers if additional memory is needed. `pub fn shrinkAndFree[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.shrinkAndFree)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), new_len: usize) void`
    
Reduce allocated capacity to `new_len`. May invalidate element pointers. Asserts that the new length is less than or equal to the previous length. `pub fn shrinkRetainingCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.shrinkRetainingCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), new_len: usize) void`
    
Reduce length to `new_len`. Invalidates pointers to elements `items[new_len..]`. Keeps capacity the same. Asserts that the new length is less than or equal to the previous length. `pub fn swapRemove[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.swapRemove)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), i: usize) T`
    
Removes the element at the specified index and returns it. The empty slot is filled from the end of the list. Invalidates pointers to last element. This operation is O(1). Asserts that the list is not empty. Asserts that the index is in bounds. `pub fn toManaged[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.toManaged)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) ArrayListAligned[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)(T, alignment)`
    
Convert this list into an analogous memory-managed one. The returned list has ownership of the underlying memory. `pub fn toOwnedSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.toOwnedSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.Slice)`
    
The caller owns the returned memory. Empties this ArrayList. Its capacity is cleared, making deinit() safe but unnecessary to call. `pub fn toOwnedSliceSentinel[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.toOwnedSliceSentinel)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), comptime sentinel: T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!SentinelSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.SentinelSlice)(sentinel)`
    
The caller owns the returned memory. ArrayList becomes empty. `pub fn unusedCapacitySlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.unusedCapacitySlice)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)) []T`
    
Returns a slice of only the extra capacity after items. This can be useful for writing directly into an ArrayList. Note that such an operation must be followed up with a direct modification of `self.items.len`. `pub fn writer[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.writer)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged), gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) Writer[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged.Writer)`
    
Initializes a Writer which will append to the list.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
