[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [tar](https://ziglang.org/documentation/master/std/#std.tar)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/tar.zig)
Tar archive is single ordinary file which can contain many files (or directories, symlinks, ...). It's build by series of blocks each size of 512 bytes. First block of each entry is header which defines type, name, size permissions and other attributes. Header is followed by series of blocks of file content, if any that entry has content. Content is padded to the block size, so next header always starts at block boundary.
This simple format is extended by GNU and POSIX pax extensions to support file names longer than 256 bytes and additional attributes.
This is not comprehensive tar parser. Here we are only file types needed to support Zig package manager; normal file, directory, symbolic link. And subset of attributes: name, size, permissions.
GNU tar reference: <https://www.gnu.org/software/tar/manual/html_node/Standard.html> pax reference: <https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13>
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [Diagnostics](https://ziglang.org/documentation/master/std/#std.tar.Diagnostics)
  * [FileKind](https://ziglang.org/documentation/master/std/#std.tar.FileKind)
  * [Iterator](https://ziglang.org/documentation/master/std/#std.tar.Iterator)
  * [IteratorOptions](https://ziglang.org/documentation/master/std/#std.tar.IteratorOptions)
  * [PipeOptions](https://ziglang.org/documentation/master/std/#std.tar.PipeOptions)


## Namespaces
## Global Variables
## Values
## Functions `pub fn iterator[](https://ziglang.org/documentation/master/std/#std.tar.iterator)(reader: anytype, options: IteratorOptions[](https://ziglang.org/documentation/master/std/#std.tar.IteratorOptions)) Iterator[](https://ziglang.org/documentation/master/std/#std.tar.Iterator)(@TypeOf(reader))`
    
Iterates over files in tar archive. `next` returns each file in tar archive. `pub fn pipeToFileSystem[](https://ziglang.org/documentation/master/std/#std.tar.pipeToFileSystem)(dir: std[](https://ziglang.org/documentation/master/std/#std).fs[](https://ziglang.org/documentation/master/std/#std.fs).Dir[](https://ziglang.org/documentation/master/std/#std.fs.Dir), reader: anytype, options: PipeOptions[](https://ziglang.org/documentation/master/std/#std.tar.PipeOptions)) !void`
    
Saves tar file content to the file systems. `pub fn writer[](https://ziglang.org/documentation/master/std/#std.tar.writer.writer)(underlying_writer: anytype) Writer[](https://ziglang.org/documentation/master/std/#std.tar.writer.Writer)(@TypeOf(underlying_writer))`
    
Creates tar Writer which will write tar content to the `underlying_writer`. Use setRoot to nest all following entries under single root. If file don't fit into posix header (name+prefix: 100+155 bytes) gnu extented header will be used for long names. Options enables setting file premission mode and mtime. Default is to use current time for mtime and 0o664 for file mode.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
