[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [c](https://ziglang.org/documentation/master/std/#std.c)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/c.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [AF](https://ziglang.org/documentation/master/std/#std.c.AF)
  * [AI](https://ziglang.org/documentation/master/std/#std.c.AI)
  * [ARCH](https://ziglang.org/documentation/master/std/#std.c.ARCH)
  * [AT](https://ziglang.org/documentation/master/std/#std.c.AT)
  * [CLOCK](https://ziglang.org/documentation/master/std/#std.c.clockid_t)
  * [COPYFILE](https://ziglang.org/documentation/master/std/#std.c.darwin.COPYFILE)
  * [CPUFAMILY](https://ziglang.org/documentation/master/std/#std.c.darwin.CPUFAMILY)
  * [CPU_COUNT](https://ziglang.org/documentation/master/std/#std.c.CPU_COUNT)
  * [CSIZE](https://ziglang.org/documentation/master/std/#std.c.CSIZE)
  * [CTL](https://ziglang.org/documentation/master/std/#std.c.CTL)
  * [DB_RECORDTYPE](https://ziglang.org/documentation/master/std/#std.c.darwin.DB_RECORDTYPE)
  * [DIR](https://ziglang.org/documentation/master/std/#std.c.DIR)
  * [DT](https://ziglang.org/documentation/master/std/#std.c.DT)
  * [DirEnt](https://ziglang.org/documentation/master/std/#std.c.haiku.DirEnt)
  * [E](https://ziglang.org/documentation/master/std/#std.c.E)
  * [EAI](https://ziglang.org/documentation/master/std/#std.c.EAI)
  * [EV](https://ziglang.org/documentation/master/std/#std.c.EV)
  * [EVFILT](https://ziglang.org/documentation/master/std/#std.c.EVFILT)
  * [EXC](https://ziglang.org/documentation/master/std/#std.c.darwin.EXC)
  * [EXCEPTION](https://ziglang.org/documentation/master/std/#std.c.darwin.EXCEPTION)
  * [Elf_Symndx](https://ziglang.org/documentation/master/std/#std.c.Elf_Symndx)
  * [F](https://ziglang.org/documentation/master/std/#std.c.F)
  * [FILE](https://ziglang.org/documentation/master/std/#std.c.FILE)
  * [FUTEX](https://ziglang.org/documentation/master/std/#std.c.FUTEX)
  * [Flock](https://ziglang.org/documentation/master/std/#std.c.Flock)
  * [IFNAMESIZE](https://ziglang.org/documentation/master/std/#std.c.IFNAMESIZE)
  * [IOCPARM_MASK](https://ziglang.org/documentation/master/std/#std.c.IOCPARM_MASK)
  * [IPPROTO](https://ziglang.org/documentation/master/std/#std.c.IPPROTO)
  * [KERN](https://ziglang.org/documentation/master/std/#std.c.KERN)
  * [Kevent](https://ziglang.org/documentation/master/std/#std.c.Kevent)
  * [LC](https://ziglang.org/documentation/master/std/#std.c.LC)
  * [MACH_MSG_TYPE](https://ziglang.org/documentation/master/std/#std.c.darwin.MACH_MSG_TYPE)
  * [MACH_PORT_RIGHT](https://ziglang.org/documentation/master/std/#std.c.darwin.MACH_PORT_RIGHT)
  * [MADV](https://ziglang.org/documentation/master/std/#std.c.MADV)
  * [MAP](https://ziglang.org/documentation/master/std/#std.c.MAP)
  * [MREMAP](https://ziglang.org/documentation/master/std/#std.c.MREMAP)
  * [MSF](https://ziglang.org/documentation/master/std/#std.c.MSF)
  * [MSG](https://ziglang.org/documentation/master/std/#std.c.MSG)
  * [NCCS](https://ziglang.org/documentation/master/std/#std.c.NCCS)
  * [NI](https://ziglang.org/documentation/master/std/#std.c.NI)
  * [NOTE](https://ziglang.org/documentation/master/std/#std.c.NOTE)
  * [O](https://ziglang.org/documentation/master/std/#std.c.O)
  * [PERF_EVENT](https://ziglang.org/documentation/master/std/#std.c.serenity.PERF_EVENT)
  * [PF](https://ziglang.org/documentation/master/std/#std.c.PF)
  * [POLL](https://ziglang.org/documentation/master/std/#std.c.POLL)
  * [PR](https://ziglang.org/documentation/master/std/#std.c.PR)
  * [PROT](https://ziglang.org/documentation/master/std/#std.c.PROT)
  * [REG](https://ziglang.org/documentation/master/std/#std.c.REG)
  * [RLIM](https://ziglang.org/documentation/master/std/#std.c.RLIM)
  * [RTLD](https://ziglang.org/documentation/master/std/#std.c.RTLD)
  * [S](https://ziglang.org/documentation/master/std/#std.c.S)
  * [SA](https://ziglang.org/documentation/master/std/#std.c.SA)
  * [SC](https://ziglang.org/documentation/master/std/#std.c.SC)
  * [SEEK](https://ziglang.org/documentation/master/std/#std.c.SEEK)
  * [SHUT](https://ziglang.org/documentation/master/std/#std.c.SHUT)
  * [SIG](https://ziglang.org/documentation/master/std/#std.c.SIG)
  * [SIOCGIFINDEX](https://ziglang.org/documentation/master/std/#std.c.SIOCGIFINDEX)
  * [SO](https://ziglang.org/documentation/master/std/#std.c.SO)
  * [SOCK](https://ziglang.org/documentation/master/std/#std.c.SOCK)
  * [SOL](https://ziglang.org/documentation/master/std/#std.c.SOL)
  * [SOMAXCONN](https://ziglang.org/documentation/master/std/#std.c.SOMAXCONN)
  * [SS](https://ziglang.org/documentation/master/std/#std.c.SS)
  * [SYS](https://ziglang.org/documentation/master/std/#std.c.SYS)
  * [Sigaction](https://ziglang.org/documentation/master/std/#std.c.Sigaction)
  * [Stat](https://ziglang.org/documentation/master/std/#std.c.Stat)
  * [T](https://ziglang.org/documentation/master/std/#std.c.T)
  * [TCFLUSH](https://ziglang.org/documentation/master/std/#std.c.openbsd.TCFLUSH)
  * [TCIO](https://ziglang.org/documentation/master/std/#std.c.openbsd.TCIO)
  * [TCP](https://ziglang.org/documentation/master/std/#std.c.TCP)
  * [TCSA](https://ziglang.org/documentation/master/std/#std.posix.TCSA)
  * [TFD](https://ziglang.org/documentation/master/std/#std.c.TFD)
  * [TIMERFD_CLOCK](https://ziglang.org/documentation/master/std/#std.c.timerfd_clockid_t)
  * [UL](https://ziglang.org/documentation/master/std/#std.c.darwin.UL)
  * [UMTX_OP](https://ziglang.org/documentation/master/std/#std.c.freebsd.UMTX_OP)
  * [V](https://ziglang.org/documentation/master/std/#std.c.V)
  * [VDSO](https://ziglang.org/documentation/master/std/#std.c.VDSO)
  * [W](https://ziglang.org/documentation/master/std/#std.c.W)
  * [_SC](https://ziglang.org/documentation/master/std/#std.c._SC)
  * [_ksiginfo](https://ziglang.org/documentation/master/std/#std.c.netbsd._ksiginfo)
  * [_umtx_time](https://ziglang.org/documentation/master/std/#std.c.freebsd._umtx_time)
  * [addrinfo](https://ziglang.org/documentation/master/std/#std.c.addrinfo)
  * [area_id](https://ziglang.org/documentation/master/std/#std.c.haiku.area_id)
  * [area_info](https://ziglang.org/documentation/master/std/#std.c.haiku.area_info)
  * [auth_item_t](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_item_t)
  * [auth_session_t](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)
  * [blkcnt_t](https://ziglang.org/documentation/master/std/#std.c.blkcnt_t)
  * [blksize_t](https://ziglang.org/documentation/master/std/#std.c.blksize_t)
  * [caddr_t](https://ziglang.org/documentation/master/std/#std.c.darwin.caddr_t)
  * [cap_rights](https://ziglang.org/documentation/master/std/#std.c.freebsd.cap_rights)
  * [cc_t](https://ziglang.org/documentation/master/std/#std.c.cc_t)
  * [clock_t](https://ziglang.org/documentation/master/std/#std.c.clock_t)
  * [clockid_t](https://ziglang.org/documentation/master/std/#std.c.clockid_t)
  * [cmsghdr](https://ziglang.org/documentation/master/std/#std.c.solaris.cmsghdr)
  * [cpu_set_t](https://ziglang.org/documentation/master/std/#std.c.cpu_set_t)
  * [ctid_t](https://ziglang.org/documentation/master/std/#std.c.solaris.id_t)
  * [dev_t](https://ziglang.org/documentation/master/std/#std.c.dev_t)
  * [directory_which](https://ziglang.org/documentation/master/std/#std.c.haiku.directory_which)
  * [dirent](https://ziglang.org/documentation/master/std/#std.c.dirent)
  * [dirent64](https://ziglang.org/documentation/master/std/#std.c.dirent64)
  * [dl_iterate_phdr_callback](https://ziglang.org/documentation/master/std/#std.c.dl_iterate_phdr_callback)
  * [dl_phdr_info](https://ziglang.org/documentation/master/std/#std.c.dl_phdr_info)
  * [epoll_event](https://ziglang.org/documentation/master/std/#std.c.epoll_event)
  * [exception_behavior_array_t](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_behavior_array_t)
  * [exception_behavior_t](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_behavior_t)
  * [exception_data_t](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_data_t)
  * [exception_data_type_t](https://ziglang.org/documentation/master/std/#std.c.darwin.integer_t)
  * [exception_flavor_array_t](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_flavor_array_t)
  * [exception_handler_array_t](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_handler_array_t)
  * [exception_handler_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [exception_mask_array_t](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_mask_array_t)
  * [exception_mask_t](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_mask_t)
  * [exception_port_array_t](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_handler_array_t)
  * [exception_port_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [fd_t](https://ziglang.org/documentation/master/std/#std.c.fd_t)
  * [fflags_t](https://ziglang.org/documentation/master/std/#std.c.freebsd.fflags_t)
  * [file_obj](https://ziglang.org/documentation/master/std/#std.c.solaris.file_obj)
  * [fpregset_t](https://ziglang.org/documentation/master/std/#std.c.solaris.fpregset_t)
  * [fsblkcnt_t](https://ziglang.org/documentation/master/std/#std.c.freebsd.fsblkcnt_t)
  * [fsfilcnt_t](https://ziglang.org/documentation/master/std/#std.c.freebsd.fsfilcnt_t)
  * [gid_t](https://ziglang.org/documentation/master/std/#std.c.gid_t)
  * [host_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [id_t](https://ziglang.org/documentation/master/std/#std.c.solaris.id_t)
  * [ifreq](https://ziglang.org/documentation/master/std/#std.c.ifreq)
  * [image_info](https://ziglang.org/documentation/master/std/#std.c.haiku.image_info)
  * [in_port_t](https://ziglang.org/documentation/master/std/#std.c.in_port_t)
  * [ino_t](https://ziglang.org/documentation/master/std/#std.c.ino_t)
  * [iovec](https://ziglang.org/documentation/master/std/#std.posix.iovec)
  * [iovec_const](https://ziglang.org/documentation/master/std/#std.posix.iovec_const)
  * [ipc_space_port_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [ipc_space_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [itimerspec](https://ziglang.org/documentation/master/std/#std.c.itimerspec)
  * [kern_return_t](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)
  * [kevent64_s](https://ziglang.org/documentation/master/std/#std.c.darwin.kevent64_s)
  * [kinfo_file](https://ziglang.org/documentation/master/std/#std.c.freebsd.kinfo_file)
  * [lif_ifinfo_req](https://ziglang.org/documentation/master/std/#std.c.solaris.lif_ifinfo_req)
  * [lif_nd_req](https://ziglang.org/documentation/master/std/#std.c.solaris.lif_nd_req)
  * [lifreq](https://ziglang.org/documentation/master/std/#std.c.solaris.lifreq)
  * [login_cap_t](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t)
  * [lwpid_t](https://ziglang.org/documentation/master/std/#std.c.netbsd.lwpid_t)
  * [mach_exception_data_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_exception_data_t)
  * [mach_exception_data_type_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_exception_data_type_t)
  * [mach_msg_bits_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_msg_bits_t)
  * [mach_msg_id_t](https://ziglang.org/documentation/master/std/#std.c.darwin.integer_t)
  * [mach_msg_option_t](https://ziglang.org/documentation/master/std/#std.c.darwin.integer_t)
  * [mach_msg_size_t](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)
  * [mach_msg_timeout_t](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)
  * [mach_msg_type_name_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_msg_type_name_t)
  * [mach_msg_type_number_t](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)
  * [mach_port_array_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_array_t)
  * [mach_port_name_t](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)
  * [mach_port_right_t](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)
  * [mach_port_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [mach_task_basic_info](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_task_basic_info)
  * [mach_timebase_info_data](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_timebase_info_data)
  * [mach_vm_address_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_address_t)
  * [mach_vm_size_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t)
  * [major_t](https://ziglang.org/documentation/master/std/#std.c.solaris.major_t)
  * [max_align_t](https://ziglang.org/documentation/master/std/#std.c.max_align_t)
  * [mcontext_t](https://ziglang.org/documentation/master/std/#std.c.mcontext_t)
  * [memory_object_offset_t](https://ziglang.org/documentation/master/std/#std.c.darwin.memory_object_offset_t)
  * [minor_t](https://ziglang.org/documentation/master/std/#std.c.solaris.minor_t)
  * [mode_t](https://ziglang.org/documentation/master/std/#std.c.mode_t)
  * [msghdr](https://ziglang.org/documentation/master/std/#std.c.msghdr)
  * [msghdr_const](https://ziglang.org/documentation/master/std/#std.c.msghdr_const)
  * [natural_t](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)
  * [nfds_t](https://ziglang.org/documentation/master/std/#std.c.nfds_t)
  * [nlink_t](https://ziglang.org/documentation/master/std/#std.c.nlink_t)
  * [off_t](https://ziglang.org/documentation/master/std/#std.c.off_t)
  * [os_unfair_lock](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock)
  * [padded_pthread_spin_t](https://ziglang.org/documentation/master/std/#std.c.padded_pthread_spin_t)
  * [passwd](https://ziglang.org/documentation/master/std/#std.c.passwd)
  * [perf_event_attr](https://ziglang.org/documentation/master/std/#std.c.perf_event_attr)
  * [pid_t](https://ziglang.org/documentation/master/std/#std.c.pid_t)
  * [policy_t](https://ziglang.org/documentation/master/std/#std.c.darwin.policy_t)
  * [pollfd](https://ziglang.org/documentation/master/std/#std.c.pollfd)
  * [poolid_t](https://ziglang.org/documentation/master/std/#std.c.solaris.id_t)
  * [port_event](https://ziglang.org/documentation/master/std/#std.c.port_event)
  * [port_id](https://ziglang.org/documentation/master/std/#std.c.haiku.port_id)
  * [port_notify](https://ziglang.org/documentation/master/std/#std.c.solaris.port_notify)
  * [port_t](https://ziglang.org/documentation/master/std/#std.c.port_t)
  * [posix_spawn_file_actions_t](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t)
  * [posix_spawnattr_t](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_t)
  * [priority](https://ziglang.org/documentation/master/std/#std.c.solaris.priority)
  * [projid_t](https://ziglang.org/documentation/master/std/#std.c.solaris.id_t)
  * [pthread_attr_t](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t)
  * [pthread_cond_t](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_t)
  * [pthread_key_t](https://ziglang.org/documentation/master/std/#std.c.pthread_key_t)
  * [pthread_mutex_t](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_t)
  * [pthread_rwlock_t](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_t)
  * [pthread_spin_t](https://ziglang.org/documentation/master/std/#std.c.pthread_spin_t)
  * [pthread_spinlock_t](https://ziglang.org/documentation/master/std/#std.c.openbsd.pthread_spinlock_t)
  * [pthread_t](https://ziglang.org/documentation/master/std/#std.c.pthread_t)
  * [rlim_t](https://ziglang.org/documentation/master/std/#std.c.rlim_t)
  * [rlimit](https://ziglang.org/documentation/master/std/#std.c.rlimit)
  * [rlimit_resource](https://ziglang.org/documentation/master/std/#std.c.rlimit_resource)
  * [rusage](https://ziglang.org/documentation/master/std/#std.c.rusage)
  * [sa_family_t](https://ziglang.org/documentation/master/std/#std.c.sa_family_t)
  * [sem_id](https://ziglang.org/documentation/master/std/#std.c.haiku.sem_id)
  * [sem_t](https://ziglang.org/documentation/master/std/#std.c.sem_t)
  * [sf_hdtr](https://ziglang.org/documentation/master/std/#std.c.sf_hdtr)
  * [sig_atomic_t](https://ziglang.org/documentation/master/std/#std.c.sig_atomic_t)
  * [siginfo_t](https://ziglang.org/documentation/master/std/#std.c.siginfo_t)
  * [signalfd_siginfo](https://ziglang.org/documentation/master/std/#std.c.solaris.signalfd_siginfo)
  * [sigset_t](https://ziglang.org/documentation/master/std/#std.c.sigset_t)
  * [sigval](https://ziglang.org/documentation/master/std/#std.c.sigval)
  * [sigval_t](https://ziglang.org/documentation/master/std/#std.c.sigval_t)
  * [sockaddr](https://ziglang.org/documentation/master/std/#std.c.sockaddr)
  * [socklen_t](https://ziglang.org/documentation/master/std/#std.c.socklen_t)
  * [speed_t](https://ziglang.org/documentation/master/std/#std.c.speed_t)
  * [stack_t](https://ziglang.org/documentation/master/std/#std.c.stack_t)
  * [status_t](https://ziglang.org/documentation/master/std/#std.c.haiku.status_t)
  * [suseconds_t](https://ziglang.org/documentation/master/std/#std.c.suseconds_t)
  * [system_info](https://ziglang.org/documentation/master/std/#std.c.haiku.system_info)
  * [task_info_t](https://ziglang.org/documentation/master/std/#std.c.darwin.task_info_t)
  * [task_policy_flavor_t](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)
  * [task_policy_t](https://ziglang.org/documentation/master/std/#std.c.darwin.task_policy_t)
  * [task_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [task_vm_info_data_t](https://ziglang.org/documentation/master/std/#std.c.darwin.task_vm_info)
  * [taskid_t](https://ziglang.org/documentation/master/std/#std.c.solaris.id_t)
  * [tc_cflag_t](https://ziglang.org/documentation/master/std/#std.c.tc_cflag_t)
  * [tc_iflag_t](https://ziglang.org/documentation/master/std/#std.c.tc_iflag_t)
  * [tc_lflag_t](https://ziglang.org/documentation/master/std/#std.c.tc_lflag_t)
  * [tc_oflag_t](https://ziglang.org/documentation/master/std/#std.c.tc_oflag_t)
  * [team_id](https://ziglang.org/documentation/master/std/#std.c.haiku.team_id)
  * [team_info](https://ziglang.org/documentation/master/std/#std.c.haiku.team_info)
  * [termios](https://ziglang.org/documentation/master/std/#std.c.termios)
  * [thread_act_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [thread_basic_info](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_basic_info)
  * [thread_flavor_t](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)
  * [thread_id](https://ziglang.org/documentation/master/std/#std.c.haiku.thread_id)
  * [thread_identifier_info](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_identifier_info)
  * [thread_info_t](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_info_t)
  * [thread_port_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [thread_state_flavor_t](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_state_flavor_t)
  * [thread_state_t](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_state_t)
  * [thread_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [time_t](https://ziglang.org/documentation/master/std/#std.c.time_t)
  * [time_value_t](https://ziglang.org/documentation/master/std/#std.c.darwin.time_value)
  * [timerfd_clockid_t](https://ziglang.org/documentation/master/std/#std.c.timerfd_clockid_t)
  * [timespec](https://ziglang.org/documentation/master/std/#std.c.timespec)
  * [timeval](https://ziglang.org/documentation/master/std/#std.c.timeval)
  * [timezone](https://ziglang.org/documentation/master/std/#std.c.timezone)
  * [ucontext_t](https://ziglang.org/documentation/master/std/#std.c.ucontext_t)
  * [uid_t](https://ziglang.org/documentation/master/std/#std.c.uid_t)
  * [user_desc](https://ziglang.org/documentation/master/std/#std.c.user_desc)
  * [utsname](https://ziglang.org/documentation/master/std/#std.c.utsname)
  * [vm32_object_id_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm32_object_id_t)
  * [vm_behavior_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_behavior_t)
  * [vm_inherit_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_inherit_t)
  * [vm_machine_attribute_val_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_machine_attribute_val_t)
  * [vm_map_read_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [vm_map_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)
  * [vm_object_id_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_object_id_t)
  * [vm_offset_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_offset_t)
  * [vm_prot_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_prot_t)
  * [vm_region_basic_info_64](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_basic_info_64)
  * [vm_region_extended_info](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_extended_info)
  * [vm_region_flavor_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_flavor_t)
  * [vm_region_info_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_info_t)
  * [vm_region_recurse_info_t](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_recurse_info_t)
  * [vm_region_submap_info_64](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_submap_info_64)
  * [vm_region_submap_short_info_64](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_submap_short_info_64)
  * [vm_region_top_info](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_top_info)
  * [vm_size_t](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t)
  * [whence_t](https://ziglang.org/documentation/master/std/#std.c.whence_t)
  * [winsize](https://ziglang.org/documentation/master/std/#std.posix.winsize)
  * [zoneid_t](https://ziglang.org/documentation/master/std/#std.c.solaris.id_t)


## Namespaces
  * [AF_SUN](https://ziglang.org/documentation/master/std/#std.c.solaris.AF_SUN)
  * [AT_SUN](https://ziglang.org/documentation/master/std/#std.c.solaris.AT_SUN)
  * [AUTH](https://ziglang.org/documentation/master/std/#std.c.openbsd.AUTH)
  * [BI](https://ziglang.org/documentation/master/std/#std.c.openbsd.BI)
  * [FILE_EVENT](https://ziglang.org/documentation/master/std/#std.c.solaris.FILE_EVENT)
  * [HW](https://ziglang.org/documentation/master/std/#std.c.openbsd.HW)
  * [LOCK](https://ziglang.org/documentation/master/std/#std.posix.LOCK)
  * [MATTR](https://ziglang.org/documentation/master/std/#std.c.darwin.MATTR)
  * [MFD](https://ziglang.org/documentation/master/std/#std.c.freebsd.MFD)
  * [PORT_ALERT](https://ziglang.org/documentation/master/std/#std.c.solaris.PORT_ALERT)
  * [PORT_SOURCE](https://ziglang.org/documentation/master/std/#std.c.solaris.PORT_SOURCE)
  * [POSIX_FADV](https://ziglang.org/documentation/master/std/#std.c.solaris.POSIX_FADV)
  * [POSIX_SPAWN](https://ziglang.org/documentation/master/std/#std.c.darwin.POSIX_SPAWN)
  * [SCM](https://ziglang.org/documentation/master/std/#std.c.solaris.SCM)
  * [SFD](https://ziglang.org/documentation/master/std/#std.c.solaris.SFD)
  * [VM](https://ziglang.org/documentation/master/std/#std.c.darwin.VM)
  * [procfs](https://ziglang.org/documentation/master/std/#std.c.solaris.procfs)


## Global Variables
[_mh_execute_header](https://ziglang.org/documentation/master/std/#std.c._mh_execute_header)| `mach_hdr[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_hdr)`| The value of the link editor defined symbol _MH_EXECUTE_SYM is the address of the mach header in a Mach-O executable file type. It does not appear in any file type other than a MH_EXECUTE file type. The type of the symbol is absolute as the header is not part of any section. This symbol is populated when linking the system's libc, which is guaranteed on this operating system. However when building object files or libraries, the system libc won't be linked until the final executable. So we export a weak symbol here, to be overridden by the real one.  
---|---|---  
[environ](https://ziglang.org/documentation/master/std/#std.c.environ)| `[*:null]?[*:0]u8`|   
## Values
[CAP_RIGHTS_VERSION](https://ziglang.org/documentation/master/std/#std.c.freebsd.CAP_RIGHTS_VERSION)| |   
---|---|---  
[FD_CLOEXEC](https://ziglang.org/documentation/master/std/#std.c.FD_CLOEXEC)| |   
[F_OK](https://ziglang.org/documentation/master/std/#std.c.F_OK)| | Test for existence of file.  
[GETCONTEXT](https://ziglang.org/documentation/master/std/#std.c.solaris.GETCONTEXT)| |   
[GETUSTACK](https://ziglang.org/documentation/master/std/#std.c.solaris.GETUSTACK)| |   
[HOST_NAME_MAX](https://ziglang.org/documentation/master/std/#std.c.HOST_NAME_MAX)| |   
[IOV_MAX](https://ziglang.org/documentation/master/std/#std.c.IOV_MAX)| |   
[KINFO_FILE_SIZE](https://ziglang.org/documentation/master/std/#std.c.freebsd.KINFO_FILE_SIZE)| |   
[MACH_TASK_BASIC_INFO](https://ziglang.org/documentation/master/std/#std.c.darwin.MACH_TASK_BASIC_INFO)| |   
[MACH_TASK_BASIC_INFO_COUNT](https://ziglang.org/documentation/master/std/#std.c.darwin.MACH_TASK_BASIC_INFO_COUNT)| `mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)`|   
[MAP_FAILED](https://ziglang.org/documentation/master/std/#std.c.MAP_FAILED)| `*anyopaque`| Used by libc to communicate failure. Not actually part of the underlying syscall.  
[MAXNAMLEN](https://ziglang.org/documentation/master/std/#std.c.MAXNAMLEN)| |   
[MINSIGSTKSZ](https://ziglang.org/documentation/master/std/#std.c.MINSIGSTKSZ)| |   
[NAME_MAX](https://ziglang.org/documentation/master/std/#std.c.NAME_MAX)| |   
[NSIG](https://ziglang.org/documentation/master/std/#std.c.NSIG)| | maximum signal number + 1  
[OPEN_MAX](https://ziglang.org/documentation/master/std/#std.c.darwin.OPEN_MAX)| | Max open files per process <https://opensource.apple.com/source/xnu/xnu-4903.221.2/bsd/sys/syslimits.h.auto.html>  
[PATH_MAX](https://ziglang.org/documentation/master/std/#std.c.PATH_MAX)| |   
[PTHREAD_COND_INITIALIZER](https://ziglang.org/documentation/master/std/#std.c.PTHREAD_COND_INITIALIZER)| |   
[PTHREAD_MUTEX_INITIALIZER](https://ziglang.org/documentation/master/std/#std.c.PTHREAD_MUTEX_INITIALIZER)| |   
[PTHREAD_STACK_MIN](https://ziglang.org/documentation/master/std/#std.c.openbsd.PTHREAD_STACK_MIN)| |   
[R_OK](https://ziglang.org/documentation/master/std/#std.c.R_OK)| | Test for read permission.  
[SETCONTEXT](https://ziglang.org/documentation/master/std/#std.c.solaris.SETCONTEXT)| |   
[SETUSTACK](https://ziglang.org/documentation/master/std/#std.c.solaris.GETUSTACK)| |   
[SIGSTKSZ](https://ziglang.org/documentation/master/std/#std.c.SIGSTKSZ)| |   
[STDERR_FILENO](https://ziglang.org/documentation/master/std/#std.c.STDERR_FILENO)| |   
[STDIN_FILENO](https://ziglang.org/documentation/master/std/#std.c.STDIN_FILENO)| |   
[STDOUT_FILENO](https://ziglang.org/documentation/master/std/#std.c.STDOUT_FILENO)| |   
[TASK_NULL](https://ziglang.org/documentation/master/std/#std.c.darwin.TASK_NULL)| `task_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)`|   
[TASK_VM_INFO](https://ziglang.org/documentation/master/std/#std.c.darwin.TASK_VM_INFO)| |   
[TASK_VM_INFO_COUNT](https://ziglang.org/documentation/master/std/#std.c.darwin.TASK_VM_INFO_COUNT)| `mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)`|   
[THREAD_BASIC_INFO](https://ziglang.org/documentation/master/std/#std.c.darwin.THREAD_BASIC_INFO)| |   
[THREAD_BASIC_INFO_COUNT](https://ziglang.org/documentation/master/std/#std.c.darwin.THREAD_BASIC_INFO_COUNT)| `mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)`|   
[THREAD_IDENTIFIER_INFO_COUNT](https://ziglang.org/documentation/master/std/#std.c.darwin.THREAD_IDENTIFIER_INFO_COUNT)| `mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)`|   
[THREAD_NULL](https://ziglang.org/documentation/master/std/#std.c.darwin.THREAD_NULL)| `thread_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_port_t)`|   
[THREAD_STATE_NONE](https://ziglang.org/documentation/master/std/#std.c.darwin.THREAD_STATE_NONE)| |   
[UMTX_ABSTIME](https://ziglang.org/documentation/master/std/#std.c.freebsd.UMTX_ABSTIME)| |   
[W_OK](https://ziglang.org/documentation/master/std/#std.c.W_OK)| | Test for write permission.  
[X_OK](https://ziglang.org/documentation/master/std/#std.c.X_OK)| | Test for execute or search permission.  
[_errno](https://ziglang.org/documentation/master/std/#std.c._errno)| |   
[_kern_get_current_team](https://ziglang.org/documentation/master/std/#std.c._kern_get_current_team)| |   
[_kern_open_dir](https://ziglang.org/documentation/master/std/#std.c._kern_open_dir)| |   
[_kern_read_dir](https://ziglang.org/documentation/master/std/#std.c._kern_read_dir)| |   
[_kern_read_stat](https://ziglang.org/documentation/master/std/#std.c._kern_read_stat)| |   
[_kern_rewind_dir](https://ziglang.org/documentation/master/std/#std.c._kern_rewind_dir)| |   
[_msize](https://ziglang.org/documentation/master/std/#std.c._msize)| |   
[arc4random_buf](https://ziglang.org/documentation/master/std/#std.c.arc4random_buf)| |   
[clock_getres](https://ziglang.org/documentation/master/std/#std.c.clock_getres)| |   
[clock_gettime](https://ziglang.org/documentation/master/std/#std.c.clock_gettime)| |   
[close](https://ziglang.org/documentation/master/std/#std.c.close)| |   
[copy_file_range](https://ziglang.org/documentation/master/std/#std.c.copy_file_range)| |   
[flock](https://ziglang.org/documentation/master/std/#std.c.flock)| |   
[fork](https://ziglang.org/documentation/master/std/#std.c.fork)| |   
[fstat](https://ziglang.org/documentation/master/std/#std.c.fstat)| |   
[fstatat](https://ziglang.org/documentation/master/std/#std.c.fstatat)| |   
[futex](https://ziglang.org/documentation/master/std/#std.c.futex)| |   
[getcontext](https://ziglang.org/documentation/master/std/#std.c.getcontext)| |   
[getdents](https://ziglang.org/documentation/master/std/#std.c.getdents)| |   
[getdirentries](https://ziglang.org/documentation/master/std/#std.c.getdirentries)| |   
[getentropy](https://ziglang.org/documentation/master/std/#std.c.getentropy)| |   
[getrandom](https://ziglang.org/documentation/master/std/#std.c.getrandom)| |   
[getrusage](https://ziglang.org/documentation/master/std/#std.c.getrusage)| |   
[gettimeofday](https://ziglang.org/documentation/master/std/#std.c.gettimeofday)| |   
[mach_hdr](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_hdr)| |   
[malloc_size](https://ziglang.org/documentation/master/std/#std.c.malloc_size)| |   
[malloc_usable_size](https://ziglang.org/documentation/master/std/#std.c.malloc_usable_size)| |   
[msync](https://ziglang.org/documentation/master/std/#std.c.msync)| |   
[nanosleep](https://ziglang.org/documentation/master/std/#std.c.nanosleep)| |   
[pipe2](https://ziglang.org/documentation/master/std/#std.c.pipe2)| |   
[posix_memalign](https://ziglang.org/documentation/master/std/#std.c.posix_memalign)| |   
[pthread_setname_np](https://ziglang.org/documentation/master/std/#std.c.pthread_setname_np)| |   
[pthread_threadid_np](https://ziglang.org/documentation/master/std/#std.c.pthread_threadid_np)| |   
[readdir](https://ziglang.org/documentation/master/std/#std.c.readdir)| |   
[realpath](https://ziglang.org/documentation/master/std/#std.c.realpath)| |   
[sched_yield](https://ziglang.org/documentation/master/std/#std.c.sched_yield)| |   
[sendfile](https://ziglang.org/documentation/master/std/#std.c.sendfile)| |   
[sigaction](https://ziglang.org/documentation/master/std/#std.c.sigaction)| |   
[sigaltstack](https://ziglang.org/documentation/master/std/#std.c.sigaltstack)| |   
[sigfillset](https://ziglang.org/documentation/master/std/#std.c.sigfillset)| |   
[sigprocmask](https://ziglang.org/documentation/master/std/#std.c.sigprocmask)| |   
[socket](https://ziglang.org/documentation/master/std/#std.c.socket)| |   
[stat](https://ziglang.org/documentation/master/std/#std.c.stat)| |   
[sysconf](https://ziglang.org/documentation/master/std/#std.c.sysconf)| |   
## Functions `pub extern "c" fn @"close$NOCANCEL"[](https://ziglang.org/documentation/master/std/#std.c.darwin.@)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn NSVersionOfRunTimeLibrary[](https://ziglang.org/documentation/master/std/#std.c.darwin.NSVersionOfRunTimeLibrary)(library_name: [*:0]const u8) u32`
`pub extern "c" fn _NSGetExecutablePath[](https://ziglang.org/documentation/master/std/#std.c.darwin._NSGetExecutablePath)(buf: [*:0]u8, bufsize: *u32) c_int`
`pub extern "c" fn __getdirentries64[](https://ziglang.org/documentation/master/std/#std.c.darwin.__getdirentries64)(fd: c_int, buf_ptr: [*]u8, buf_len: usize, basep: *i64) isize`
`pub extern "c" fn __ulock_wait[](https://ziglang.org/documentation/master/std/#std.c.darwin.__ulock_wait)(op: UL[](https://ziglang.org/documentation/master/std/#std.c.darwin.UL), addr: ?*const anyopaque, val: u64, timeout_us: u32) c_int`
`pub extern "c" fn __ulock_wait2[](https://ziglang.org/documentation/master/std/#std.c.darwin.__ulock_wait2)(op: UL[](https://ziglang.org/documentation/master/std/#std.c.darwin.UL), addr: ?*const anyopaque, val: u64, timeout_ns: u64, val2: u64) c_int`
`pub extern "c" fn __ulock_wake[](https://ziglang.org/documentation/master/std/#std.c.darwin.__ulock_wake)(op: UL[](https://ziglang.org/documentation/master/std/#std.c.darwin.UL), addr: ?*const anyopaque, val: u64) c_int`
`pub extern "c" fn _dyld_get_image_header[](https://ziglang.org/documentation/master/std/#std.c.darwin._dyld_get_image_header)(image_index: u32) ?*mach_header[](https://ziglang.org/documentation/master/std/#std.macho.mach_header)`
`pub extern "c" fn _dyld_get_image_name[](https://ziglang.org/documentation/master/std/#std.c.darwin._dyld_get_image_name)(image_index: u32) [*:0]const u8`
`pub extern "c" fn _dyld_get_image_vmaddr_slide[](https://ziglang.org/documentation/master/std/#std.c.darwin._dyld_get_image_vmaddr_slide)(image_index: u32) usize`
`pub extern "c" fn _dyld_image_count[](https://ziglang.org/documentation/master/std/#std.c.darwin._dyld_image_count)() u32`
`pub extern "c" fn _exit[](https://ziglang.org/documentation/master/std/#std.c._exit)(code: c_int) noreturn`
`pub extern "root" fn _get_next_area_info[](https://ziglang.org/documentation/master/std/#std.c.haiku._get_next_area_info)(team: i32, cookie: *i64, area_info: *area_info[](https://ziglang.org/documentation/master/std/#std.c.haiku.area_info), size: usize) i32`
`pub extern "root" fn _get_next_image_info[](https://ziglang.org/documentation/master/std/#std.c.haiku._get_next_image_info)(team: i32, cookie: *i32, image_info: *image_info[](https://ziglang.org/documentation/master/std/#std.c.haiku.image_info), size: usize) i32`
`pub extern "root" fn _get_team_info[](https://ziglang.org/documentation/master/std/#std.c.haiku._get_team_info)(team: i32, team_info: *team_info[](https://ziglang.org/documentation/master/std/#std.c.haiku.team_info), size: usize) i32`
`pub extern "c" fn _host_page_size[](https://ziglang.org/documentation/master/std/#std.c.darwin._host_page_size)(task: mach_port_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), size: *vm_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn _lwp_self[](https://ziglang.org/documentation/master/std/#std.c.netbsd._lwp_self)() lwpid_t[](https://ziglang.org/documentation/master/std/#std.c.netbsd.lwpid_t)`
`pub extern "c" fn _umtx_op[](https://ziglang.org/documentation/master/std/#std.c.freebsd._umtx_op)(obj: usize, op: c_int, val: c_ulong, uaddr: usize, uaddr2: usize) c_int`
`pub extern "c" fn abort[](https://ziglang.org/documentation/master/std/#std.c.abort)() noreturn`
`pub extern "c" fn accept[](https://ziglang.org/documentation/master/std/#std.c.accept)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), noalias addr: ?*sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), noalias addrlen: ?*socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t)) c_int`
`pub extern "c" fn accept4[](https://ziglang.org/documentation/master/std/#std.c.accept4)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), noalias addr: ?*sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), noalias addrlen: ?*socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t), flags: c_uint) c_int`
`pub extern "c" fn access[](https://ziglang.org/documentation/master/std/#std.c.access)(path: [*:0]const u8, mode: c_uint) c_int`
`pub extern "c" fn alarm[](https://ziglang.org/documentation/master/std/#std.c.alarm)(seconds: c_uint) c_uint`
`pub extern "c" fn anon_create[](https://ziglang.org/documentation/master/std/#std.c.serenity.anon_create)(size: usize, options: O[](https://ziglang.org/documentation/master/std/#std.c.O)) c_int`
`pub extern "c" fn auth_approval[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_approval)(as: ?*auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), ?*login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t), name: ?[*:0]const u8, type: ?[*:0]const u8) c_int`
`pub extern "c" fn auth_call[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_call)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), path: [*:0]const u8, ...) c_int`
`pub extern "c" fn auth_cat[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_cat)(file: [*:0]const u8) c_int`
`pub extern "c" fn auth_challenge[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_challenge)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) [*:0]const u8`
`pub extern "c" fn auth_check_change[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_check_change)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) i64`
`pub extern "c" fn auth_check_expire[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_check_expire)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) i64`
`pub extern "c" fn auth_checknologin[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_checknologin)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t)) void`
`pub extern "c" fn auth_clean[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_clean)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) void`
`pub extern "c" fn auth_close[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_close)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) c_int`
`pub extern "c" fn auth_clrenv[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_clrenv)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) void`
`pub extern "c" fn auth_clroption[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_clroption)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), option: [*:0]const u8) void`
`pub extern "c" fn auth_clroptions[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_clroptions)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) void`
`pub extern "c" fn auth_getitem[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_getitem)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), item: auth_item_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_item_t)) ?[*:0]const u8`
`pub extern "c" fn auth_getpwd[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_getpwd)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) ?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)`
`pub extern "c" fn auth_getstate[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_getstate)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) c_int`
`pub extern "c" fn auth_getvalue[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_getvalue)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), what: [*:0]const u8) ?[*:0]const u8`
`pub extern "c" fn auth_mkvalue[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_mkvalue)(value: [*:0]const u8) ?[*:0]const u8`
`pub extern "c" fn auth_open[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_open)() ?*auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)`
`pub extern "c" fn auth_setdata[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_setdata)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), ptr: *anyopaque, len: usize) c_int`
`pub extern "c" fn auth_setenv[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_setenv)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)) void`
`pub extern "c" fn auth_setitem[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_setitem)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), item: auth_item_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_item_t), value: [*:0]const u8) c_int`
`pub extern "c" fn auth_setoption[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_setoption)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), n: [*:0]const u8, v: [*:0]const u8) c_int`
`pub extern "c" fn auth_setpwd[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_setpwd)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), pwd: *passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)) c_int`
`pub extern "c" fn auth_setstate[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_setstate)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), s: c_int) void`
`pub extern "c" fn auth_userchallenge[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_userchallenge)(name: [*:0]const u8, style: ?[*:0]const u8, arg_type: ?[*:0]const u8, chappengep: *?[*:0]const u8) ?*auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)`
`pub extern "c" fn auth_usercheck[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_usercheck)(name: [*:0]const u8, style: ?[*:0]const u8, arg_type: ?[*:0]const u8, password: ?[*:0]const u8) ?*auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)`
`pub extern "c" fn auth_userokay[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_userokay)(name: [*:0]const u8, style: ?[*:0]const u8, arg_type: ?[*:0]const u8, password: ?[*:0]const u8) c_int`
`pub extern "c" fn auth_userresponse[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_userresponse)(as: *auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), response: [*:0]const u8, more: c_int) c_int`
`pub extern "c" fn auth_verify[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_verify)(as: ?*auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t), style: ?[*:0]const u8, name: ?[*:0]const u8, ...) ?*auth_session_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.auth_session_t)`
`pub extern "c" fn bcrypt[](https://ziglang.org/documentation/master/std/#std.c.openbsd.bcrypt)(pass: [*:0]const u8, salt: [*:0]const u8) ?[*:0]const u8`
`pub extern "c" fn bcrypt_checkpass[](https://ziglang.org/documentation/master/std/#std.c.openbsd.bcrypt_checkpass)(pass: [*:0]const u8, goodhash: [*:0]const u8) c_int`
`pub extern "c" fn bcrypt_gensalt[](https://ziglang.org/documentation/master/std/#std.c.openbsd.bcrypt_gensalt)(log_rounds: u8) [*:0]const u8`
`pub extern "c" fn bcrypt_newhash[](https://ziglang.org/documentation/master/std/#std.c.openbsd.bcrypt_newhash)(pass: [*:0]const u8, log_rounds: c_int, hash: [*]u8, hashlen: usize) c_int`
`pub extern "c" fn bind[](https://ziglang.org/documentation/master/std/#std.c.bind)(socket: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), address: ?*const sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), address_len: socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t)) c_int`
`pub extern "c" fn calloc[](https://ziglang.org/documentation/master/std/#std.c.calloc)(usize, usize) ?*anyopaque`
`pub extern "c" fn chdir[](https://ziglang.org/documentation/master/std/#std.c.chdir)(path: [*:0]const u8) c_int`
`pub extern "c" fn chmod[](https://ziglang.org/documentation/master/std/#std.c.chmod)(path: [*:0]const u8, mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t)) c_int`
`pub extern "c" fn clock_get_time[](https://ziglang.org/documentation/master/std/#std.c.darwin.clock_get_time)(clock_serv: clock_serv_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), cur_time: *mach_timespec_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_timespec_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn closedir[](https://ziglang.org/documentation/master/std/#std.c.closedir)(dp: *DIR[](https://ziglang.org/documentation/master/std/#std.c.DIR)) c_int`
`pub extern "c" fn closelog[](https://ziglang.org/documentation/master/std/#std.c.closelog)() void`
`pub extern "c" fn connect[](https://ziglang.org/documentation/master/std/#std.c.connect)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), sock_addr: *const sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), addrlen: socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t)) c_int`
`pub extern "c" fn disown[](https://ziglang.org/documentation/master/std/#std.c.serenity.disown)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)) c_int`
`pub extern "c" fn dispatch_release[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_release)(object: *anyopaque) void`
`pub extern "c" fn dispatch_semaphore_create[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_semaphore_create)(value: isize) ?dispatch_semaphore_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_semaphore_t)`
`pub extern "c" fn dispatch_semaphore_signal[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_semaphore_signal)(dsema: dispatch_semaphore_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_semaphore_t)) isize`
`pub extern "c" fn dispatch_semaphore_wait[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_semaphore_wait)(dsema: dispatch_semaphore_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_semaphore_t), timeout: dispatch_time_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_time_t)) isize`
`pub extern "c" fn dispatch_time[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_time)(when: dispatch_time_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_time_t), delta: i64) dispatch_time_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.dispatch_time_t)`
`pub extern "c" fn dl_iterate_phdr[](https://ziglang.org/documentation/master/std/#std.c.dl_iterate_phdr)(callback: dl_iterate_phdr_callback[](https://ziglang.org/documentation/master/std/#std.c.dl_iterate_phdr_callback), data: ?*anyopaque) c_int`
`pub extern "c" fn dlclose[](https://ziglang.org/documentation/master/std/#std.c.dlclose)(handle: *anyopaque) c_int`
`pub extern "c" fn dlerror[](https://ziglang.org/documentation/master/std/#std.c.dlerror)() ?[*:0]u8`
`pub extern "c" fn dlopen[](https://ziglang.org/documentation/master/std/#std.c.dlopen)(path: ?[*:0]const u8, mode: RTLD[](https://ziglang.org/documentation/master/std/#std.c.RTLD)) ?*anyopaque`
`pub extern "c" fn dlsym[](https://ziglang.org/documentation/master/std/#std.c.dlsym)(handle: ?*anyopaque, symbol: [*:0]const u8) ?*anyopaque`
`pub extern "c" fn dn_expand[](https://ziglang.org/documentation/master/std/#std.c.dn_expand)( msg: [*:0]const u8, eomorig: [*:0]const u8, comp_dn: [*:0]const u8, exp_dn: [*:0]u8, length: c_int, ) c_int`
`pub extern "c" fn dup[](https://ziglang.org/documentation/master/std/#std.c.dup)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn dup2[](https://ziglang.org/documentation/master/std/#std.c.dup2)(old_fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), new_fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn dup3[](https://ziglang.org/documentation/master/std/#std.c.dup3)(old: c_int, new: c_int, flags: c_uint) c_int`
`pub extern "c" fn endpwent[](https://ziglang.org/documentation/master/std/#std.c.openbsd.endpwent)() void`
`pub extern "c" fn epoll_create1[](https://ziglang.org/documentation/master/std/#std.c.epoll_create1)(flags: c_uint) c_int`
`pub extern "c" fn epoll_ctl[](https://ziglang.org/documentation/master/std/#std.c.epoll_ctl)(epfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), op: c_uint, fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), event: ?*epoll_event[](https://ziglang.org/documentation/master/std/#std.c.epoll_event)) c_int`
`pub extern "c" fn epoll_pwait[](https://ziglang.org/documentation/master/std/#std.c.epoll_pwait)( epfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), events: [*]epoll_event[](https://ziglang.org/documentation/master/std/#std.c.epoll_event), maxevents: c_int, timeout: c_int, sigmask: *const sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t), ) c_int`
`pub extern "c" fn epoll_wait[](https://ziglang.org/documentation/master/std/#std.c.epoll_wait)(epfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), events: [*]epoll_event[](https://ziglang.org/documentation/master/std/#std.c.epoll_event), maxevents: c_uint, timeout: c_int) c_int`
`pub extern "c" fn eventfd[](https://ziglang.org/documentation/master/std/#std.c.eventfd)(initval: c_uint, flags: c_uint) c_int`
`pub extern "c" fn execve[](https://ziglang.org/documentation/master/std/#std.c.execve)(path: [*:0]const u8, argv: [*:null]const ?[*:0]const u8, envp: [*:null]const ?[*:0]const u8) c_int`
`pub extern "c" fn exit[](https://ziglang.org/documentation/master/std/#std.c.exit)(code: c_int) noreturn`
`pub extern "c" fn faccessat[](https://ziglang.org/documentation/master/std/#std.c.faccessat)(dirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), path: [*:0]const u8, mode: c_uint, flags: c_uint) c_int`
`pub extern "c" fn fallocate[](https://ziglang.org/documentation/master/std/#std.c.fallocate)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), mode: c_int, offset: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t), len: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) c_int`
`pub extern "c" fn fallocate64[](https://ziglang.org/documentation/master/std/#std.c.fallocate64)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), mode: c_int, offset: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t), len: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) c_int`
`pub extern "c" fn fchdir[](https://ziglang.org/documentation/master/std/#std.c.fchdir)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn fchmod[](https://ziglang.org/documentation/master/std/#std.c.fchmod)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t)) c_int`
`pub extern "c" fn fchmodat[](https://ziglang.org/documentation/master/std/#std.c.fchmodat)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), path: [*:0]const u8, mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t), flags: c_uint) c_int`
`pub extern "c" fn fchown[](https://ziglang.org/documentation/master/std/#std.c.fchown)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), owner: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t), group: gid_t[](https://ziglang.org/documentation/master/std/#std.c.gid_t)) c_int`
`pub extern "c" fn fclose[](https://ziglang.org/documentation/master/std/#std.c.fclose)(stream: *FILE[](https://ziglang.org/documentation/master/std/#std.c.FILE)) c_int`
`pub extern "c" fn fcntl[](https://ziglang.org/documentation/master/std/#std.c.fcntl)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), cmd: c_int, ...) c_int`
`pub extern "c" fn fcopyfile[](https://ziglang.org/documentation/master/std/#std.c.darwin.fcopyfile)(from: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), to: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), state: ?copyfile_state_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.copyfile_state_t), flags: COPYFILE[](https://ziglang.org/documentation/master/std/#std.c.darwin.COPYFILE)) c_int`
`pub extern "c" fn fdatasync[](https://ziglang.org/documentation/master/std/#std.c.fdatasync)(fd: c_int) c_int`
`pub extern "c" fn fdopendir[](https://ziglang.org/documentation/master/std/#std.c.fdopendir)(fd: c_int) ?*DIR[](https://ziglang.org/documentation/master/std/#std.c.DIR)`
`pub extern "root" fn find_directory[](https://ziglang.org/documentation/master/std/#std.c.haiku.find_directory)(which: directory_which[](https://ziglang.org/documentation/master/std/#std.c.haiku.directory_which), volume: i32, createIt: bool, path_ptr: [*]u8, length: i32) u64`
`pub extern "root" fn find_thread[](https://ziglang.org/documentation/master/std/#std.c.haiku.find_thread)(thread_name: ?*anyopaque) i32`
`pub extern "c" fn fmemopen[](https://ziglang.org/documentation/master/std/#std.c.fmemopen)(noalias buf: ?*anyopaque, size: usize, noalias mode: [*:0]const u8) ?*FILE[](https://ziglang.org/documentation/master/std/#std.c.FILE)`
`pub extern "c" fn fopen[](https://ziglang.org/documentation/master/std/#std.c.fopen)(noalias filename: [*:0]const u8, noalias modes: [*:0]const u8) ?*FILE[](https://ziglang.org/documentation/master/std/#std.c.FILE)`
`pub extern "c" fn fopen64[](https://ziglang.org/documentation/master/std/#std.c.fopen64)(noalias filename: [*:0]const u8, noalias modes: [*:0]const u8) ?*FILE[](https://ziglang.org/documentation/master/std/#std.c.FILE)`
`pub extern "c" fn fread[](https://ziglang.org/documentation/master/std/#std.c.fread)(noalias ptr: [*]u8, size_of_type: usize, item_count: usize, noalias stream: *FILE[](https://ziglang.org/documentation/master/std/#std.c.FILE)) usize`
`pub extern "c" fn free[](https://ziglang.org/documentation/master/std/#std.c.free)(?*anyopaque) void`
`pub extern "c" fn freeaddrinfo[](https://ziglang.org/documentation/master/std/#std.c.freeaddrinfo)(res: *addrinfo[](https://ziglang.org/documentation/master/std/#std.c.addrinfo)) void`
`pub extern "c" fn fstat64[](https://ziglang.org/documentation/master/std/#std.c.fstat64)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: *Stat[](https://ziglang.org/documentation/master/std/#std.c.Stat)) c_int`
`pub extern "c" fn fstatat64[](https://ziglang.org/documentation/master/std/#std.c.fstatat64)(dirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), noalias path: [*:0]const u8, noalias stat_buf: *Stat[](https://ziglang.org/documentation/master/std/#std.c.Stat), flags: u32) c_int`
`pub extern "c" fn fsync[](https://ziglang.org/documentation/master/std/#std.c.fsync)(fd: c_int) c_int`
`pub extern "c" fn ftruncate[](https://ziglang.org/documentation/master/std/#std.c.ftruncate)(fd: c_int, length: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) c_int`
`pub extern "c" fn ftruncate64[](https://ziglang.org/documentation/master/std/#std.c.ftruncate64)(fd: c_int, length: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) c_int`
`pub extern "c" fn futex_wait[](https://ziglang.org/documentation/master/std/#std.c.serenity.futex_wait)(userspace_address: *u32, value: u32, abstime: *const timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec), clockid: clockid_t[](https://ziglang.org/documentation/master/std/#std.c.clockid_t), process_shared: c_int) c_int`
`pub extern "c" fn futex_wake[](https://ziglang.org/documentation/master/std/#std.c.serenity.futex_wake)(userspace_address: *u32, count: u32, process_shared: c_int) c_int`
`pub extern "c" fn futimens[](https://ziglang.org/documentation/master/std/#std.c.futimens)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), times: ?*const [2]timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec)) c_int`
`pub extern "c" fn futimes[](https://ziglang.org/documentation/master/std/#std.c.futimes)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), times: ?*[2]timeval[](https://ziglang.org/documentation/master/std/#std.c.timeval)) c_int`
`pub extern "c" fn fwrite[](https://ziglang.org/documentation/master/std/#std.c.fwrite)(noalias ptr: [*]const u8, size_of_type: usize, item_count: usize, noalias stream: *FILE[](https://ziglang.org/documentation/master/std/#std.c.FILE)) usize`
`pub extern "c" fn gai_strerror[](https://ziglang.org/documentation/master/std/#std.c.gai_strerror)(errcode: EAI[](https://ziglang.org/documentation/master/std/#std.c.EAI)) [*:0]const u8`
`pub extern "c" fn get_stack_bounds[](https://ziglang.org/documentation/master/std/#std.c.serenity.get_stack_bounds)(user_stack_base: *usize, user_stack_size: *usize) c_int`
`pub extern "root" fn get_system_info[](https://ziglang.org/documentation/master/std/#std.c.haiku.get_system_info)(system_info: *system_info[](https://ziglang.org/documentation/master/std/#std.c.haiku.system_info)) usize`
`pub extern "c" fn getaddrinfo[](https://ziglang.org/documentation/master/std/#std.c.getaddrinfo)( noalias node: ?[*:0]const u8, noalias service: ?[*:0]const u8, noalias hints: ?*const addrinfo[](https://ziglang.org/documentation/master/std/#std.c.addrinfo), noalias res: *?*addrinfo[](https://ziglang.org/documentation/master/std/#std.c.addrinfo), ) EAI[](https://ziglang.org/documentation/master/std/#std.c.EAI)`
`pub extern "c" fn getauxval[](https://ziglang.org/documentation/master/std/#std.c.getauxval)(__type: c_ulong) c_ulong`
    
See std.elf for constants for this `pub extern "c" fn getcwd[](https://ziglang.org/documentation/master/std/#std.c.getcwd)(buf: [*]u8, size: usize) ?[*]u8`
`pub extern "c" fn getenv[](https://ziglang.org/documentation/master/std/#std.c.getenv)(name: [*:0]const u8) ?[*:0]u8`
`pub extern "c" fn geteuid[](https://ziglang.org/documentation/master/std/#std.c.geteuid)() uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)`
`pub extern "c" fn gethostname[](https://ziglang.org/documentation/master/std/#std.c.gethostname)(name: [*]u8, len: usize) c_int`
`pub extern "c" fn getkeymap[](https://ziglang.org/documentation/master/std/#std.c.serenity.getkeymap)(name_buffer: [*]u8, name_buffer_size: usize, map: [*]u32, shift_map: [*]u32, alt_map: [*]u32, altgr_map: [*]u32, shift_altgr_map: [*]u32) c_int`
`pub extern "c" fn getnameinfo[](https://ziglang.org/documentation/master/std/#std.c.getnameinfo)( noalias addr: *const sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), addrlen: socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t), noalias host: ?[*]u8, hostlen: socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t), noalias serv: ?[*]u8, servlen: socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t), flags: NI[](https://ziglang.org/documentation/master/std/#std.c.NI), ) EAI[](https://ziglang.org/documentation/master/std/#std.c.EAI)`
`pub extern "c" fn getpeername[](https://ziglang.org/documentation/master/std/#std.c.getpeername)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), noalias addr: *sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), noalias addrlen: *socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t)) c_int`
`pub extern "c" fn getpid[](https://ziglang.org/documentation/master/std/#std.c.getpid)() pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)`
`pub extern "c" fn getppid[](https://ziglang.org/documentation/master/std/#std.c.getppid)() pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)`
`pub extern "c" fn getpwent[](https://ziglang.org/documentation/master/std/#std.c.openbsd.getpwent)() ?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)`
`pub extern "c" fn getpwnam[](https://ziglang.org/documentation/master/std/#std.c.getpwnam)(name: [*:0]const u8) ?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)`
`pub extern "c" fn getpwnam_r[](https://ziglang.org/documentation/master/std/#std.c.openbsd.getpwnam_r)(name: [*:0]const u8, pw: *passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd), buf: [*]u8, buflen: usize, pwretp: *?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)) c_int`
`pub extern "c" fn getpwnam_shadow[](https://ziglang.org/documentation/master/std/#std.c.openbsd.getpwnam_shadow)(name: [*:0]const u8) ?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)`
`pub extern "c" fn getpwuid[](https://ziglang.org/documentation/master/std/#std.c.getpwuid)(uid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)) ?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)`
`pub extern "c" fn getpwuid_r[](https://ziglang.org/documentation/master/std/#std.c.openbsd.getpwuid_r)(uid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t), pw: *passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd), buf: [*]u8, buflen: usize, pwretp: *?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)) c_int`
`pub extern "c" fn getpwuid_shadow[](https://ziglang.org/documentation/master/std/#std.c.openbsd.getpwuid_shadow)(uid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)) ?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)`
`pub extern "c" fn getrlimit[](https://ziglang.org/documentation/master/std/#std.c.getrlimit)(resource: rlimit_resource[](https://ziglang.org/documentation/master/std/#std.c.rlimit_resource), rlim: *rlimit[](https://ziglang.org/documentation/master/std/#std.c.rlimit)) c_int`
`pub extern "c" fn getrlimit64[](https://ziglang.org/documentation/master/std/#std.c.getrlimit64)(resource: rlimit_resource[](https://ziglang.org/documentation/master/std/#std.c.rlimit_resource), rlim: *rlimit[](https://ziglang.org/documentation/master/std/#std.c.rlimit)) c_int`
`pub extern "c" fn getsockname[](https://ziglang.org/documentation/master/std/#std.c.getsockname)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), noalias addr: *sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), noalias addrlen: *socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t)) c_int`
`pub extern "c" fn getsockopt[](https://ziglang.org/documentation/master/std/#std.c.getsockopt)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), level: i32, optname: u32, noalias optval: ?*anyopaque, noalias optlen: *socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t)) c_int`
`pub extern "c" fn getthrid[](https://ziglang.org/documentation/master/std/#std.c.openbsd.getthrid)() pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)`
`pub extern "c" fn getuid[](https://ziglang.org/documentation/master/std/#std.c.getuid)() uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)`
`pub extern "c" fn if_nametoindex[](https://ziglang.org/documentation/master/std/#std.c.if_nametoindex)([*:0]const u8) c_int`
`pub extern "c" fn inotify_add_watch[](https://ziglang.org/documentation/master/std/#std.c.inotify_add_watch)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), pathname: [*:0]const u8, mask: u32) c_int`
`pub extern "c" fn inotify_init1[](https://ziglang.org/documentation/master/std/#std.c.inotify_init1)(flags: c_uint) c_int`
`pub extern "c" fn inotify_rm_watch[](https://ziglang.org/documentation/master/std/#std.c.inotify_rm_watch)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), wd: c_int) c_int`
`pub extern "c" fn internet_checksum[](https://ziglang.org/documentation/master/std/#std.c.serenity.internet_checksum)(ptr: *const anyopaque, count: usize) u16`
`pub extern "c" fn ioctl[](https://ziglang.org/documentation/master/std/#std.c.ioctl)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), request: c_int, ...) c_int`
`pub extern "c" fn isatty[](https://ziglang.org/documentation/master/std/#std.c.isatty)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn kevent[](https://ziglang.org/documentation/master/std/#std.c.kevent)( kq: c_int, changelist: [*]const Kevent[](https://ziglang.org/documentation/master/std/#std.c.Kevent), nchanges: c_int, eventlist: [*]Kevent[](https://ziglang.org/documentation/master/std/#std.c.Kevent), nevents: c_int, timeout: ?*const timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec), ) c_int`
`pub extern "c" fn kevent64[](https://ziglang.org/documentation/master/std/#std.c.darwin.kevent64)( kq: c_int, changelist: [*]const kevent64_s[](https://ziglang.org/documentation/master/std/#std.c.darwin.kevent64_s), nchanges: c_int, eventlist: [*]kevent64_s[](https://ziglang.org/documentation/master/std/#std.c.darwin.kevent64_s), nevents: c_int, flags: c_uint, timeout: ?*const timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec), ) c_int`
`pub extern "c" fn kill[](https://ziglang.org/documentation/master/std/#std.c.kill)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), sig: c_int) c_int`
`pub extern "c" fn kinfo_getfile[](https://ziglang.org/documentation/master/std/#std.c.freebsd.kinfo_getfile)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), cntp: *c_int) ?[*]kinfo_file[](https://ziglang.org/documentation/master/std/#std.c.freebsd.kinfo_file)`
`pub extern "c" fn kqueue[](https://ziglang.org/documentation/master/std/#std.c.kqueue)() c_int`
`pub extern "c" fn link[](https://ziglang.org/documentation/master/std/#std.c.link)(oldpath: [*:0]const u8, newpath: [*:0]const u8) c_int`
`pub extern "c" fn linkat[](https://ziglang.org/documentation/master/std/#std.c.linkat)(oldfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), oldpath: [*:0]const u8, newfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), newpath: [*:0]const u8, flags: c_int) c_int`
`pub extern "c" fn listen[](https://ziglang.org/documentation/master/std/#std.c.listen)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), backlog: c_uint) c_int`
`pub extern "c" fn login_close[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_close)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t)) void`
`pub extern "c" fn login_getcapbool[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_getcapbool)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t), cap: [*:0]const u8, def: c_int) c_int`
`pub extern "c" fn login_getcapnum[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_getcapnum)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t), cap: [*:0]const u8, def: i64, err: i64) i64`
`pub extern "c" fn login_getcapsize[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_getcapsize)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t), cap: [*:0]const u8, def: i64, err: i64) i64`
`pub extern "c" fn login_getcapstr[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_getcapstr)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t), cap: [*:0]const u8, def: [*:0]const u8, err: [*:0]const u8) [*:0]const u8`
`pub extern "c" fn login_getcaptime[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_getcaptime)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t), cap: [*:0]const u8, def: i64, err: i64) i64`
`pub extern "c" fn login_getclass[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_getclass)(class: ?[*:0]const u8) ?*login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t)`
`pub extern "c" fn login_getstyle[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_getstyle)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t), style: ?[*:0]const u8, atype: ?[*:0]const u8) ?[*:0]const u8`
`pub extern "c" fn lseek[](https://ziglang.org/documentation/master/std/#std.c.lseek)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), offset: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t), whence: whence_t[](https://ziglang.org/documentation/master/std/#std.c.whence_t)) off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)`
`pub extern "c" fn lseek64[](https://ziglang.org/documentation/master/std/#std.c.lseek64)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), offset: i64, whence: c_int) i64`
`pub extern "c" fn lwp_gettid[](https://ziglang.org/documentation/master/std/#std.c.dragonfly.lwp_gettid)() c_int`
`pub extern "c" fn mach_absolute_time[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_absolute_time)() u64`
`pub extern "c" fn mach_continuous_time[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_continuous_time)() u64`
`pub extern "c" fn mach_host_self[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_host_self)() mach_port_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)`
`pub extern "c" fn mach_msg[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_msg)( msg: ?*mach_msg_header_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_msg_header_t), option: mach_msg_option_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.integer_t), send_size: mach_msg_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), rcv_size: mach_msg_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), rcv_name: mach_port_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), timeout: mach_msg_timeout_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), notify: mach_port_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn mach_port_allocate[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_allocate)( task: ipc_space_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), right: mach_port_right_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), name: *mach_port_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn mach_port_deallocate[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_deallocate)(task: ipc_space_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), name: mach_port_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn mach_port_insert_right[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_insert_right)( task: ipc_space_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), name: mach_port_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), poly: mach_port_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), poly_poly: mach_msg_type_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_msg_type_name_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub fn mach_task_self[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_task_self)() callconv(.c) mach_port_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)`
`pub extern "c" fn mach_timebase_info[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_timebase_info)(tinfo: ?*mach_timebase_info_data[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_timebase_info_data)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn mach_vm_protect[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_protect)( target_task: vm_map_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), address: mach_vm_address_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_address_t), size: mach_vm_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t), set_maximum: boolean_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.boolean_t), new_protection: vm_prot_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_prot_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn mach_vm_read[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_read)( target_task: vm_map_read_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), address: mach_vm_address_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_address_t), size: mach_vm_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t), data: *vm_offset_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_offset_t), data_cnt: *mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn mach_vm_region[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_region)( target_task: vm_map_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), address: *mach_vm_address_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_address_t), size: *mach_vm_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t), flavor: vm_region_flavor_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_flavor_t), info: vm_region_info_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_info_t), info_cnt: *mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), object_name: *mach_port_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn mach_vm_region_recurse[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_region_recurse)( target_task: vm_map_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), address: *mach_vm_address_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_address_t), size: *mach_vm_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t), nesting_depth: *natural_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), info: vm_region_recurse_info_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_region_recurse_info_t), info_cnt: *mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn mach_vm_write[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_write)( target_task: vm_map_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), address: mach_vm_address_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_address_t), data: vm_offset_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_offset_t), data_cnt: mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn madvise[](https://ziglang.org/documentation/master/std/#std.c.madvise)( addr: *align(page_size[](https://ziglang.org/documentation/master/std/#std.heap.page_size_min)) anyopaque, length: usize, advice: u32, ) c_int`
`pub extern "c" fn malloc[](https://ziglang.org/documentation/master/std/#std.c.malloc)(usize) ?*anyopaque`
`pub extern "c" fn memfd_create[](https://ziglang.org/documentation/master/std/#std.c.memfd_create)(name: [*:0]const u8, flags: c_uint) c_int`
`pub extern "c" fn mincore[](https://ziglang.org/documentation/master/std/#std.c.mincore)( addr: *align(page_size[](https://ziglang.org/documentation/master/std/#std.heap.page_size_min)) anyopaque, length: usize, vec: [*]u8, ) c_int`
`pub extern "c" fn mkdir[](https://ziglang.org/documentation/master/std/#std.c.mkdir)(path: [*:0]const u8, mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t)) c_int`
`pub extern "c" fn mkdirat[](https://ziglang.org/documentation/master/std/#std.c.mkdirat)(dirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), path: [*:0]const u8, mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t)) c_int`
`pub extern "c" fn mmap[](https://ziglang.org/documentation/master/std/#std.c.mmap)(addr: ?*align(page_size[](https://ziglang.org/documentation/master/std/#std.heap.page_size_min)) anyopaque, len: usize, prot: c_uint, flags: MAP[](https://ziglang.org/documentation/master/std/#std.c.MAP), fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), offset: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) *anyopaque`
`pub extern "c" fn mmap64[](https://ziglang.org/documentation/master/std/#std.c.mmap64)(addr: ?*align(page_size[](https://ziglang.org/documentation/master/std/#std.heap.page_size_min)) anyopaque, len: usize, prot: c_uint, flags: c_uint, fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), offset: i64) *anyopaque`
`pub extern "c" fn mprotect[](https://ziglang.org/documentation/master/std/#std.c.mprotect)(addr: *align(page_size[](https://ziglang.org/documentation/master/std/#std.heap.page_size_min)) anyopaque, len: usize, prot: c_uint) c_int`
`pub extern "c" fn mremap[](https://ziglang.org/documentation/master/std/#std.c.mremap)(addr: ?*align(page_size[](https://ziglang.org/documentation/master/std/#std.heap.page_size_min)) const anyopaque, old_len: usize, new_len: usize, flags: MREMAP[](https://ziglang.org/documentation/master/std/#std.c.MREMAP), ...) *anyopaque`
`pub extern "c" fn munmap[](https://ziglang.org/documentation/master/std/#std.c.munmap)(addr: *align(page_size[](https://ziglang.org/documentation/master/std/#std.heap.page_size_min)) const anyopaque, len: usize) c_int`
`pub extern "c" fn open[](https://ziglang.org/documentation/master/std/#std.c.open)(path: [*:0]const u8, oflag: O[](https://ziglang.org/documentation/master/std/#std.c.O), ...) c_int`
`pub extern "c" fn open64[](https://ziglang.org/documentation/master/std/#std.c.open64)(path: [*:0]const u8, oflag: O[](https://ziglang.org/documentation/master/std/#std.c.O), ...) c_int`
`pub extern "c" fn openat[](https://ziglang.org/documentation/master/std/#std.c.openat)(fd: c_int, path: [*:0]const u8, oflag: O[](https://ziglang.org/documentation/master/std/#std.c.O), ...) c_int`
`pub extern "c" fn openat64[](https://ziglang.org/documentation/master/std/#std.c.openat64)(fd: c_int, path: [*:0]const u8, oflag: O[](https://ziglang.org/documentation/master/std/#std.c.O), ...) c_int`
`pub extern "c" fn opendir[](https://ziglang.org/documentation/master/std/#std.c.opendir)(pathname: [*:0]const u8) ?*DIR[](https://ziglang.org/documentation/master/std/#std.c.DIR)`
`pub extern "c" fn openlog[](https://ziglang.org/documentation/master/std/#std.c.openlog)(ident: [*:0]const u8, logopt: c_int, facility: c_int) void`
`pub extern "c" fn os_log_create[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_create)(subsystem: [*]const u8, category: [*]const u8) os_log_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_t)`
`pub extern "c" fn os_log_type_enabled[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_type_enabled)(log: os_log_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_t), tpe: os_log_type_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_type_t)) bool`
`pub extern "c" fn os_signpost_enabled[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_enabled)(log: os_log_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_t)) bool`
`pub extern "c" fn os_signpost_id_generate[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_id_generate)(log: os_log_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_t)) os_signpost_id_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_id_t)`
`pub extern "c" fn os_signpost_id_make_with_pointer[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_id_make_with_pointer)(log: os_log_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_t), ptr: ?*anyopaque) os_signpost_id_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_id_t)`
`pub extern "c" fn os_signpost_interval_begin[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_interval_begin)(log: os_log_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_t), signpos: os_signpost_id_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_id_t), func: [*]const u8, ...) void`
`pub extern "c" fn os_signpost_interval_end[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_interval_end)(log: os_log_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_log_t), signpos: os_signpost_id_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_signpost_id_t), func: [*]const u8, ...) void`
`pub extern "c" fn os_unfair_lock_assert_not_owner[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_assert_not_owner)(o: os_unfair_lock_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_t)) void`
`pub extern "c" fn os_unfair_lock_assert_owner[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_assert_owner)(o: os_unfair_lock_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_t)) void`
`pub extern "c" fn os_unfair_lock_lock[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_lock)(o: os_unfair_lock_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_t)) void`
`pub extern "c" fn os_unfair_lock_trylock[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_trylock)(o: os_unfair_lock_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_t)) bool`
`pub extern "c" fn os_unfair_lock_unlock[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_unlock)(o: os_unfair_lock_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.os_unfair_lock_t)) void`
`pub extern "c" fn perf_event[](https://ziglang.org/documentation/master/std/#std.c.serenity.perf_event)(type: PERF_EVENT[](https://ziglang.org/documentation/master/std/#std.c.serenity.PERF_EVENT), arg1: usize, arg2: usize) c_int`
`pub extern "c" fn perf_register_string[](https://ziglang.org/documentation/master/std/#std.c.serenity.perf_register_string)(string: [*]const u8, string_length: usize) c_int`
`pub extern "c" fn pid_for_task[](https://ziglang.org/documentation/master/std/#std.c.darwin.pid_for_task)(target_tport: mach_port_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), pid: *pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn pipe[](https://ziglang.org/documentation/master/std/#std.c.pipe)(fds: *[2]fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn pledge[](https://ziglang.org/documentation/master/std/#std.c.openbsd.pledge)(promises: ?[*:0]const u8, execpromises: ?[*:0]const u8) c_int`
`pub extern "c" fn poll[](https://ziglang.org/documentation/master/std/#std.c.poll)(fds: [*]pollfd[](https://ziglang.org/documentation/master/std/#std.c.pollfd), nfds: nfds_t[](https://ziglang.org/documentation/master/std/#std.c.nfds_t), timeout: c_int) c_int`
`pub extern "c" fn port_alert[](https://ziglang.org/documentation/master/std/#std.c.port_alert)(port: port_t[](https://ziglang.org/documentation/master/std/#std.c.port_t), flags: u32, events: u32, user_var: ?*anyopaque) c_int`
`pub extern "c" fn port_associate[](https://ziglang.org/documentation/master/std/#std.c.port_associate)( port: port_t[](https://ziglang.org/documentation/master/std/#std.c.port_t), source: u32, object: usize, events: u32, user_var: ?*anyopaque, ) c_int`
`pub extern "c" fn port_create[](https://ziglang.org/documentation/master/std/#std.c.port_create)() port_t[](https://ziglang.org/documentation/master/std/#std.c.port_t)`
`pub extern "c" fn port_dissociate[](https://ziglang.org/documentation/master/std/#std.c.port_dissociate)(port: port_t[](https://ziglang.org/documentation/master/std/#std.c.port_t), source: u32, object: usize) c_int`
`pub extern "c" fn port_get[](https://ziglang.org/documentation/master/std/#std.c.port_get)(port: port_t[](https://ziglang.org/documentation/master/std/#std.c.port_t), event: *port_event[](https://ziglang.org/documentation/master/std/#std.c.port_event), timeout: ?*timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec)) c_int`
`pub extern "c" fn port_getn[](https://ziglang.org/documentation/master/std/#std.c.port_getn)( port: port_t[](https://ziglang.org/documentation/master/std/#std.c.port_t), event_list: []port_event[](https://ziglang.org/documentation/master/std/#std.c.port_event), max_events: u32, events_retrieved: *u32, timeout: ?*timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec), ) c_int`
`pub extern "c" fn port_send[](https://ziglang.org/documentation/master/std/#std.c.port_send)(port: port_t[](https://ziglang.org/documentation/master/std/#std.c.port_t), events: u32, user_var: ?*anyopaque) c_int`
`pub extern "c" fn port_sendn[](https://ziglang.org/documentation/master/std/#std.c.port_sendn)( ports: [*]port_t[](https://ziglang.org/documentation/master/std/#std.c.port_t), errors: []u32, num_ports: u32, events: u32, user_var: ?*anyopaque, ) c_int`
`pub extern "c" fn posix_spawn[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn)( pid: *pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), path: [*:0]const u8, actions: ?*const posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t), attr: ?*const posix_spawnattr_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_t), argv: [*:null]const ?[*:0]const u8, env: [*:null]const ?[*:0]const u8, ) c_int`
`pub extern "c" fn posix_spawn_file_actions_addchdir_np[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_addchdir_np)(actions: *posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t), path: [*:0]const u8) c_int`
`pub extern "c" fn posix_spawn_file_actions_addclose[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_addclose)(actions: *posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t), filedes: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn posix_spawn_file_actions_adddup2[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_adddup2)( actions: *posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t), filedes: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), newfiledes: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), ) c_int`
`pub extern "c" fn posix_spawn_file_actions_addfchdir_np[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_addfchdir_np)(actions: *posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t), filedes: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn posix_spawn_file_actions_addinherit_np[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_addinherit_np)(actions: *posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t), filedes: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn posix_spawn_file_actions_addopen[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_addopen)( actions: *posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t), filedes: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), path: [*:0]const u8, oflag: c_int, mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t), ) c_int`
`pub extern "c" fn posix_spawn_file_actions_destroy[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_destroy)(actions: *posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t)) c_int`
`pub extern "c" fn posix_spawn_file_actions_init[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_init)(actions: *posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t)) c_int`
`pub extern "c" fn posix_spawnattr_destroy[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_destroy)(attr: *posix_spawnattr_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_t)) c_int`
`pub extern "c" fn posix_spawnattr_getflags[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_getflags)(attr: *const posix_spawnattr_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_t), flags: *c_short) c_int`
`pub extern "c" fn posix_spawnattr_init[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_init)(attr: *posix_spawnattr_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_t)) c_int`
`pub extern "c" fn posix_spawnattr_setflags[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_setflags)(attr: *posix_spawnattr_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_t), flags: c_short) c_int`
`pub extern "c" fn posix_spawnp[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnp)( pid: *pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), path: [*:0]const u8, actions: ?*const posix_spawn_file_actions_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawn_file_actions_t), attr: ?*const posix_spawnattr_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.posix_spawnattr_t), argv: [*:null]const ?[*:0]const u8, env: [*:null]const ?[*:0]const u8, ) c_int`
`pub extern "c" fn ppoll[](https://ziglang.org/documentation/master/std/#std.c.ppoll)(fds: [*]pollfd[](https://ziglang.org/documentation/master/std/#std.c.pollfd), nfds: nfds_t[](https://ziglang.org/documentation/master/std/#std.c.nfds_t), timeout: ?*const timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec), sigmask: ?*const sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t)) c_int`
`pub extern "c" fn prctl[](https://ziglang.org/documentation/master/std/#std.c.prctl)(option: c_int, ...) c_int`
`pub extern "c" fn pread[](https://ziglang.org/documentation/master/std/#std.c.pread)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: [*]u8, nbyte: usize, offset: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) isize`
`pub extern "c" fn pread64[](https://ziglang.org/documentation/master/std/#std.c.pread64)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: [*]u8, nbyte: usize, offset: i64) isize`
`pub extern "c" fn preadv[](https://ziglang.org/documentation/master/std/#std.c.preadv)(fd: c_int, iov: [*]const iovec[](https://ziglang.org/documentation/master/std/#std.posix.iovec), iovcnt: c_uint, offset: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) isize`
`pub extern "c" fn preadv64[](https://ziglang.org/documentation/master/std/#std.c.preadv64)(fd: c_int, iov: [*]const iovec[](https://ziglang.org/documentation/master/std/#std.posix.iovec), iovcnt: c_uint, offset: i64) isize`
`pub extern "c" fn printf[](https://ziglang.org/documentation/master/std/#std.c.printf)(format: [*:0]const u8, ...) c_int`
`pub extern "c" fn prlimit[](https://ziglang.org/documentation/master/std/#std.c.prlimit)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), resource: rlimit_resource[](https://ziglang.org/documentation/master/std/#std.c.rlimit_resource), new_limit: *const rlimit[](https://ziglang.org/documentation/master/std/#std.c.rlimit), old_limit: *rlimit[](https://ziglang.org/documentation/master/std/#std.c.rlimit)) c_int`
`pub extern "c" fn profiling_disable[](https://ziglang.org/documentation/master/std/#std.c.serenity.profiling_disable)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)) c_int`
`pub extern "c" fn profiling_enable[](https://ziglang.org/documentation/master/std/#std.c.serenity.profiling_enable)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), event_mask: PERF_EVENT[](https://ziglang.org/documentation/master/std/#std.c.serenity.PERF_EVENT)) c_int`
`pub extern "c" fn profiling_free_buffer[](https://ziglang.org/documentation/master/std/#std.c.serenity.profiling_free_buffer)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)) c_int`
`pub extern "c" fn pthread_atfork[](https://ziglang.org/documentation/master/std/#std.c.pthread_atfork)( prepare: ?*const fn () callconv(.c) void, parent: ?*const fn () callconv(.c) void, child: ?*const fn () callconv(.c) void, ) c_int`
`pub extern "c" fn pthread_attr_destroy[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_destroy)(attr: *pthread_attr_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_attr_get_qos_class_np[](https://ziglang.org/documentation/master/std/#std.c.darwin.pthread_attr_get_qos_class_np)(attr: *pthread_attr_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t), qos_class: *qos_class_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.qos_class_t), relative_priority: *c_int) c_int`
`pub extern "c" fn pthread_attr_init[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_init)(attr: *pthread_attr_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_attr_set_qos_class_np[](https://ziglang.org/documentation/master/std/#std.c.darwin.pthread_attr_set_qos_class_np)(attr: *pthread_attr_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t), qos_class: qos_class_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.qos_class_t), relative_priority: c_int) c_int`
`pub extern "c" fn pthread_attr_setguardsize[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_setguardsize)(attr: *pthread_attr_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t), guardsize: usize) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_attr_setstack[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_setstack)(attr: *pthread_attr_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t), stackaddr: *anyopaque, stacksize: usize) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_attr_setstacksize[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_setstacksize)(attr: *pthread_attr_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t), stacksize: usize) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_cond_broadcast[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_broadcast)(cond: *pthread_cond_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_cond_destroy[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_destroy)(cond: *pthread_cond_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_cond_signal[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_signal)(cond: *pthread_cond_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_cond_timedwait[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_timedwait)(noalias cond: *pthread_cond_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_t), noalias mutex: *pthread_mutex_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_t), noalias abstime: *const timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_cond_wait[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_wait)(noalias cond: *pthread_cond_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_cond_t), noalias mutex: *pthread_mutex_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_create[](https://ziglang.org/documentation/master/std/#std.c.pthread_create)( noalias newthread: *pthread_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_t), noalias attr: ?*const pthread_attr_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_attr_t), start_routine: *const fn (?*anyopaque) callconv(.c) ?*anyopaque, noalias arg: ?*anyopaque, ) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_detach[](https://ziglang.org/documentation/master/std/#std.c.pthread_detach)(thread: pthread_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_get_name_np[](https://ziglang.org/documentation/master/std/#std.c.pthread_get_name_np)(thread: pthread_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_t), name: [*:0]u8, len: usize) void`
`pub extern "c" fn pthread_get_qos_class_np[](https://ziglang.org/documentation/master/std/#std.c.darwin.pthread_get_qos_class_np)(pthread: std[](https://ziglang.org/documentation/master/std/#std).c[](https://ziglang.org/documentation/master/std/#std.c).pthread_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_t), qos_class: *qos_class_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.qos_class_t), relative_priority: *c_int) c_int`
`pub extern "c" fn pthread_getname_np[](https://ziglang.org/documentation/master/std/#std.c.pthread_getname_np)(thread: pthread_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_t), name: [*:0]u8, len: usize) c_int`
`pub extern "c" fn pthread_getspecific[](https://ziglang.org/documentation/master/std/#std.c.pthread_getspecific)(key: pthread_key_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_key_t)) ?*anyopaque`
`pub extern "c" fn pthread_getthreadid_np[](https://ziglang.org/documentation/master/std/#std.c.pthread_getthreadid_np)() c_int`
`pub extern "c" fn pthread_join[](https://ziglang.org/documentation/master/std/#std.c.pthread_join)(thread: pthread_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_t), arg_return: ?*?*anyopaque) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_key_create[](https://ziglang.org/documentation/master/std/#std.c.pthread_key_create)( key: *pthread_key_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_key_t), destructor: ?*const fn (value: *anyopaque) callconv(.c) void, ) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_key_delete[](https://ziglang.org/documentation/master/std/#std.c.pthread_key_delete)(key: pthread_key_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_key_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_mutex_destroy[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_destroy)(mutex: *pthread_mutex_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_mutex_lock[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_lock)(mutex: *pthread_mutex_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_mutex_trylock[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_trylock)(mutex: *pthread_mutex_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_mutex_unlock[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_unlock)(mutex: *pthread_mutex_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_mutex_t)) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_rwlock_destroy[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_destroy)(rwl: *pthread_rwlock_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_t)) callconv(.c) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_rwlock_rdlock[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_rdlock)(rwl: *pthread_rwlock_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_t)) callconv(.c) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_rwlock_tryrdlock[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_tryrdlock)(rwl: *pthread_rwlock_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_t)) callconv(.c) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_rwlock_trywrlock[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_trywrlock)(rwl: *pthread_rwlock_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_t)) callconv(.c) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_rwlock_unlock[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_unlock)(rwl: *pthread_rwlock_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_t)) callconv(.c) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_rwlock_wrlock[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_wrlock)(rwl: *pthread_rwlock_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_rwlock_t)) callconv(.c) E[](https://ziglang.org/documentation/master/std/#std.c.E)`
`pub extern "c" fn pthread_self[](https://ziglang.org/documentation/master/std/#std.c.pthread_self)() pthread_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_t)`
`pub extern "c" fn pthread_set_name_np[](https://ziglang.org/documentation/master/std/#std.c.pthread_set_name_np)(thread: pthread_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_t), name: [*:0]const u8) void`
`pub extern "c" fn pthread_set_qos_class_self_np[](https://ziglang.org/documentation/master/std/#std.c.darwin.pthread_set_qos_class_self_np)(qos_class: qos_class_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.qos_class_t), relative_priority: c_int) c_int`
`pub extern "c" fn pthread_setspecific[](https://ziglang.org/documentation/master/std/#std.c.pthread_setspecific)(key: pthread_key_t[](https://ziglang.org/documentation/master/std/#std.c.pthread_key_t), value: ?*anyopaque) c_int`
`pub extern "c" fn pthread_sigmask[](https://ziglang.org/documentation/master/std/#std.c.pthread_sigmask)(how: c_int, set: *const sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t), oldset: *sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t)) c_int`
`pub extern "c" fn ptrace[](https://ziglang.org/documentation/master/std/#std.c.darwin.ptrace)(request: c_int, pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), addr: caddr_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.caddr_t), data: c_int) c_int`
`pub extern "c" fn purge[](https://ziglang.org/documentation/master/std/#std.c.serenity.purge)(mode: c_int) c_int`
`pub extern "c" fn pw_dup[](https://ziglang.org/documentation/master/std/#std.c.openbsd.pw_dup)(pw: *const passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)) ?*passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd)`
`pub extern "c" fn pwrite[](https://ziglang.org/documentation/master/std/#std.c.pwrite)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: [*]const u8, nbyte: usize, offset: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) isize`
`pub extern "c" fn pwrite64[](https://ziglang.org/documentation/master/std/#std.c.pwrite64)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: [*]const u8, nbyte: usize, offset: i64) isize`
`pub extern "c" fn pwritev[](https://ziglang.org/documentation/master/std/#std.c.pwritev)(fd: c_int, iov: [*]const iovec_const[](https://ziglang.org/documentation/master/std/#std.posix.iovec_const), iovcnt: c_uint, offset: off_t[](https://ziglang.org/documentation/master/std/#std.c.off_t)) isize`
`pub extern "c" fn pwritev64[](https://ziglang.org/documentation/master/std/#std.c.pwritev64)(fd: c_int, iov: [*]const iovec_const[](https://ziglang.org/documentation/master/std/#std.posix.iovec_const), iovcnt: c_uint, offset: i64) isize`
`pub extern "c" fn raise[](https://ziglang.org/documentation/master/std/#std.c.raise)(sig: c_int) c_int`
`pub extern "c" fn read[](https://ziglang.org/documentation/master/std/#std.c.read)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: [*]u8, nbyte: usize) isize`
`pub extern "c" fn readlink[](https://ziglang.org/documentation/master/std/#std.c.readlink)(noalias path: [*:0]const u8, noalias buf: [*]u8, bufsize: usize) isize`
`pub extern "c" fn readlinkat[](https://ziglang.org/documentation/master/std/#std.c.readlinkat)(dirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), noalias path: [*:0]const u8, noalias buf: [*]u8, bufsize: usize) isize`
`pub extern "c" fn readv[](https://ziglang.org/documentation/master/std/#std.c.readv)(fd: c_int, iov: [*]const iovec[](https://ziglang.org/documentation/master/std/#std.posix.iovec), iovcnt: c_uint) isize`
`pub extern "c" fn realloc[](https://ziglang.org/documentation/master/std/#std.c.realloc)(?*anyopaque, usize) ?*anyopaque`
`pub extern "c" fn recv[](https://ziglang.org/documentation/master/std/#std.c.recv)( sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), arg1: ?*anyopaque, arg2: usize, arg3: c_int, ) if (native_os[](https://ziglang.org/documentation/master/std/#std.c.native_os) == .windows) c_int else isize`
`pub extern "c" fn recvfrom[](https://ziglang.org/documentation/master/std/#std.c.recvfrom)( sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), noalias buf: *anyopaque, len: usize, flags: u32, noalias src_addr: ?*sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), noalias addrlen: ?*socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t), ) if (native_os[](https://ziglang.org/documentation/master/std/#std.c.native_os) == .windows) c_int else isize`
`pub extern "c" fn recvmsg[](https://ziglang.org/documentation/master/std/#std.c.recvmsg)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), msg: *msghdr[](https://ziglang.org/documentation/master/std/#std.c.msghdr), flags: u32) isize`
`pub extern "c" fn rename[](https://ziglang.org/documentation/master/std/#std.c.rename)(old: [*:0]const u8, new: [*:0]const u8) c_int`
`pub extern "c" fn renameat[](https://ziglang.org/documentation/master/std/#std.c.renameat)(olddirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), old: [*:0]const u8, newdirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), new: [*:0]const u8) c_int`
`pub extern "c" fn rewinddir[](https://ziglang.org/documentation/master/std/#std.c.rewinddir)(dp: *DIR[](https://ziglang.org/documentation/master/std/#std.c.DIR)) void`
`pub extern "c" fn rmdir[](https://ziglang.org/documentation/master/std/#std.c.rmdir)(path: [*:0]const u8) c_int`
`pub extern "c" fn sched_getaffinity[](https://ziglang.org/documentation/master/std/#std.c.sched_getaffinity)(pid: c_int, size: usize, set: *cpu_set_t[](https://ziglang.org/documentation/master/std/#std.c.cpu_set_t)) c_int`
`pub extern "c" fn seekdir[](https://ziglang.org/documentation/master/std/#std.c.seekdir)(dp: *DIR[](https://ziglang.org/documentation/master/std/#std.c.DIR), loc: c_long) void`
`pub extern "c" fn sem_close[](https://ziglang.org/documentation/master/std/#std.c.sem_close)(sem: *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t)) c_int`
`pub extern "c" fn sem_destroy[](https://ziglang.org/documentation/master/std/#std.c.sem_destroy)(sem: *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t)) c_int`
`pub extern "c" fn sem_getvalue[](https://ziglang.org/documentation/master/std/#std.c.sem_getvalue)(sem: *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t), sval: *c_int) c_int`
`pub extern "c" fn sem_init[](https://ziglang.org/documentation/master/std/#std.c.sem_init)(sem: *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t), pshared: c_int, value: c_uint) c_int`
`pub extern "c" fn sem_open[](https://ziglang.org/documentation/master/std/#std.c.sem_open)(name: [*:0]const u8, flag: c_int, mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t), value: c_uint) *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t)`
`pub extern "c" fn sem_post[](https://ziglang.org/documentation/master/std/#std.c.sem_post)(sem: *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t)) c_int`
`pub extern "c" fn sem_timedwait[](https://ziglang.org/documentation/master/std/#std.c.sem_timedwait)(sem: *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t), abs_timeout: *const timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec)) c_int`
`pub extern "c" fn sem_trywait[](https://ziglang.org/documentation/master/std/#std.c.sem_trywait)(sem: *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t)) c_int`
`pub extern "c" fn sem_wait[](https://ziglang.org/documentation/master/std/#std.c.sem_wait)(sem: *sem_t[](https://ziglang.org/documentation/master/std/#std.c.sem_t)) c_int`
`pub extern "c" fn send[](https://ziglang.org/documentation/master/std/#std.c.send)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: *const anyopaque, len: usize, flags: u32) isize`
`pub extern "c" fn sendfile64[](https://ziglang.org/documentation/master/std/#std.c.sendfile64)(out_fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), in_fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), offset: ?*i64, count: usize) isize`
`pub extern "c" fn sendmsg[](https://ziglang.org/documentation/master/std/#std.c.sendmsg)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), msg: *const msghdr_const[](https://ziglang.org/documentation/master/std/#std.c.msghdr_const), flags: u32) isize`
`pub extern "c" fn sendto[](https://ziglang.org/documentation/master/std/#std.c.sendto)( sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: *const anyopaque, len: usize, flags: u32, dest_addr: ?*const sockaddr[](https://ziglang.org/documentation/master/std/#std.c.sockaddr), addrlen: socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t), ) isize`
`pub extern "c" fn serenity_open[](https://ziglang.org/documentation/master/std/#std.c.serenity.serenity_open)(path: [*]const u8, path_length: usize, options: c_int, ...) c_int`
`pub extern "c" fn serenity_readlink[](https://ziglang.org/documentation/master/std/#std.c.serenity.serenity_readlink)(path: [*]const u8, path_length: usize, buffer: [*]u8, buffer_size: usize) c_int`
`pub extern "c" fn setclasscontext[](https://ziglang.org/documentation/master/std/#std.c.openbsd.setclasscontext)(class: [*:0]const u8, flags: c_uint) c_int`
`pub extern "c" fn setegid[](https://ziglang.org/documentation/master/std/#std.c.setegid)(egid: gid_t[](https://ziglang.org/documentation/master/std/#std.c.gid_t)) c_int`
`pub extern "c" fn seteuid[](https://ziglang.org/documentation/master/std/#std.c.seteuid)(euid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)) c_int`
`pub extern "c" fn setgid[](https://ziglang.org/documentation/master/std/#std.c.setgid)(gid: gid_t[](https://ziglang.org/documentation/master/std/#std.c.gid_t)) c_int`
`pub extern "c" fn setkeymap[](https://ziglang.org/documentation/master/std/#std.c.serenity.setkeymap)(name: [*]const u8, map: [*]const u32, shift_map: [*]const u32, alt_map: [*]const u32, altgr_map: [*]const u32, shift_altgr_map: [*]const u32) c_int`
`pub extern "c" fn setlocale[](https://ziglang.org/documentation/master/std/#std.c.setlocale)(category: LC[](https://ziglang.org/documentation/master/std/#std.c.LC), locale: ?[*:0]const u8) ?[*:0]const u8`
`pub extern "c" fn setlogmask[](https://ziglang.org/documentation/master/std/#std.c.setlogmask)(maskpri: c_int) c_int`
`pub extern "c" fn setpassent[](https://ziglang.org/documentation/master/std/#std.c.openbsd.setpassent)(stayopen: c_int) c_int`
`pub extern "c" fn setpgid[](https://ziglang.org/documentation/master/std/#std.c.setpgid)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), pgid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)) c_int`
`pub extern "c" fn setpwent[](https://ziglang.org/documentation/master/std/#std.c.openbsd.setpwent)() void`
`pub extern "c" fn setregid[](https://ziglang.org/documentation/master/std/#std.c.setregid)(rgid: gid_t[](https://ziglang.org/documentation/master/std/#std.c.gid_t), egid: gid_t[](https://ziglang.org/documentation/master/std/#std.c.gid_t)) c_int`
`pub extern "c" fn setresgid[](https://ziglang.org/documentation/master/std/#std.c.setresgid)(rgid: gid_t[](https://ziglang.org/documentation/master/std/#std.c.gid_t), egid: gid_t[](https://ziglang.org/documentation/master/std/#std.c.gid_t), sgid: gid_t[](https://ziglang.org/documentation/master/std/#std.c.gid_t)) c_int`
`pub extern "c" fn setresuid[](https://ziglang.org/documentation/master/std/#std.c.setresuid)(ruid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t), euid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t), suid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)) c_int`
`pub extern "c" fn setreuid[](https://ziglang.org/documentation/master/std/#std.c.setreuid)(ruid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t), euid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)) c_int`
`pub extern "c" fn setrlimit[](https://ziglang.org/documentation/master/std/#std.c.setrlimit)(resource: rlimit_resource[](https://ziglang.org/documentation/master/std/#std.c.rlimit_resource), rlim: *const rlimit[](https://ziglang.org/documentation/master/std/#std.c.rlimit)) c_int`
`pub extern "c" fn setrlimit64[](https://ziglang.org/documentation/master/std/#std.c.setrlimit64)(resource: rlimit_resource[](https://ziglang.org/documentation/master/std/#std.c.rlimit_resource), rlim: *const rlimit[](https://ziglang.org/documentation/master/std/#std.c.rlimit)) c_int`
`pub extern "c" fn setsockopt[](https://ziglang.org/documentation/master/std/#std.c.setsockopt)(sockfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), level: i32, optname: u32, optval: ?*const anyopaque, optlen: socklen_t[](https://ziglang.org/documentation/master/std/#std.c.socklen_t)) c_int`
`pub extern "c" fn setuid[](https://ziglang.org/documentation/master/std/#std.c.setuid)(uid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)) c_int`
`pub extern "c" fn setusercontext[](https://ziglang.org/documentation/master/std/#std.c.openbsd.setusercontext)(lc: *login_cap_t[](https://ziglang.org/documentation/master/std/#std.c.openbsd.login_cap_t), pwd: *passwd[](https://ziglang.org/documentation/master/std/#std.c.passwd), uid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t), flags: c_uint) c_int`
`pub extern "c" fn shm_open[](https://ziglang.org/documentation/master/std/#std.c.shm_open)(name: [*:0]const u8, flag: c_int, mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t)) c_int`
`pub extern "c" fn shm_unlink[](https://ziglang.org/documentation/master/std/#std.c.shm_unlink)(name: [*:0]const u8) c_int`
`pub extern "c" fn shutdown[](https://ziglang.org/documentation/master/std/#std.c.shutdown)(socket: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), how: c_int) c_int`
`extern "c" fn sigaddset[](https://ziglang.org/documentation/master/std/#std.c.private.sigaddset)(set: ?*sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t), signo: c_int) c_int`
`extern "c" fn sigdelset[](https://ziglang.org/documentation/master/std/#std.c.private.sigdelset)(set: ?*sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t), signo: c_int) c_int`
`extern "c" fn sigemptyset[](https://ziglang.org/documentation/master/std/#std.c.private.sigemptyset)(set: ?*sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t)) c_int`
`extern "c" fn sigismember[](https://ziglang.org/documentation/master/std/#std.c.private.sigismember)(set: ?*const sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t), signo: c_int) c_int`
`pub extern "c" fn signalfd[](https://ziglang.org/documentation/master/std/#std.c.signalfd)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), mask: *const sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t), flags: u32) c_int`
`pub fn sigrtmax[](https://ziglang.org/documentation/master/std/#std.c.sigrtmax)() u8`
    
Zig's version of SIGRTMAX. Actually a function. `pub fn sigrtmin[](https://ziglang.org/documentation/master/std/#std.c.sigrtmin)() u8`
    
Zig's version of SIGRTMIN. Actually a function. `pub extern "c" fn sigwait[](https://ziglang.org/documentation/master/std/#std.c.sigwait)(set: ?*sigset_t[](https://ziglang.org/documentation/master/std/#std.c.sigset_t), sig: ?*c_int) c_int`
`pub extern "c" fn socketpair[](https://ziglang.org/documentation/master/std/#std.c.socketpair)(domain: c_uint, sock_type: c_uint, protocol: c_uint, sv: *[2]fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t)) c_int`
`pub extern "c" fn symlink[](https://ziglang.org/documentation/master/std/#std.c.symlink)(existing: [*:0]const u8, new: [*:0]const u8) c_int`
`pub extern "c" fn symlinkat[](https://ziglang.org/documentation/master/std/#std.c.symlinkat)(oldpath: [*:0]const u8, newdirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), newpath: [*:0]const u8) c_int`
`pub extern "c" fn sync[](https://ziglang.org/documentation/master/std/#std.c.sync)() void`
`pub extern "c" fn syncfs[](https://ziglang.org/documentation/master/std/#std.c.syncfs)(fd: c_int) c_int`
`pub extern "c" fn sysctl[](https://ziglang.org/documentation/master/std/#std.c.sysctl)(name: [*]const c_int, namelen: c_uint, oldp: ?*anyopaque, oldlenp: ?*usize, newp: ?*anyopaque, newlen: usize) c_int`
`pub extern "c" fn sysctlbyname[](https://ziglang.org/documentation/master/std/#std.c.sysctlbyname)(name: [*:0]const u8, oldp: ?*anyopaque, oldlenp: ?*usize, newp: ?*anyopaque, newlen: usize) c_int`
`pub extern "c" fn sysctlnametomib[](https://ziglang.org/documentation/master/std/#std.c.sysctlnametomib)(name: [*:0]const u8, mibp: ?*c_int, sizep: ?*usize) c_int`
`pub extern "c" fn syslog[](https://ziglang.org/documentation/master/std/#std.c.syslog)(priority: c_int, message: [*:0]const u8, ...) void`
`pub extern "c" fn task_for_pid[](https://ziglang.org/documentation/master/std/#std.c.darwin.task_for_pid)(target_tport: mach_port_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), t: *mach_port_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn task_get_exception_ports[](https://ziglang.org/documentation/master/std/#std.c.darwin.task_get_exception_ports)( task: task_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), exception_mask: exception_mask_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_mask_t), masks: exception_mask_array_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_mask_array_t), masks_cnt: *mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), old_handlers: exception_handler_array_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_handler_array_t), old_behaviors: exception_behavior_array_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_behavior_array_t), old_flavors: exception_flavor_array_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_flavor_array_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn task_info[](https://ziglang.org/documentation/master/std/#std.c.darwin.task_info)( target_task: task_name_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_name_t), flavor: task_flavor_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), task_info_out: task_info_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.task_info_t), task_info_outCnt: *mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn task_resume[](https://ziglang.org/documentation/master/std/#std.c.darwin.task_resume)(target_task: task_read_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn task_set_exception_ports[](https://ziglang.org/documentation/master/std/#std.c.darwin.task_set_exception_ports)( task: task_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), exception_mask: exception_mask_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_mask_t), new_port: mach_port_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), behavior: exception_behavior_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.exception_behavior_t), new_flavor: thread_state_flavor_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_state_flavor_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn task_suspend[](https://ziglang.org/documentation/master/std/#std.c.darwin.task_suspend)(target_task: task_read_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn task_threads[](https://ziglang.org/documentation/master/std/#std.c.darwin.task_threads)( target_task: mach_port_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), init_port_set: *mach_port_array_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_array_t), init_port_count: *mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn tcgetattr[](https://ziglang.org/documentation/master/std/#std.c.tcgetattr)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), termios_p: *termios[](https://ziglang.org/documentation/master/std/#std.c.termios)) c_int`
`pub extern "c" fn tcsetattr[](https://ziglang.org/documentation/master/std/#std.c.tcsetattr)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), optional_action: TCSA[](https://ziglang.org/documentation/master/std/#std.posix.TCSA), termios_p: *const termios[](https://ziglang.org/documentation/master/std/#std.c.termios)) c_int`
`pub extern "c" fn telldir[](https://ziglang.org/documentation/master/std/#std.c.telldir)(dp: *DIR[](https://ziglang.org/documentation/master/std/#std.c.DIR)) c_long`
`pub extern "c" fn thread_get_state[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_get_state)( thread: thread_act_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), flavor: thread_flavor_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), state: thread_state_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_state_t), count: *mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn thread_info[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_info)( thread: thread_act_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), flavor: thread_flavor_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), info: thread_info_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_info_t), count: *mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn thread_resume[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_resume)(thread: thread_act_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn thread_set_state[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_set_state)( thread: thread_act_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), flavor: thread_flavor_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), new_state: thread_state_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.thread_state_t), count: mach_msg_type_number_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.natural_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn timerfd_create[](https://ziglang.org/documentation/master/std/#std.c.timerfd_create)(clockid: timerfd_clockid_t[](https://ziglang.org/documentation/master/std/#std.c.timerfd_clockid_t), flags: c_int) c_int`
`pub extern "c" fn timerfd_gettime[](https://ziglang.org/documentation/master/std/#std.c.timerfd_gettime)(fd: c_int, curr_value: *itimerspec[](https://ziglang.org/documentation/master/std/#std.c.itimerspec)) c_int`
`pub extern "c" fn timerfd_settime[](https://ziglang.org/documentation/master/std/#std.c.timerfd_settime)( fd: c_int, flags: c_int, new_value: *const itimerspec[](https://ziglang.org/documentation/master/std/#std.c.itimerspec), old_value: ?*itimerspec[](https://ziglang.org/documentation/master/std/#std.c.itimerspec), ) c_int`
`pub extern "c" fn uid_from_user[](https://ziglang.org/documentation/master/std/#std.c.openbsd.uid_from_user)(name: [*:0]const u8, uid: *uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t)) c_int`
`pub extern "c" fn umask[](https://ziglang.org/documentation/master/std/#std.c.umask)(mode: mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t)) mode_t[](https://ziglang.org/documentation/master/std/#std.c.mode_t)`
`pub extern "c" fn umtx_sleep[](https://ziglang.org/documentation/master/std/#std.c.dragonfly.umtx_sleep)(ptr: *const volatile c_int, value: c_int, timeout: c_int) c_int`
`pub extern "c" fn umtx_wakeup[](https://ziglang.org/documentation/master/std/#std.c.dragonfly.umtx_wakeup)(ptr: *const volatile c_int, count: c_int) c_int`
`pub extern "c" fn uname[](https://ziglang.org/documentation/master/std/#std.c.uname)(buf: *utsname[](https://ziglang.org/documentation/master/std/#std.c.utsname)) c_int`
`pub extern "c" fn unlink[](https://ziglang.org/documentation/master/std/#std.c.unlink)(path: [*:0]const u8) c_int`
`pub extern "c" fn unlinkat[](https://ziglang.org/documentation/master/std/#std.c.unlinkat)(dirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), path: [*:0]const u8, flags: c_uint) c_int`
`pub extern "c" fn unveil[](https://ziglang.org/documentation/master/std/#std.c.openbsd.unveil)(path: ?[*:0]const u8, permissions: ?[*:0]const u8) c_int`
`pub extern "c" fn user_from_uid[](https://ziglang.org/documentation/master/std/#std.c.openbsd.user_from_uid)(uid: uid_t[](https://ziglang.org/documentation/master/std/#std.c.uid_t), noname: c_int) ?[*:0]const u8`
`pub extern "c" fn utimensat[](https://ziglang.org/documentation/master/std/#std.c.utimensat)(dirfd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), pathname: [*:0]const u8, times: ?*[2]timespec[](https://ziglang.org/documentation/master/std/#std.c.timespec), flags: u32) c_int`
`pub extern "c" fn utimes[](https://ziglang.org/documentation/master/std/#std.c.utimes)(path: [*:0]const u8, times: ?*[2]timeval[](https://ziglang.org/documentation/master/std/#std.c.timeval)) c_int`
`pub inline fn versionCheck[](https://ziglang.org/documentation/master/std/#std.c.versionCheck)(comptime version: std[](https://ziglang.org/documentation/master/std/#std).SemanticVersion[](https://ziglang.org/documentation/master/std/#std.SemanticVersion)) bool`
    
  * If not linking libc, returns `false`.
  * If linking musl libc, returns `true`.
  * If linking GNU libc (glibc), returns `true` if the target version is greater than or equal to `version`.
  * If linking Android libc (bionic), returns `true` if the target API level is greater than or equal to `version.major`, ignoring other components.
  * If linking a libc other than these, returns `false`.

`pub extern "c" fn vm_deallocate[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_deallocate)(target_task: vm_map_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), address: vm_address_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_offset_t), size: vm_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t)) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn vm_machine_attribute[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_machine_attribute)( target_task: vm_map_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_port_t), address: vm_address_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_offset_t), size: vm_size_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.mach_vm_size_t), attribute: vm_machine_attribute_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_machine_attribute_t), value: *vm_machine_attribute_val_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.vm_machine_attribute_val_t), ) kern_return_t[](https://ziglang.org/documentation/master/std/#std.c.darwin.kern_return_t)`
`pub extern "c" fn wait4[](https://ziglang.org/documentation/master/std/#std.c.wait4)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), status: ?*c_int, options: c_int, ru: ?*rusage[](https://ziglang.org/documentation/master/std/#std.c.rusage)) pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)`
`pub extern "c" fn waitpid[](https://ziglang.org/documentation/master/std/#std.c.waitpid)(pid: pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t), status: ?*c_int, options: c_int) pid_t[](https://ziglang.org/documentation/master/std/#std.c.pid_t)`
`pub extern "c" fn write[](https://ziglang.org/documentation/master/std/#std.c.write)(fd: fd_t[](https://ziglang.org/documentation/master/std/#std.c.fd_t), buf: [*]const u8, nbyte: usize) isize`
`pub extern "c" fn writev[](https://ziglang.org/documentation/master/std/#std.c.writev)(fd: c_int, iov: [*]const iovec_const[](https://ziglang.org/documentation/master/std/#std.posix.iovec_const), iovcnt: c_uint) isize`

## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
