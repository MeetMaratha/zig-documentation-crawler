[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [os](https://ziglang.org/documentation/master/std/#std.os)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/os.zig)
This file contains thin wrappers around OS-specific APIs, with these specific goals in mind:
  * Convert "errno"-style error codes into Zig errors.
  * When null-terminated byte buffers are required, provide APIs which accept slices as well as APIs which accept null-terminated byte buffers. Same goes for WTF-16LE encoding.
  * Where operating systems share APIs, e.g. POSIX, these thin wrappers provide cross platform abstracting.
  * When there exists a corresponding libc function and linking libc, the libc implementation is used. Exceptions are made for known buggy areas of libc. On Linux libc can be side-stepped by using `std.os.linux[](https://ziglang.org/documentation/master/std/#std.os.linux)` directly.
  * For Windows, this file represents the API that libc would provide for Windows. For thin wrappers around Windows-specific APIs, see `std.os.windows[](https://ziglang.org/documentation/master/std/#std.os.windows)`.


## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
## Namespaces
  * [emscripten](https://ziglang.org/documentation/master/std/#std.os.emscripten)
  * [linux](https://ziglang.org/documentation/master/std/#std.os.linux)
  * [plan9](https://ziglang.org/documentation/master/std/#std.os.plan9)
  * [uefi](https://ziglang.org/documentation/master/std/#std.os.uefi)
  * [wasi](https://ziglang.org/documentation/master/std/#std.os.wasi)
  * [windows](https://ziglang.org/documentation/master/std/#std.os.windows)


## Global Variables
[argv](https://ziglang.org/documentation/master/std/#std.os.argv)| `[][*:0]u8`| Populated by startup code before main(). Not available on WASI or Windows without libc. See `std.process.argsAlloc[](https://ziglang.org/documentation/master/std/#std.process.argsAlloc)` or `std.process.argsWithAllocator[](https://ziglang.org/documentation/master/std/#std.process.argsWithAllocator)` for a cross-platform alternative.  
---|---|---  
[environ](https://ziglang.org/documentation/master/std/#std.os.environ)| `[][*:0]u8`| See also `getenv`. Populated by startup code before main(). TODO this is a footgun because the value will be undefined when using `zig build-lib`. <https://github.com/ziglang/zig/issues/4524>  
## Values
## Functions `pub fn accessW[](https://ziglang.org/documentation/master/std/#std.os.accessW)(path: [*:0]const u16) windows[](https://ziglang.org/documentation/master/std/#std.os.windows).GetFileAttributesError[](https://ziglang.org/documentation/master/std/#std.os.windows.GetFileAttributesError)!void`
    
Call from Windows-specific code if you already have a WTF-16LE encoded, null terminated string. Otherwise use `access` or `accessZ`. `pub fn fstat_wasi[](https://ziglang.org/documentation/master/std/#std.os.fstat_wasi)(fd: posix[](https://ziglang.org/documentation/master/std/#std.posix).fd_t[](https://ziglang.org/documentation/master/std/#std.posix.fd_t)) posix[](https://ziglang.org/documentation/master/std/#std.posix).FStatError[](https://ziglang.org/documentation/master/std/#std.posix.FStatError)!wasi[](https://ziglang.org/documentation/master/std/#std.os.wasi).filestat_t[](https://ziglang.org/documentation/master/std/#std.os.wasi.filestat_t)`
`pub fn fstatat_wasi[](https://ziglang.org/documentation/master/std/#std.os.fstatat_wasi)(dirfd: posix[](https://ziglang.org/documentation/master/std/#std.posix).fd_t[](https://ziglang.org/documentation/master/std/#std.posix.fd_t), pathname: []const u8, flags: wasi[](https://ziglang.org/documentation/master/std/#std.os.wasi).lookupflags_t[](https://ziglang.org/documentation/master/std/#std.os.wasi.lookupflags_t)) posix[](https://ziglang.org/documentation/master/std/#std.posix).FStatAtError[](https://ziglang.org/documentation/master/std/#std.posix.FStatAtError)!wasi[](https://ziglang.org/documentation/master/std/#std.os.wasi).filestat_t[](https://ziglang.org/documentation/master/std/#std.os.wasi.filestat_t)`
    
WASI-only. Same as `fstatat` but targeting WASI. `pathname` should be encoded as valid UTF-8. See also `fstatat`. `pub fn getFdPath[](https://ziglang.org/documentation/master/std/#std.os.getFdPath)(fd: std[](https://ziglang.org/documentation/master/std/#std).posix[](https://ziglang.org/documentation/master/std/#std.posix).fd_t[](https://ziglang.org/documentation/master/std/#std.posix.fd_t), out_buffer: *[max_path_bytes[](https://ziglang.org/documentation/master/std/#std.fs.max_path_bytes)]u8) std[](https://ziglang.org/documentation/master/std/#std).posix[](https://ziglang.org/documentation/master/std/#std.posix).RealPathError[](https://ziglang.org/documentation/master/std/#std.posix.RealPathError)![]u8`
    
Return canonical path of handle `fd`. `pub fn isGetFdPathSupportedOnTarget[](https://ziglang.org/documentation/master/std/#std.os.isGetFdPathSupportedOnTarget)(os: std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Os[](https://ziglang.org/documentation/master/std/#std.Target.Os)) bool`

## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
