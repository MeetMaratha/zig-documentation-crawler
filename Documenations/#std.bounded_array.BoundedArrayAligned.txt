[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [bounded_array](https://ziglang.org/documentation/master/std/#std.bounded_array)
  * [BoundedArrayAligned](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)


Loading...
# Type Function[[src]](https://ziglang.org/documentation/master/std/#src/std/bounded_array.zig)
A structure with an array, length and alignment, that can be used as a slice.
Useful to pass around small explicitly-aligned arrays whose exact size is only known at runtime, but whose maximum size is known at comptime, without requiring an `Allocator`.
## Parameters
```
T: type
```

```
alignment: Alignment[](https://ziglang.org/documentation/master/std/#std.mem.Alignment)
```

```
buffer_capacity: usize
```

## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
buffer: [buffer_capacity]T align(alignment.toByteUnits()) = undefined
```

```
len: usize = 0
```

## Types
  * [Writer](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.Writer)


## Namespaces
## Global Variables
## Values
## Functions `pub fn addManyAsArray[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.addManyAsArray)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), comptime n: usize) error{Overflow}!*align(alignment.toByteUnits()) [n]T`
    
Resize the slice, adding `n` new elements, which have `undefined` values. The return value is a pointer to the array of uninitialized elements. `pub fn addManyAsSlice[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.addManyAsSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), n: usize) error{Overflow}![]align(alignment.toByteUnits()) T`
    
Resize the slice, adding `n` new elements, which have `undefined` values. The return value is a slice pointing to the uninitialized elements. `pub fn addOne[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.addOne)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)) error{Overflow}!*T`
    
Increase length by 1, returning a pointer to the new item. `pub fn addOneAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.addOneAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)) *T`
    
Increase length by 1, returning pointer to the new item. Asserts that there is space for the new item. `pub fn append[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.append)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), item: T) error{Overflow}!void`
    
Extend the slice by 1 element. `pub fn appendAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.appendAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), item: T) void`
    
Extend the slice by 1 element, asserting the capacity is already enough to store the new item. `pub fn appendNTimes[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.appendNTimes)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), value: T, n: usize) error{Overflow}!void`
    
Append a value to the slice `n` times. Allocates more memory as necessary. `pub fn appendNTimesAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.appendNTimesAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), value: T, n: usize) void`
    
Append a value to the slice `n` times. Asserts the capacity is enough. `pub fn appendSlice[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.appendSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), items: []const T) error{Overflow}!void`
    
Append the slice of items to the slice. `pub fn appendSliceAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.appendSliceAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), items: []const T) void`
    
Append the slice of items to the slice, asserting the capacity is already enough to store the new items. `pub fn capacity[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.capacity)(self: Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)) usize`
    
Return the maximum length of a slice. `pub fn clear[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.clear)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)) void`
    
Remove all elements from the slice. `pub fn constSlice[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.constSlice)(self: *const Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)) []align(alignment.toByteUnits()) const T`
    
View the internal array as a constant slice whose size was previously set. `pub fn ensureUnusedCapacity[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.ensureUnusedCapacity)(self: Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), additional_count: usize) error{Overflow}!void`
    
Check that the slice can hold at least `additional_count` items. `pub fn fromSlice[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.fromSlice)(m: []const T) error{Overflow}!Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)`
    
Copy the content of an existing slice. `pub fn get[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.get)(self: Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), i: usize) T`
    
Return the element at index `i` of the slice. `pub fn init[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.init)(len: usize) error{Overflow}!Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)`
    
Set the actual length of the slice. Returns error.Overflow if it exceeds the length of the backing array. `pub fn insert[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.insert)( self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), i: usize, item: T, ) error{Overflow}!void`
    
Insert `item` at index `i` by moving `slice[n .. slice.len]` to make room. This operation is O(N). `pub fn insertSlice[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.insertSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), i: usize, items: []const T) error{Overflow}!void`
    
Insert slice `items` at index `i` by moving `slice[i .. slice.len]` to make room. This operation is O(N). `pub fn orderedRemove[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.orderedRemove)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), i: usize) T`
    
Remove the element at index `i`, shift elements after index `i` forward, and return the removed element. Asserts the slice has at least one item. This operation is O(N). `pub fn pop[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.pop)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)) ?T`
    
Remove and return the last element from the slice, or return `null` if the slice is empty. `pub fn replaceRange[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.replaceRange)( self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), start: usize, len: usize, new_items: []const T, ) error{Overflow}!void`
    
Replace range of elements `slice[start..][0..len]` with `new_items`. Grows slice if `len < new_items.len`. Shrinks slice if `len > new_items.len`. `pub fn resize[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.resize)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), len: usize) error{Overflow}!void`
    
Adjust the slice's length to `len`. Does not initialize added items if any. `pub fn set[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.set)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), i: usize, item: T) void`
    
Set the value of the element at index `i` of the slice. `pub fn slice[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.slice)(self: anytype) switch (@TypeOf(&self.buffer)) { *align(alignment.toByteUnits()) [buffer_capacity]T => []align(alignment.toByteUnits()) T, *align(alignment.toByteUnits()) const [buffer_capacity]T => []align(alignment.toByteUnits()) const T, else => unreachable, }`
    
View the internal array as a slice whose size was previously set. `pub fn swapRemove[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.swapRemove)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned), i: usize) T`
    
Remove the element at the specified index and return it. The empty slot is filled from the end of the slice. This operation is O(1). `pub fn unusedCapacitySlice[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.unusedCapacitySlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)) []align(alignment.toByteUnits()) T`
    
Return a slice of only the extra capacity after items. This can be useful for writing directly into it. Note that such an operation must be followed up with a call to `resize()` `pub fn writer[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.writer)(self: *Self[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned)) Writer[](https://ziglang.org/documentation/master/std/#std.bounded_array.BoundedArrayAligned.Writer)`
    
Initializes a writer which will write into the array.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
