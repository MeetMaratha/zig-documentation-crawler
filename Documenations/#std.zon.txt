[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [zon](https://ziglang.org/documentation/master/std/#std.zon)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/zon.zig)
ZON parsing and stringification.
ZON ("Zig Object Notation") is a textual file format. Outside of `nan` and `inf` literals, ZON's grammar is a subset of Zig's.
Supported Zig primitives:
  * boolean literals
  * number literals (including `nan` and `inf`)
  * character literals
  * enum literals
  * `null` literals
  * string literals
  * multiline string literals


Supported Zig container types:
  * anonymous struct literals
  * anonymous tuple literals


Here is an example ZON object:
```
.{
  .a = 1.5,
  .b = "hello, world!",
  .c = .{ true, false },
  .d = .{ 1, 2, 3 },
}

```

Individual primitives are also valid ZON, for example:
```
"This string is a valid ZON object."

```

ZON may not contain type names.
ZON does not have syntax for pointers, but the parsers will allocate as needed to match the given Zig types. Similarly, the serializer will traverse pointers.
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
## Namespaces
  * [parse](https://ziglang.org/documentation/master/std/#std.zon.parse)
  * [stringify](https://ziglang.org/documentation/master/std/#std.zon.stringify)


## Global Variables
## Values
## Functions
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
