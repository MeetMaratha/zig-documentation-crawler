[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [meta](https://ziglang.org/documentation/master/std/#std.meta)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/meta.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [ArgsTuple](https://ziglang.org/documentation/master/std/#std.meta.ArgsTuple)
  * [Child](https://ziglang.org/documentation/master/std/#std.meta.Child)
  * [DeclEnum](https://ziglang.org/documentation/master/std/#std.meta.DeclEnum)
  * [Elem](https://ziglang.org/documentation/master/std/#std.meta.Elem)
  * [FieldEnum](https://ziglang.org/documentation/master/std/#std.meta.FieldEnum)
  * [FieldType](https://ziglang.org/documentation/master/std/#std.meta.FieldType)
  * [Float](https://ziglang.org/documentation/master/std/#std.meta.Float)
  * [Int](https://ziglang.org/documentation/master/std/#std.meta.Int)
  * [Sentinel](https://ziglang.org/documentation/master/std/#std.meta.Sentinel)
  * [Tag](https://ziglang.org/documentation/master/std/#std.meta.Tag)
  * [TagPayload](https://ziglang.org/documentation/master/std/#std.meta.TagPayload)
  * [TagPayloadByName](https://ziglang.org/documentation/master/std/#std.meta.TagPayloadByName)
  * [TrailerFlags](https://ziglang.org/documentation/master/std/#std.meta.trailer_flags.TrailerFlags)
  * [Tuple](https://ziglang.org/documentation/master/std/#std.meta.Tuple)


## Namespaces
## Global Variables
## Values
[a](https://ziglang.org/documentation/master/std/#std.meta.a)| `u8`|   
---|---|---  
[a](https://ziglang.org/documentation/master/std/#std.meta.a)| `u8`|   
[a](https://ziglang.org/documentation/master/std/#std.meta.a)| `u8`|   
[b](https://ziglang.org/documentation/master/std/#std.meta.b)| `void`|   
[b](https://ziglang.org/documentation/master/std/#std.meta.b)| `void`|   
[c](https://ziglang.org/documentation/master/std/#std.meta.c)| `f32`|   
[c](https://ziglang.org/documentation/master/std/#std.meta.c)| `f32`|   
## Functions `pub fn a[](https://ziglang.org/documentation/master/std/#std.meta.a)() void`
`pub fn a[](https://ziglang.org/documentation/master/std/#std.meta.a)() void`
`pub fn a[](https://ziglang.org/documentation/master/std/#std.meta.a)() void`
`pub fn a[](https://ziglang.org/documentation/master/std/#std.meta.a)() void`
`pub fn a[](https://ziglang.org/documentation/master/std/#std.meta.a)() void`
`pub fn a[](https://ziglang.org/documentation/master/std/#std.meta.a)() void`
`pub fn a[](https://ziglang.org/documentation/master/std/#std.meta.a)() void`
`pub fn activeTag[](https://ziglang.org/documentation/master/std/#std.meta.activeTag)(u: anytype) Tag[](https://ziglang.org/documentation/master/std/#std.meta.Tag)(@TypeOf(u))`
    
Returns the active tag of a tagged union `pub fn alignment[](https://ziglang.org/documentation/master/std/#std.meta.alignment)(comptime T: type) comptime_int`
    
Returns the alignment of type T. Note that if T is a pointer type the result is different than the one returned by @alignOf(T). If T is a pointer type the alignment of the type it points to is returned. `pub fn containerLayout[](https://ziglang.org/documentation/master/std/#std.meta.containerLayout)(comptime T: type) Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).ContainerLayout[](https://ziglang.org/documentation/master/std/#std.builtin.Type.ContainerLayout)`
`pub fn declList[](https://ziglang.org/documentation/master/std/#std.meta.declList)(comptime Namespace: type, comptime Decl: type) []const *const Decl`
    
Returns a slice of pointers to public declarations of a namespace. `pub fn declarationInfo[](https://ziglang.org/documentation/master/std/#std.meta.declarationInfo)(comptime T: type, comptime decl_name: []const u8) Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).Declaration[](https://ziglang.org/documentation/master/std/#std.builtin.Type.Declaration)`
`pub fn declarations[](https://ziglang.org/documentation/master/std/#std.meta.declarations)(comptime T: type) []const Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).Declaration[](https://ziglang.org/documentation/master/std/#std.builtin.Type.Declaration)`
    
Instead of this function, prefer to use e.g. `@typeInfo(foo).@"struct".decls` directly when you know what kind of type it is. `pub fn eql[](https://ziglang.org/documentation/master/std/#std.meta.eql)(a: anytype, b: @TypeOf(a)) bool`
    
Compares two of any type for equality. Containers that do not support comparison on their own are compared on a field-by-field basis. Pointers are not followed. `pub fn fieldIndex[](https://ziglang.org/documentation/master/std/#std.meta.fieldIndex)(comptime T: type, comptime name: []const u8) ?comptime_int`
    
Given a type and a name, return the field index according to source order. Returns `null` if the field is not found. `pub fn fieldInfo[](https://ziglang.org/documentation/master/std/#std.meta.fieldInfo)(comptime T: type, comptime field: FieldEnum[](https://ziglang.org/documentation/master/std/#std.meta.FieldEnum)(T)) switch (@typeInfo(T)) { .@"struct" => Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).StructField[](https://ziglang.org/documentation/master/std/#std.builtin.Type.StructField), .@"union" => Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).UnionField[](https://ziglang.org/documentation/master/std/#std.builtin.Type.UnionField), .@"enum" => Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).EnumField[](https://ziglang.org/documentation/master/std/#std.builtin.Type.EnumField), .error_set => Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).Error[](https://ziglang.org/documentation/master/std/#std.builtin.Type.Error), else => @compileError("Expected struct, union, error set or enum type, found '" ++ @typeName(T) ++ "'"), }`
`pub fn fieldNames[](https://ziglang.org/documentation/master/std/#std.meta.fieldNames)(comptime T: type) *const [fields[](https://ziglang.org/documentation/master/std/#std.meta.fields)(T).len][:0]const u8`
`pub fn fields[](https://ziglang.org/documentation/master/std/#std.meta.fields)(comptime T: type) switch (@typeInfo(T)) { .@"struct" => []const Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).StructField[](https://ziglang.org/documentation/master/std/#std.builtin.Type.StructField), .@"union" => []const Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).UnionField[](https://ziglang.org/documentation/master/std/#std.builtin.Type.UnionField), .@"enum" => []const Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).EnumField[](https://ziglang.org/documentation/master/std/#std.builtin.Type.EnumField), .error_set => []const Type[](https://ziglang.org/documentation/master/std/#std.builtin.Type).Error[](https://ziglang.org/documentation/master/std/#std.builtin.Type.Error), else => @compileError("Expected struct, union, error set or enum type, found '" ++ @typeName(T) ++ "'"), }`
`pub fn foo[](https://ziglang.org/documentation/master/std/#std.meta.foo)() void`
`pub fn foo[](https://ziglang.org/documentation/master/std/#std.meta.foo)() void`
`pub fn foo[](https://ziglang.org/documentation/master/std/#std.meta.foo)() void`
`pub inline fn hasFn[](https://ziglang.org/documentation/master/std/#std.meta.hasFn)(comptime T: type, comptime name: []const u8) bool`
    
Returns true if a type has a namespace and the namespace contains `name`; `false` otherwise. Result is always comptime-known. `pub inline fn hasMethod[](https://ziglang.org/documentation/master/std/#std.meta.hasMethod)(comptime T: type, comptime name: []const u8) bool`
    
Returns true if a type has a `name` method; `false` otherwise. Result is always comptime-known. `pub inline fn hasUniqueRepresentation[](https://ziglang.org/documentation/master/std/#std.meta.hasUniqueRepresentation)(comptime T: type) bool`
    
True if every value of the type `T` has a unique bit pattern representing it. In other words, `T` has no unused bits and no padding. Result is always comptime-known. `pub fn intToEnum[](https://ziglang.org/documentation/master/std/#std.meta.intToEnum)(comptime EnumTag: type, tag_int: anytype) IntToEnumError[](https://ziglang.org/documentation/master/std/#std.meta.IntToEnumError)!EnumTag`
    
Deprecated: use `std.enums.fromInt[](https://ziglang.org/documentation/master/std/#std.enums.fromInt)` instead and handle null instead of an error. `pub fn isError[](https://ziglang.org/documentation/master/std/#std.meta.isError)(error_union: anytype) bool`
    
Returns whether `error_union` contains an error. `pub inline fn sentinel[](https://ziglang.org/documentation/master/std/#std.meta.sentinel)(comptime T: type) ?Elem[](https://ziglang.org/documentation/master/std/#std.meta.Elem)(T)`
    
Given a type which can have a sentinel e.g. `[:0]u8`, returns the sentinel value, or `null` if there is not one. Types which cannot possibly have a sentinel will be a compile error. Result is always comptime-known. `pub fn stringToEnum[](https://ziglang.org/documentation/master/std/#std.meta.stringToEnum)(comptime T: type, str: []const u8) ?T`
    
Returns the variant of an enum type, `T`, which is named `str`, or `null` if no such variant exists. `pub fn tags[](https://ziglang.org/documentation/master/std/#std.meta.tags)(comptime T: type) *const [fields[](https://ziglang.org/documentation/master/std/#std.meta.fields)(T).len]T`
    
Given an enum or error set type, returns a pointer to an array containing all tags for that enum or error set.
## Error Sets
  * [IntToEnumError](https://ziglang.org/documentation/master/std/#std.meta.IntToEnumError)


## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
