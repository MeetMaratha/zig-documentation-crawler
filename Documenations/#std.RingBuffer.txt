[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [RingBuffer](https://ziglang.org/documentation/master/std/#std.RingBuffer)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/RingBuffer.zig)
This ring buffer stores read and write indices while being able to utilise the full backing slice by incrementing the indices modulo twice the slice's length and reducing indices modulo the slice's length on slice access. This means that whether the ring buffer is full or empty can be distinguished by looking at the difference between the read and write indices without adding an extra boolean flag or having to reserve a slot in the buffer.
This ring buffer has not been implemented with thread safety in mind, and therefore should not be assumed to be suitable for use cases involving separate reader and writer threads.
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
data: []u8
```

```
read_index: usize
```

```
write_index: usize
```

## Types
  * [Slice](https://ziglang.org/documentation/master/std/#std.RingBuffer.Slice)


## Namespaces
## Global Variables
## Values
## Functions `pub fn deinit[](https://ziglang.org/documentation/master/std/#std.RingBuffer.deinit)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), allocator: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) void`
    
Free the data backing a `RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer)`; must be passed the same `Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)` as `init()`. `pub fn init[](https://ziglang.org/documentation/master/std/#std.RingBuffer.init)(allocator: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), capacity: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer)`
    
Allocate a new `RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer)`; `deinit()` should be called to free the buffer. `pub fn isEmpty[](https://ziglang.org/documentation/master/std/#std.RingBuffer.isEmpty)(self: RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer)) bool`
    
Returns `true` if the ring buffer is empty and `false` otherwise. `pub fn isFull[](https://ziglang.org/documentation/master/std/#std.RingBuffer.isFull)(self: RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer)) bool`
    
Returns `true` if the ring buffer is full and `false` otherwise. `pub fn len[](https://ziglang.org/documentation/master/std/#std.RingBuffer.len)(self: RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer)) usize`
    
Returns the length of data available for reading `pub fn mask[](https://ziglang.org/documentation/master/std/#std.RingBuffer.mask)(self: RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), index: usize) usize`
    
Returns `index` modulo the length of the backing slice. `pub fn mask2[](https://ziglang.org/documentation/master/std/#std.RingBuffer.mask2)(self: RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), index: usize) usize`
    
Returns `index` modulo twice the length of the backing slice. `pub fn read[](https://ziglang.org/documentation/master/std/#std.RingBuffer.read)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer)) ?u8`
    
Consume a byte from the ring buffer and return it. Returns `null` if the ring buffer is empty. `pub fn readAssumeLength[](https://ziglang.org/documentation/master/std/#std.RingBuffer.readAssumeLength)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer)) u8`
    
Consume a byte from the ring buffer and return it; asserts that the buffer is not empty. `pub fn readFirst[](https://ziglang.org/documentation/master/std/#std.RingBuffer.readFirst)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), dest: []u8, length: usize) Error[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Error)!void`
    
Reads first `length` bytes written to the ring buffer into `dest`; Returns Error.ReadLengthInvalid if length greater than ring or dest length Uses memcpy and so `dest` must not overlap ring buffer data. `pub fn readFirstAssumeLength[](https://ziglang.org/documentation/master/std/#std.RingBuffer.readFirstAssumeLength)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), dest: []u8, length: usize) void`
    
Reads first `length` bytes written to the ring buffer into `dest`; Asserts that length not greater than ring buffer or dest length Uses memcpy and so `dest` must not overlap ring buffer data. `pub fn readLast[](https://ziglang.org/documentation/master/std/#std.RingBuffer.readLast)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), dest: []u8, length: usize) Error[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Error)!void`
    
Reads last `length` bytes written to the ring buffer into `dest`; Returns Error.ReadLengthInvalid if length greater than ring or dest length Uses memcpy and so `dest` must not overlap ring buffer data. Reduces write index by `length`. `pub fn readLastAssumeLength[](https://ziglang.org/documentation/master/std/#std.RingBuffer.readLastAssumeLength)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), dest: []u8, length: usize) void`
    
Reads last `length` bytes written to the ring buffer into `dest`; Asserts that length not greater than ring buffer or dest length Uses memcpy and so `dest` must not overlap ring buffer data. Reduces write index by `length`. `pub fn sliceAt[](https://ziglang.org/documentation/master/std/#std.RingBuffer.sliceAt)(self: RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), start_unmasked: usize, length: usize) Slice[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Slice)`
    
Returns a `Slice[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Slice)` for the region of the ring buffer starting at `self.mask(start_unmasked)` with the specified length. `pub fn sliceLast[](https://ziglang.org/documentation/master/std/#std.RingBuffer.sliceLast)(self: RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), length: usize) Slice[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Slice)`
    
Returns a `Slice[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Slice)` for the last `length` bytes written to the ring buffer. Does not check that any bytes have been written into the region. `pub fn write[](https://ziglang.org/documentation/master/std/#std.RingBuffer.write)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), byte: u8) Error[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Error)!void`
    
Write `byte` into the ring buffer. Returns `error.Full` if the ring buffer is full. `pub fn writeAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.RingBuffer.writeAssumeCapacity)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), byte: u8) void`
    
Write `byte` into the ring buffer. If the ring buffer is full, the oldest byte is overwritten. `pub fn writeSlice[](https://ziglang.org/documentation/master/std/#std.RingBuffer.writeSlice)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), bytes: []const u8) Error[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Error)!void`
    
Write `bytes` into the ring buffer. Returns `error.Full` if the ring buffer does not have enough space, without writing any data. Uses memcpy and so `bytes` must not overlap ring buffer data. `pub fn writeSliceAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.RingBuffer.writeSliceAssumeCapacity)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), bytes: []const u8) void`
    
Write `bytes` into the ring buffer. If there is not enough space, older bytes will be overwritten. Uses memcpy and so `bytes` must not overlap ring buffer data. `pub fn writeSliceForwards[](https://ziglang.org/documentation/master/std/#std.RingBuffer.writeSliceForwards)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), bytes: []const u8) Error[](https://ziglang.org/documentation/master/std/#std.RingBuffer.Error)!void`
    
Write `bytes` into the ring buffer. Returns `error.Full` if the ring buffer does not have enough space, without writing any data. Uses copyForwards and can write slices from this RingBuffer into itself. `pub fn writeSliceForwardsAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.RingBuffer.writeSliceForwardsAssumeCapacity)(self: *RingBuffer[](https://ziglang.org/documentation/master/std/#std.RingBuffer), bytes: []const u8) void`
    
Write `bytes` into the ring buffer. If there is not enough space, older bytes will be overwritten. Uses copyForwards and can write slices from this RingBuffer into itself.
## Error Sets
  * [Error](https://ziglang.org/documentation/master/std/#std.RingBuffer.Error)


## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
