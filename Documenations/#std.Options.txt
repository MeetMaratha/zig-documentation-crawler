[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [Options](https://ziglang.org/documentation/master/std/#std.Options)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/std.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
enable_segfault_handler: bool = debug[](https://ziglang.org/documentation/master/std/#std.debug).default_enable_segfault_handler[](https://ziglang.org/documentation/master/std/#std.debug.default_enable_segfault_handler)
```

```
wasiCwd: fn () os[](https://ziglang.org/documentation/master/std/#std.os).wasi[](https://ziglang.org/documentation/master/std/#std.os.wasi).fd_t[](https://ziglang.org/documentation/master/std/#std.os.wasi.fd_t) = fs[](https://ziglang.org/documentation/master/std/#std.fs).defaultWasiCwd[](https://ziglang.org/documentation/master/std/#std.fs.defaultWasiCwd)
```

Function used to implement `std.fs.cwd` for WASI.
```
log_level: log[](https://ziglang.org/documentation/master/std/#std.log).Level[](https://ziglang.org/documentation/master/std/#std.log.Level) = log[](https://ziglang.org/documentation/master/std/#std.log).default_level[](https://ziglang.org/documentation/master/std/#std.log.default_level)
```

The current log level.
```
log_scope_levels: []const log[](https://ziglang.org/documentation/master/std/#std.log).ScopeLevel[](https://ziglang.org/documentation/master/std/#std.log.ScopeLevel) = &.{}
```

```
logFn: fn (
  comptime message_level: log[](https://ziglang.org/documentation/master/std/#std.log).Level[](https://ziglang.org/documentation/master/std/#std.log.Level),
  comptime scope: @TypeOf(.enum_literal),
  comptime format: []const u8,
  args: anytype,
) void = log[](https://ziglang.org/documentation/master/std/#std.log).defaultLog[](https://ziglang.org/documentation/master/std/#std.log.defaultLog)
```

```
page_size_min: ?usize = null
```

Overrides `std.heap.page_size_min`.
```
page_size_max: ?usize = null
```

Overrides `std.heap.page_size_max`.
```
queryPageSize: fn () usize = heap[](https://ziglang.org/documentation/master/std/#std.heap).defaultQueryPageSize[](https://ziglang.org/documentation/master/std/#std.heap.defaultQueryPageSize)
```

Overrides default implementation for determining OS page size at runtime.
```
fmt_max_depth: usize = fmt[](https://ziglang.org/documentation/master/std/#std.fmt).default_max_depth[](https://ziglang.org/documentation/master/std/#std.fmt.default_max_depth)
```

```
cryptoRandomSeed: fn (buffer: []u8) void = @import("crypto/tlcsprng.zig").defaultRandomSeed
```

```
crypto_always_getrandom: bool = false
```

```
crypto_fork_safety: bool = true
```

```
keep_sigpipe: bool = false
```

By default Zig disables SIGPIPE by setting a "no-op" handler for it. Set this option to `true` to prevent that.
Note that we use a "no-op" handler instead of SIG_IGN because it will not be inherited by any child process.
SIGPIPE is triggered when a process attempts to write to a broken pipe. By default, SIGPIPE will terminate the process instead of exiting. It doesn't trigger the panic handler so in many cases it's unclear why the process was terminated. By capturing SIGPIPE instead, functions that write to broken pipes will return the EPIPE error (error.BrokenPipe) and the program can handle it like any other error.
```
http_disable_tls: bool = false
```

By default, std.http.Client will support HTTPS connections. Set this option to `true` to disable TLS support.
This will likely reduce the size of the binary, but it will also make it impossible to make a HTTPS connection.
```
http_enable_ssl_key_log_file: bool = @import("builtin").mode == .Debug
```

This enables `std.http.Client` to log ssl secrets to the file specified by the SSLKEYLOGFILE env var. Creating such a log file allows other programs with access to that file to decrypt all `std.http.Client` traffic made by this program.
```
side_channels_mitigations: crypto[](https://ziglang.org/documentation/master/std/#std.crypto).SideChannelsMitigations[](https://ziglang.org/documentation/master/std/#std.crypto.SideChannelsMitigations) = crypto[](https://ziglang.org/documentation/master/std/#std.crypto).default_side_channels_mitigations[](https://ziglang.org/documentation/master/std/#std.crypto.default_side_channels_mitigations)
```

## Types
## Namespaces
## Global Variables
## Values
## Functions
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
