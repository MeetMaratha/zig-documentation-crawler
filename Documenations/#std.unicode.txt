[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [unicode](https://ziglang.org/documentation/master/std/#std.unicode)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/unicode.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [Utf16LeIterator](https://ziglang.org/documentation/master/std/#std.unicode.Utf16LeIterator)
  * [Utf8Iterator](https://ziglang.org/documentation/master/std/#std.unicode.Utf8Iterator)
  * [Utf8View](https://ziglang.org/documentation/master/std/#std.unicode.Utf8View)
  * [Wtf16LeIterator](https://ziglang.org/documentation/master/std/#std.unicode.Wtf16LeIterator)
  * [Wtf8Iterator](https://ziglang.org/documentation/master/std/#std.unicode.Wtf8Iterator)
  * [Wtf8View](https://ziglang.org/documentation/master/std/#std.unicode.Wtf8View)


## Namespaces
## Global Variables
## Values
[fmtUtf16le](https://ziglang.org/documentation/master/std/#std.unicode.fmtUtf16le)| |   
---|---|---  
[replacement_character](https://ziglang.org/documentation/master/std/#std.unicode.replacement_character)| `u21`| Use this to replace an unknown, unrecognized, or unrepresentable character.  
[utf16leToUtf8](https://ziglang.org/documentation/master/std/#std.unicode.utf16leToUtf8)| |   
[utf16leToUtf8Alloc](https://ziglang.org/documentation/master/std/#std.unicode.utf16leToUtf8Alloc)| |   
[utf16leToUtf8AllocZ](https://ziglang.org/documentation/master/std/#std.unicode.utf16leToUtf8AllocZ)| |   
[utf8ToUtf16LeWithNull](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16LeWithNull)| |   
## Functions `pub fn calcUtf16LeLen[](https://ziglang.org/documentation/master/std/#std.unicode.calcUtf16LeLen)(utf8: []const u8) CalcUtf16LeLenError[](https://ziglang.org/documentation/master/std/#std.unicode.CalcUtf16LeLenError)!usize`
    
Returns length in UTF-16LE of UTF-8 slice as length of []u16. Length in []u8 is 2*len16. `pub fn calcUtf16LeLenImpl[](https://ziglang.org/documentation/master/std/#std.unicode.calcUtf16LeLenImpl)(utf8: []const u8, comptime surrogates: Surrogates[](https://ziglang.org/documentation/master/std/#std.unicode.Surrogates)) !usize`
`pub fn calcWtf16LeLen[](https://ziglang.org/documentation/master/std/#std.unicode.calcWtf16LeLen)(wtf8: []const u8) CalcWtf16LeLenError[](https://ziglang.org/documentation/master/std/#std.unicode.CalcWtf16LeLenError)!usize`
    
Returns length in WTF-16LE of WTF-8 slice as length of []u16. Length in []u8 is 2*len16. `pub fn calcWtf8Len[](https://ziglang.org/documentation/master/std/#std.unicode.calcWtf8Len)(wtf16le: []const u16) usize`
    
Returns the length, in bytes, that would be necessary to encode the given WTF-16 LE slice as WTF-8. `pub fn checkUtf8ToUtf16LeOverflow[](https://ziglang.org/documentation/master/std/#std.unicode.checkUtf8ToUtf16LeOverflow)(utf8: []const u8, utf16le: []const u16) error{InvalidUtf8}!bool`
    
Checks if calling `utf8ToUtf16Le[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16Le)` would overflow. Might fail if utf8 is not valid UTF-8. `pub fn checkWtf8ToWtf16LeOverflow[](https://ziglang.org/documentation/master/std/#std.unicode.checkWtf8ToWtf16LeOverflow)(wtf8: []const u8, wtf16le: []const u16) error{InvalidWtf8}!bool`
    
Checks if calling `utf8ToUtf16Le[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16Le)` would overflow. Might fail if wtf8 is not valid WTF-8. `pub fn fmtUtf16Le[](https://ziglang.org/documentation/master/std/#std.unicode.fmtUtf16Le)(utf16le: []const u16) std[](https://ziglang.org/documentation/master/std/#std).fmt[](https://ziglang.org/documentation/master/std/#std.fmt).Formatter[](https://ziglang.org/documentation/master/std/#std.fmt.Formatter)(formatUtf16Le[](https://ziglang.org/documentation/master/std/#std.unicode.formatUtf16Le))`
    
Return a Formatter for a (potentially ill-formed) UTF-16 LE string, which will be converted to UTF-8 during formatting. Unpaired surrogates are replaced by the replacement character (U+FFFD). `pub fn fmtUtf8[](https://ziglang.org/documentation/master/std/#std.unicode.fmtUtf8)(utf8: []const u8) std[](https://ziglang.org/documentation/master/std/#std).fmt[](https://ziglang.org/documentation/master/std/#std.fmt).Formatter[](https://ziglang.org/documentation/master/std/#std.fmt.Formatter)(formatUtf8[](https://ziglang.org/documentation/master/std/#std.unicode.formatUtf8))`
    
Return a Formatter for a (potentially ill-formed) UTF-8 string. Ill-formed UTF-8 byte sequences are replaced by the replacement character (U+FFFD) according to "U+FFFD Substitution of Maximal Subparts" from Chapter 3 of the Unicode standard, and as specified by <https://encoding.spec.whatwg.org/#utf-8-decoder> `pub fn isSurrogateCodepoint[](https://ziglang.org/documentation/master/std/#std.unicode.isSurrogateCodepoint)(c: u21) bool`
    
Returns true if the codepoint is a surrogate (U+DC00 to U+DFFF) `pub fn utf16CodeUnitSequenceLength[](https://ziglang.org/documentation/master/std/#std.unicode.utf16CodeUnitSequenceLength)(first_code_unit: u16) !u2`
    
Given the first code unit of a UTF-16 codepoint, returns a number 1-2 indicating the total length of the codepoint in UTF-16 code units. If this code unit does not match the form of a UTF-16 start code unit, returns Utf16InvalidStartCodeUnit. `pub fn utf16CodepointSequenceLength[](https://ziglang.org/documentation/master/std/#std.unicode.utf16CodepointSequenceLength)(c: u21) !u2`
    
Returns how many code units the UTF-16 representation would require for the given codepoint. `pub fn utf16CountCodepoints[](https://ziglang.org/documentation/master/std/#std.unicode.utf16CountCodepoints)(utf16le: []const u16) !usize`
    
Returns the length of a supplied UTF-16 string literal in terms of unicode codepoints. `pub fn utf16DecodeSurrogatePair[](https://ziglang.org/documentation/master/std/#std.unicode.utf16DecodeSurrogatePair)(surrogate_pair: []const u16) !u21`
    
Decodes the codepoint encoded in the given pair of UTF-16 code units. Asserts that `surrogate_pair.len >= 2` and that the first code unit is a high surrogate. If the second code unit is not a low surrogate, error.ExpectedSecondSurrogateHalf is returned. `pub fn utf16IsHighSurrogate[](https://ziglang.org/documentation/master/std/#std.unicode.utf16IsHighSurrogate)(c: u16) bool`
`pub fn utf16IsLowSurrogate[](https://ziglang.org/documentation/master/std/#std.unicode.utf16IsLowSurrogate)(c: u16) bool`
`pub fn utf16LeToUtf8[](https://ziglang.org/documentation/master/std/#std.unicode.utf16LeToUtf8)(utf8: []u8, utf16le: []const u16) Utf16LeToUtf8Error[](https://ziglang.org/documentation/master/std/#std.unicode.Utf16LeIterator.NextCodepointError)!usize`
`pub fn utf16LeToUtf8Alloc[](https://ziglang.org/documentation/master/std/#std.unicode.utf16LeToUtf8Alloc)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), utf16le: []const u16) Utf16LeToUtf8AllocError[](https://ziglang.org/documentation/master/std/#std.unicode.Utf16LeToUtf8AllocError)![]u8`
    
Caller must free returned memory. `pub fn utf16LeToUtf8AllocZ[](https://ziglang.org/documentation/master/std/#std.unicode.utf16LeToUtf8AllocZ)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), utf16le: []const u16) Utf16LeToUtf8AllocError[](https://ziglang.org/documentation/master/std/#std.unicode.Utf16LeToUtf8AllocError)![:0]u8`
    
Caller must free returned memory. `pub fn utf16LeToUtf8ArrayList[](https://ziglang.org/documentation/master/std/#std.unicode.utf16LeToUtf8ArrayList)(result: *std[](https://ziglang.org/documentation/master/std/#std).ArrayList[](https://ziglang.org/documentation/master/std/#std.ArrayList)(u8), utf16le: []const u16) Utf16LeToUtf8AllocError[](https://ziglang.org/documentation/master/std/#std.unicode.Utf16LeToUtf8AllocError)!void`
`pub fn utf8ByteSequenceLength[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ByteSequenceLength)(first_byte: u8) !u3`
    
Given the first byte of a UTF-8 codepoint, returns a number 1-4 indicating the total length of the codepoint in bytes. If this byte does not match the form of a UTF-8 start byte, returns Utf8InvalidStartByte. `pub fn utf8CodepointSequenceLength[](https://ziglang.org/documentation/master/std/#std.unicode.utf8CodepointSequenceLength)(c: u21) !u3`
    
Returns how many bytes the UTF-8 representation would require for the given codepoint. `pub fn utf8CountCodepoints[](https://ziglang.org/documentation/master/std/#std.unicode.utf8CountCodepoints)(s: []const u8) !usize`
    
Returns the length of a supplied UTF-8 string literal in terms of unicode codepoints. `pub fn utf8Decode[](https://ziglang.org/documentation/master/std/#std.unicode.utf8Decode)(bytes: []const u8) Utf8DecodeError[](https://ziglang.org/documentation/master/std/#std.unicode.Utf8DecodeError)!u21`
    
Deprecated. This function has an awkward API that is too easy to use incorrectly. `pub fn utf8Decode2[](https://ziglang.org/documentation/master/std/#std.unicode.utf8Decode2)(bytes: [2]u8) Utf8Decode2Error[](https://ziglang.org/documentation/master/std/#std.unicode.Utf8Decode2Error)!u21`
`pub fn utf8Decode3[](https://ziglang.org/documentation/master/std/#std.unicode.utf8Decode3)(bytes: [3]u8) Utf8Decode3Error[](https://ziglang.org/documentation/master/std/#std.unicode.Utf8Decode3Error)!u21`
`pub fn utf8Decode3AllowSurrogateHalf[](https://ziglang.org/documentation/master/std/#std.unicode.utf8Decode3AllowSurrogateHalf)(bytes: [3]u8) Utf8Decode3AllowSurrogateHalfError[](https://ziglang.org/documentation/master/std/#std.unicode.Utf8Decode3AllowSurrogateHalfError)!u21`
`pub fn utf8Decode4[](https://ziglang.org/documentation/master/std/#std.unicode.utf8Decode4)(bytes: [4]u8) Utf8Decode4Error[](https://ziglang.org/documentation/master/std/#std.unicode.Utf8Decode4Error)!u21`
`pub fn utf8Encode[](https://ziglang.org/documentation/master/std/#std.unicode.utf8Encode)(c: u21, out: []u8) error{ Utf8CannotEncodeSurrogateHalf, CodepointTooLarge }!u3`
    
Encodes the given codepoint into a UTF-8 byte sequence. c: the codepoint. out: the out buffer to write to. Must have a len >= utf8CodepointSequenceLength(c). Errors: if c cannot be encoded in UTF-8. Returns: the number of bytes written to out. `pub inline fn utf8EncodeComptime[](https://ziglang.org/documentation/master/std/#std.unicode.utf8EncodeComptime)(comptime c: u21) [ utf8CodepointSequenceLength[](https://ziglang.org/documentation/master/std/#std.unicode.utf8CodepointSequenceLength)(c) catch |err| @compileError(@errorName(err)) ]u8`
`pub fn utf8ToUtf16Le[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16Le)(utf16le: []u16, utf8: []const u8) error{InvalidUtf8}!usize`
    
Returns index of next character. If exact fit, returned index equals output slice length. Assumes there is enough space for the output. `pub fn utf8ToUtf16LeAlloc[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16LeAlloc)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), utf8: []const u8) error{ InvalidUtf8, OutOfMemory }![]u16`
`pub fn utf8ToUtf16LeAllocZ[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16LeAllocZ)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), utf8: []const u8) error{ InvalidUtf8, OutOfMemory }![:0]u16`
`pub fn utf8ToUtf16LeArrayList[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16LeArrayList)(result: *std[](https://ziglang.org/documentation/master/std/#std).ArrayList[](https://ziglang.org/documentation/master/std/#std.ArrayList)(u16), utf8: []const u8) error{ InvalidUtf8, OutOfMemory }!void`
`pub fn utf8ToUtf16LeImpl[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16LeImpl)(utf16le: []u16, utf8: []const u8, comptime surrogates: Surrogates[](https://ziglang.org/documentation/master/std/#std.unicode.Surrogates)) !usize`
`pub fn utf8ToUtf16LeStringLiteral[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ToUtf16LeStringLiteral)(comptime utf8: []const u8) *const [calcUtf16LeLen[](https://ziglang.org/documentation/master/std/#std.unicode.calcUtf16LeLen)(utf8) catch |err| @compileError(err):0]u16`
    
Converts a UTF-8 string literal into a UTF-16LE string literal. `pub fn utf8ValidCodepoint[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ValidCodepoint)(value: u21) bool`
    
Returns true if the given unicode codepoint can be encoded in UTF-8. `pub fn utf8ValidateSlice[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ValidateSlice)(input: []const u8) bool`
    
Returns true if the input consists entirely of UTF-8 codepoints `pub fn wtf16LeToWtf8[](https://ziglang.org/documentation/master/std/#std.unicode.wtf16LeToWtf8)(wtf8: []u8, wtf16le: []const u16) usize`
`pub fn wtf16LeToWtf8Alloc[](https://ziglang.org/documentation/master/std/#std.unicode.wtf16LeToWtf8Alloc)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), wtf16le: []const u16) mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)![]u8`
    
Caller must free returned memory. `pub fn wtf16LeToWtf8AllocZ[](https://ziglang.org/documentation/master/std/#std.unicode.wtf16LeToWtf8AllocZ)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), wtf16le: []const u16) mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)![:0]u8`
    
Caller must free returned memory. `pub fn wtf16LeToWtf8ArrayList[](https://ziglang.org/documentation/master/std/#std.unicode.wtf16LeToWtf8ArrayList)(result: *std[](https://ziglang.org/documentation/master/std/#std).ArrayList[](https://ziglang.org/documentation/master/std/#std.ArrayList)(u8), utf16le: []const u16) mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
`pub fn wtf8Decode[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8Decode)(bytes: []const u8) Wtf8DecodeError[](https://ziglang.org/documentation/master/std/#std.unicode.Wtf8DecodeError)!u21`
    
Deprecated. This function has an awkward API that is too easy to use incorrectly. `pub fn wtf8Encode[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8Encode)(c: u21, out: []u8) error{CodepointTooLarge}!u3`
    
Encodes the given codepoint into a WTF-8 byte sequence. c: the codepoint. out: the out buffer to write to. Must have a len >= utf8CodepointSequenceLength(c). Errors: if c cannot be encoded in WTF-8. Returns: the number of bytes written to out. `pub fn wtf8ToUtf8Lossy[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ToUtf8Lossy)(utf8: []u8, wtf8: []const u8) error{InvalidWtf8}!void`
    
Surrogate codepoints (U+D800 to U+DFFF) are replaced by the Unicode replacement character (U+FFFD). All surrogate codepoints and the replacement character are encoded as three bytes, meaning the input and output slices will always be the same length. In-place conversion is supported when `utf8` and `wtf8` refer to the same slice. Note: If `wtf8` is entirely composed of well-formed UTF-8, then no conversion is necessary. `utf8ValidateSlice[](https://ziglang.org/documentation/master/std/#std.unicode.utf8ValidateSlice)` can be used to check if lossy conversion is worthwhile. If `wtf8` is not valid WTF-8, then `error.InvalidWtf8` is returned. `pub fn wtf8ToUtf8LossyAlloc[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ToUtf8LossyAlloc)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), wtf8: []const u8) error{ InvalidWtf8, OutOfMemory }![]u8`
`pub fn wtf8ToUtf8LossyAllocZ[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ToUtf8LossyAllocZ)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), wtf8: []const u8) error{ InvalidWtf8, OutOfMemory }![:0]u8`
`pub fn wtf8ToWtf16Le[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ToWtf16Le)(wtf16le: []u16, wtf8: []const u8) error{InvalidWtf8}!usize`
    
Returns index of next character. If exact fit, returned index equals output slice length. Assumes there is enough space for the output. `pub fn wtf8ToWtf16LeAlloc[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ToWtf16LeAlloc)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), wtf8: []const u8) error{ InvalidWtf8, OutOfMemory }![]u16`
`pub fn wtf8ToWtf16LeAllocZ[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ToWtf16LeAllocZ)(allocator: mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), wtf8: []const u8) error{ InvalidWtf8, OutOfMemory }![:0]u16`
`pub fn wtf8ToWtf16LeArrayList[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ToWtf16LeArrayList)(result: *std[](https://ziglang.org/documentation/master/std/#std).ArrayList[](https://ziglang.org/documentation/master/std/#std.ArrayList)(u16), wtf8: []const u8) error{ InvalidWtf8, OutOfMemory }!void`
`pub fn wtf8ToWtf16LeStringLiteral[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ToWtf16LeStringLiteral)(comptime wtf8: []const u8) *const [calcWtf16LeLen[](https://ziglang.org/documentation/master/std/#std.unicode.calcWtf16LeLen)(wtf8) catch |err| @compileError(err):0]u16`
    
Converts a WTF-8 string literal into a WTF-16LE string literal. `pub fn wtf8ValidateSlice[](https://ziglang.org/documentation/master/std/#std.unicode.wtf8ValidateSlice)(input: []const u8) bool`
    
Returns true if the input consists entirely of WTF-8 codepoints (all the same restrictions as UTF-8, but allows surrogate codepoints U+D800 to U+DFFF). Does not check for well-formed WTF-8, meaning that this function does not check that all surrogate halves are unpaired.
## Error Sets
  * [Utf16LeToUtf8AllocError](https://ziglang.org/documentation/master/std/#std.unicode.Utf16LeToUtf8AllocError)
  * [Utf16LeToUtf8Error](https://ziglang.org/documentation/master/std/#std.unicode.Utf16LeIterator.NextCodepointError)


## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
