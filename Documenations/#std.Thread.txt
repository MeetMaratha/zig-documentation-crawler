[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [Thread](https://ziglang.org/documentation/master/std/#std.Thread)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/Thread.zig)
This struct represents a kernel thread, and acts as a namespace for concurrency primitives that operate on kernel threads. For concurrency primitives that support both evented I/O and async I/O, see the respective names in the top level std namespace.
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
impl: Impl[](https://ziglang.org/documentation/master/std/#std.Thread.Impl)
```

## Types
  * [Condition](https://ziglang.org/documentation/master/std/#std.Thread.Condition)
  * [Id](https://ziglang.org/documentation/master/std/#std.Thread.Id)
  * [Mutex](https://ziglang.org/documentation/master/std/#std.Thread.Mutex)
  * [Pool](https://ziglang.org/documentation/master/std/#std.Thread.Pool)
  * [ResetEvent](https://ziglang.org/documentation/master/std/#std.Thread.ResetEvent)
  * [RwLock](https://ziglang.org/documentation/master/std/#std.Thread.RwLock)
  * [Semaphore](https://ziglang.org/documentation/master/std/#std.Thread.Semaphore)
  * [SpawnConfig](https://ziglang.org/documentation/master/std/#std.Thread.SpawnConfig)
  * [WaitGroup](https://ziglang.org/documentation/master/std/#std.Thread.WaitGroup)


## Namespaces
  * [Futex](https://ziglang.org/documentation/master/std/#std.Thread.Futex)


## Global Variables
## Values
[Handle](https://ziglang.org/documentation/master/std/#std.Thread.Handle)| | Represents a kernel thread handle. May be an integer or a pointer depending on the platform.  
---|---|---  
[max_name_len](https://ziglang.org/documentation/master/std/#std.Thread.max_name_len)| |   
[use_pthreads](https://ziglang.org/documentation/master/std/#std.Thread.use_pthreads)| |   
## Functions `pub fn detach[](https://ziglang.org/documentation/master/std/#std.Thread.detach)(self: Thread[](https://ziglang.org/documentation/master/std/#std.Thread)) void`
    
Release the obligation of the caller to call `join()` and have the thread clean up its own resources on completion. Once called, this consumes the Thread object and invoking any other functions on it is considered undefined behavior. `pub fn getCpuCount[](https://ziglang.org/documentation/master/std/#std.Thread.getCpuCount)() CpuCountError[](https://ziglang.org/documentation/master/std/#std.Thread.CpuCountError)!usize`
    
Returns the platforms view on the number of logical CPU cores available. `pub fn getCurrentId[](https://ziglang.org/documentation/master/std/#std.Thread.getCurrentId)() Id[](https://ziglang.org/documentation/master/std/#std.Thread.Id)`
    
Returns the platform ID of the callers thread. Attempts to use thread locals and avoid syscalls when possible. `pub fn getHandle[](https://ziglang.org/documentation/master/std/#std.Thread.getHandle)(self: Thread[](https://ziglang.org/documentation/master/std/#std.Thread)) Handle[](https://ziglang.org/documentation/master/std/#std.Thread.Handle)`
    
Returns the handle of this thread `pub fn getName[](https://ziglang.org/documentation/master/std/#std.Thread.getName)(self: Thread[](https://ziglang.org/documentation/master/std/#std.Thread), buffer_ptr: *[max_name_len[](https://ziglang.org/documentation/master/std/#std.Thread.max_name_len):0]u8) GetNameError[](https://ziglang.org/documentation/master/std/#std.Thread.GetNameError)!?[]const u8`
    
On Windows, the result is encoded as [WTF-8](https://simonsapin.github.io/wtf-8/). On other platforms, the result is an opaque sequence of bytes with no particular encoding. `pub fn join[](https://ziglang.org/documentation/master/std/#std.Thread.join)(self: Thread[](https://ziglang.org/documentation/master/std/#std.Thread)) void`
    
Waits for the thread to complete, then deallocates any resources created on `spawn()`. Once called, this consumes the Thread object and invoking any other functions on it is considered undefined behavior. `pub fn run[](https://ziglang.org/documentation/master/std/#std.Thread.run)(ctx: *@This()) !void`
`pub fn setName[](https://ziglang.org/documentation/master/std/#std.Thread.setName)(self: Thread[](https://ziglang.org/documentation/master/std/#std.Thread), name: []const u8) SetNameError[](https://ziglang.org/documentation/master/std/#std.Thread.SetNameError)!void`
`pub fn sleep[](https://ziglang.org/documentation/master/std/#std.Thread.sleep)(nanoseconds: u64) void`
    
Spurious wakeups are possible and no precision of timing is guaranteed. `pub fn spawn[](https://ziglang.org/documentation/master/std/#std.Thread.spawn)(config: SpawnConfig[](https://ziglang.org/documentation/master/std/#std.Thread.SpawnConfig), comptime function: anytype, args: anytype) SpawnError[](https://ziglang.org/documentation/master/std/#std.Thread.SpawnError)!Thread[](https://ziglang.org/documentation/master/std/#std.Thread)`
    
Spawns a new thread which executes `function` using `args` and returns a handle to the spawned thread. `config` can be used as hints to the platform for how to spawn and execute the `function`. The caller must eventually either call `join()` to wait for the thread to finish and free its resources or call `detach()` to excuse the caller from calling `join()` and have the thread clean up its resources on completion. `pub fn yield[](https://ziglang.org/documentation/master/std/#std.Thread.yield)() YieldError[](https://ziglang.org/documentation/master/std/#std.Thread.YieldError)!void`
    
Yields the current thread potentially allowing other threads to run.
## Error Sets
  * [CpuCountError](https://ziglang.org/documentation/master/std/#std.Thread.CpuCountError)
  * [GetNameError](https://ziglang.org/documentation/master/std/#std.Thread.GetNameError)
  * [SetNameError](https://ziglang.org/documentation/master/std/#std.Thread.SetNameError)
  * [SpawnError](https://ziglang.org/documentation/master/std/#std.Thread.SpawnError)
  * [YieldError](https://ziglang.org/documentation/master/std/#std.Thread.YieldError)


## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
