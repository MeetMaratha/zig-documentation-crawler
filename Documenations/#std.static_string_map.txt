[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [static_string_map](https://ziglang.org/documentation/master/std/#std.static_string_map)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/static_string_map.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [StaticStringMap](https://ziglang.org/documentation/master/std/#std.static_string_map.StaticStringMap)
  * [StaticStringMapWithEql](https://ziglang.org/documentation/master/std/#std.static_string_map.StaticStringMapWithEql)


## Namespaces
## Global Variables
## Values
[foo](https://ziglang.org/documentation/master/std/#std.static_string_map.foo)| |   
---|---|---  
[foo](https://ziglang.org/documentation/master/std/#std.static_string_map.foo)| |   
[foo](https://ziglang.org/documentation/master/std/#std.static_string_map.foo)| |   
## Functions `pub fn defaultEql[](https://ziglang.org/documentation/master/std/#std.static_string_map.defaultEql)(a: []const u8, b: []const u8) bool`
    
Like `std.mem.eql[](https://ziglang.org/documentation/master/std/#std.mem.eql)`, but takes advantage of the fact that the lengths of `a` and `b` are known to be equal. `pub fn eqlAsciiIgnoreCase[](https://ziglang.org/documentation/master/std/#std.static_string_map.eqlAsciiIgnoreCase)(a: []const u8, b: []const u8) bool`
    
Like `std.ascii.eqlIgnoreCase[](https://ziglang.org/documentation/master/std/#std.ascii.eqlIgnoreCase)` but takes advantage of the fact that the lengths of `a` and `b` are known to be equal.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
