[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [macho](https://ziglang.org/documentation/master/std/#std.macho)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/macho.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [BlobIndex](https://ziglang.org/documentation/master/std/#std.macho.BlobIndex)
  * [CodeDirectory](https://ziglang.org/documentation/master/std/#std.macho.CodeDirectory)
  * [CompactUnwindEncoding](https://ziglang.org/documentation/master/std/#std.macho.CompactUnwindEncoding)
  * [GenericBlob](https://ziglang.org/documentation/master/std/#std.macho.GenericBlob)
  * [LC](https://ziglang.org/documentation/master/std/#std.macho.LC)
  * [LoadCommandIterator](https://ziglang.org/documentation/master/std/#std.macho.LoadCommandIterator)
  * [PLATFORM](https://ziglang.org/documentation/master/std/#std.macho.PLATFORM)
  * [SuperBlob](https://ziglang.org/documentation/master/std/#std.macho.SuperBlob)
  * [TOOL](https://ziglang.org/documentation/master/std/#std.macho.TOOL)
  * [UNWIND_ARM64_MODE](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_MODE)
  * [UNWIND_SECOND_LEVEL](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_SECOND_LEVEL)
  * [UNWIND_X86_64_MODE](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_MODE)
  * [UNWIND_X86_64_REG](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_REG)
  * [UnwindInfoCompressedEntry](https://ziglang.org/documentation/master/std/#std.macho.UnwindInfoCompressedEntry)
  * [build_tool_version](https://ziglang.org/documentation/master/std/#std.macho.build_tool_version)
  * [build_version_command](https://ziglang.org/documentation/master/std/#std.macho.build_version_command)
  * [compact_unwind_encoding_t](https://ziglang.org/documentation/master/std/#std.macho.compact_unwind_encoding_t)
  * [compact_unwind_entry](https://ziglang.org/documentation/master/std/#std.macho.compact_unwind_entry)
  * [cpu_subtype_t](https://ziglang.org/documentation/master/std/#std.macho.cpu_subtype_t)
  * [cpu_type_t](https://ziglang.org/documentation/master/std/#std.macho.cpu_type_t)
  * [data_in_code_entry](https://ziglang.org/documentation/master/std/#std.macho.data_in_code_entry)
  * [dyld_info_command](https://ziglang.org/documentation/master/std/#std.macho.dyld_info_command)
  * [dylib](https://ziglang.org/documentation/master/std/#std.macho.dylib)
  * [dylib_command](https://ziglang.org/documentation/master/std/#std.macho.dylib_command)
  * [dylinker_command](https://ziglang.org/documentation/master/std/#std.macho.dylinker_command)
  * [dysymtab_command](https://ziglang.org/documentation/master/std/#std.macho.dysymtab_command)
  * [entry_point_command](https://ziglang.org/documentation/master/std/#std.macho.entry_point_command)
  * [fat_arch](https://ziglang.org/documentation/master/std/#std.macho.fat_arch)
  * [fat_header](https://ziglang.org/documentation/master/std/#std.macho.fat_header)
  * [linkedit_data_command](https://ziglang.org/documentation/master/std/#std.macho.linkedit_data_command)
  * [load_command](https://ziglang.org/documentation/master/std/#std.macho.load_command)
  * [mach_header](https://ziglang.org/documentation/master/std/#std.macho.mach_header)
  * [mach_header_64](https://ziglang.org/documentation/master/std/#std.macho.mach_header_64)
  * [nlist](https://ziglang.org/documentation/master/std/#std.macho.nlist)
  * [nlist_64](https://ziglang.org/documentation/master/std/#std.macho.nlist_64)
  * [reloc_type_arm64](https://ziglang.org/documentation/master/std/#std.macho.reloc_type_arm64)
  * [reloc_type_x86_64](https://ziglang.org/documentation/master/std/#std.macho.reloc_type_x86_64)
  * [relocation_info](https://ziglang.org/documentation/master/std/#std.macho.relocation_info)
  * [rpath_command](https://ziglang.org/documentation/master/std/#std.macho.rpath_command)
  * [section](https://ziglang.org/documentation/master/std/#std.macho.section)
  * [section_64](https://ziglang.org/documentation/master/std/#std.macho.section_64)
  * [segment_command](https://ziglang.org/documentation/master/std/#std.macho.segment_command)
  * [segment_command_64](https://ziglang.org/documentation/master/std/#std.macho.segment_command_64)
  * [source_version_command](https://ziglang.org/documentation/master/std/#std.macho.source_version_command)
  * [symtab_command](https://ziglang.org/documentation/master/std/#std.macho.symtab_command)
  * [unwind_info_compressed_second_level_page_header](https://ziglang.org/documentation/master/std/#std.macho.unwind_info_compressed_second_level_page_header)
  * [unwind_info_regular_second_level_entry](https://ziglang.org/documentation/master/std/#std.macho.unwind_info_regular_second_level_entry)
  * [unwind_info_regular_second_level_page_header](https://ziglang.org/documentation/master/std/#std.macho.unwind_info_regular_second_level_page_header)
  * [unwind_info_section_header](https://ziglang.org/documentation/master/std/#std.macho.unwind_info_section_header)
  * [unwind_info_section_header_index_entry](https://ziglang.org/documentation/master/std/#std.macho.unwind_info_section_header_index_entry)
  * [unwind_info_section_header_lsda_index_entry](https://ziglang.org/documentation/master/std/#std.macho.unwind_info_section_header_lsda_index_entry)
  * [uuid_command](https://ziglang.org/documentation/master/std/#std.macho.uuid_command)
  * [version_min_command](https://ziglang.org/documentation/master/std/#std.macho.version_min_command)
  * [vm_prot_t](https://ziglang.org/documentation/master/std/#std.macho.vm_prot_t)


## Namespaces
  * [PROT](https://ziglang.org/documentation/master/std/#std.macho.PROT)


## Global Variables
## Values
[BIND_IMMEDIATE_MASK](https://ziglang.org/documentation/master/std/#std.macho.BIND_IMMEDIATE_MASK)| `u8`|   
---|---|---  
[BIND_OPCODE_ADD_ADDR_ULEB](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_ADD_ADDR_ULEB)| `u8`|   
[BIND_OPCODE_DONE](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_DONE)| `u8`|   
[BIND_OPCODE_DO_BIND](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_DO_BIND)| `u8`|   
[BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED)| `u8`|   
[BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB)| `u8`|   
[BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB)| `u8`|   
[BIND_OPCODE_MASK](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_MASK)| `u8`|   
[BIND_OPCODE_SET_ADDEND_SLEB](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_SET_ADDEND_SLEB)| `u8`|   
[BIND_OPCODE_SET_DYLIB_ORDINAL_IMM](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_SET_DYLIB_ORDINAL_IMM)| `u8`|   
[BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB)| `u8`|   
[BIND_OPCODE_SET_DYLIB_SPECIAL_IMM](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_SET_DYLIB_SPECIAL_IMM)| `u8`|   
[BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB)| `u8`|   
[BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM)| `u8`|   
[BIND_OPCODE_SET_TYPE_IMM](https://ziglang.org/documentation/master/std/#std.macho.BIND_OPCODE_SET_TYPE_IMM)| `u8`|   
[BIND_SPECIAL_DYLIB_FLAT_LOOKUP](https://ziglang.org/documentation/master/std/#std.macho.BIND_SPECIAL_DYLIB_FLAT_LOOKUP)| `i8`|   
[BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE](https://ziglang.org/documentation/master/std/#std.macho.BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE)| `i8`|   
[BIND_SPECIAL_DYLIB_SELF](https://ziglang.org/documentation/master/std/#std.macho.BIND_SPECIAL_DYLIB_SELF)| `i8`|   
[BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION](https://ziglang.org/documentation/master/std/#std.macho.BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION)| `u8`|   
[BIND_SYMBOL_FLAGS_WEAK_IMPORT](https://ziglang.org/documentation/master/std/#std.macho.BIND_SYMBOL_FLAGS_WEAK_IMPORT)| `u8`|   
[BIND_TYPE_POINTER](https://ziglang.org/documentation/master/std/#std.macho.BIND_TYPE_POINTER)| `u8`|   
[BIND_TYPE_TEXT_ABSOLUTE32](https://ziglang.org/documentation/master/std/#std.macho.BIND_TYPE_TEXT_ABSOLUTE32)| `u8`|   
[BIND_TYPE_TEXT_PCREL32](https://ziglang.org/documentation/master/std/#std.macho.BIND_TYPE_TEXT_PCREL32)| `u8`|   
[CPU_SUBTYPE_ARM_ALL](https://ziglang.org/documentation/master/std/#std.macho.CPU_SUBTYPE_ARM_ALL)| `cpu_subtype_t[](https://ziglang.org/documentation/master/std/#std.macho.cpu_subtype_t)`| All ARM-based Macs  
[CPU_SUBTYPE_X86_64_ALL](https://ziglang.org/documentation/master/std/#std.macho.CPU_SUBTYPE_X86_64_ALL)| `cpu_subtype_t[](https://ziglang.org/documentation/master/std/#std.macho.cpu_subtype_t)`| All Intel-based Macs  
[CPU_TYPE_ARM64](https://ziglang.org/documentation/master/std/#std.macho.CPU_TYPE_ARM64)| `cpu_type_t[](https://ziglang.org/documentation/master/std/#std.macho.cpu_type_t)`| CPU type targeting 64-bit ARM-based Macs  
[CPU_TYPE_X86_64](https://ziglang.org/documentation/master/std/#std.macho.CPU_TYPE_X86_64)| `cpu_type_t[](https://ziglang.org/documentation/master/std/#std.macho.cpu_type_t)`| CPU type targeting 64-bit Intel-based Macs  
[CSMAGIC_BLOBWRAPPER](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_BLOBWRAPPER)| `u32`| CMS Signature, among other things  
[CSMAGIC_CODEDIRECTORY](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_CODEDIRECTORY)| `u32`| CodeDirectory blob  
[CSMAGIC_DETACHED_SIGNATURE](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_DETACHED_SIGNATURE)| `u32`| Multi-arch collection of embedded signatures  
[CSMAGIC_EMBEDDED_DER_ENTITLEMENTS](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_EMBEDDED_DER_ENTITLEMENTS)| `u32`| Embedded DER encoded entitlements  
[CSMAGIC_EMBEDDED_ENTITLEMENTS](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_EMBEDDED_ENTITLEMENTS)| `u32`| Embedded entitlements  
[CSMAGIC_EMBEDDED_SIGNATURE](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_EMBEDDED_SIGNATURE)| `u32`| embedded form of signature data  
[CSMAGIC_EMBEDDED_SIGNATURE_OLD](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_EMBEDDED_SIGNATURE_OLD)| `u32`| XXX  
[CSMAGIC_REQUIREMENT](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_REQUIREMENT)| `u32`| Single Requirement blob  
[CSMAGIC_REQUIREMENTS](https://ziglang.org/documentation/master/std/#std.macho.CSMAGIC_REQUIREMENTS)| `u32`| Requirements vector (internal requirements)  
[CSSLOT_ALTERNATE_CODEDIRECTORIES](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_ALTERNATE_CODEDIRECTORIES)| `u32`| first alternate CodeDirectory, if any  
[CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT)| `u32`| One past the last  
[CSSLOT_ALTERNATE_CODEDIRECTORY_MAX](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_ALTERNATE_CODEDIRECTORY_MAX)| `u32`| Max number of alternate CD slots  
[CSSLOT_APPLICATION](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_APPLICATION)| `u32`|   
[CSSLOT_CODEDIRECTORY](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_CODEDIRECTORY)| `u32`| Slot index for CodeDirectory  
[CSSLOT_DER_ENTITLEMENTS](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_DER_ENTITLEMENTS)| `u32`|   
[CSSLOT_ENTITLEMENTS](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_ENTITLEMENTS)| `u32`|   
[CSSLOT_IDENTIFICATIONSLOT](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_IDENTIFICATIONSLOT)| `u32`|   
[CSSLOT_INFOSLOT](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_INFOSLOT)| `u32`|   
[CSSLOT_REQUIREMENTS](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_REQUIREMENTS)| `u32`|   
[CSSLOT_RESOURCEDIR](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_RESOURCEDIR)| `u32`|   
[CSSLOT_SIGNATURESLOT](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_SIGNATURESLOT)| `u32`| CMS Signature  
[CSSLOT_TICKETSLOT](https://ziglang.org/documentation/master/std/#std.macho.CSSLOT_TICKETSLOT)| `u32`|   
[CSTYPE_INDEX_ENTITLEMENTS](https://ziglang.org/documentation/master/std/#std.macho.CSTYPE_INDEX_ENTITLEMENTS)| `u32`| Compat with amfi  
[CSTYPE_INDEX_REQUIREMENTS](https://ziglang.org/documentation/master/std/#std.macho.CSTYPE_INDEX_REQUIREMENTS)| `u32`| Compat with amfi  
[CS_ADHOC](https://ziglang.org/documentation/master/std/#std.macho.CS_ADHOC)| `u32`|   
[CS_CDHASH_LEN](https://ziglang.org/documentation/master/std/#std.macho.CS_CDHASH_LEN)| `u32`| Always - larger hashes are truncated  
[CS_EXECSEG_MAIN_BINARY](https://ziglang.org/documentation/master/std/#std.macho.CS_EXECSEG_MAIN_BINARY)| `u32`|   
[CS_HASHTYPE_SHA1](https://ziglang.org/documentation/master/std/#std.macho.CS_HASHTYPE_SHA1)| `u8`|   
[CS_HASHTYPE_SHA256](https://ziglang.org/documentation/master/std/#std.macho.CS_HASHTYPE_SHA256)| `u8`|   
[CS_HASHTYPE_SHA256_TRUNCATED](https://ziglang.org/documentation/master/std/#std.macho.CS_HASHTYPE_SHA256_TRUNCATED)| `u8`|   
[CS_HASHTYPE_SHA384](https://ziglang.org/documentation/master/std/#std.macho.CS_HASHTYPE_SHA384)| `u8`|   
[CS_HASH_MAX_SIZE](https://ziglang.org/documentation/master/std/#std.macho.CS_HASH_MAX_SIZE)| `u32`| Max size of the hash we'll support  
[CS_LINKER_SIGNED](https://ziglang.org/documentation/master/std/#std.macho.CS_LINKER_SIGNED)| `u32`|   
[CS_SHA1_LEN](https://ziglang.org/documentation/master/std/#std.macho.CS_SHA1_LEN)| `u32`|   
[CS_SHA256_LEN](https://ziglang.org/documentation/master/std/#std.macho.CS_SHA256_LEN)| `u32`|   
[CS_SHA256_TRUNCATED_LEN](https://ziglang.org/documentation/master/std/#std.macho.CS_SHA256_TRUNCATED_LEN)| `u32`|   
[CS_SIGNER_TYPE_LEGACYVPN](https://ziglang.org/documentation/master/std/#std.macho.CS_SIGNER_TYPE_LEGACYVPN)| `u32`|   
[CS_SIGNER_TYPE_MAC_APP_STORE](https://ziglang.org/documentation/master/std/#std.macho.CS_SIGNER_TYPE_MAC_APP_STORE)| `u32`|   
[CS_SIGNER_TYPE_UNKNOWN](https://ziglang.org/documentation/master/std/#std.macho.CS_SIGNER_TYPE_UNKNOWN)| `u32`|   
[CS_SUPPORTSCODELIMIT64](https://ziglang.org/documentation/master/std/#std.macho.CS_SUPPORTSCODELIMIT64)| `u32`|   
[CS_SUPPORTSEXECSEG](https://ziglang.org/documentation/master/std/#std.macho.CS_SUPPORTSEXECSEG)| `u32`|   
[CS_SUPPORTSSCATTER](https://ziglang.org/documentation/master/std/#std.macho.CS_SUPPORTSSCATTER)| `u32`|   
[CS_SUPPORTSTEAMID](https://ziglang.org/documentation/master/std/#std.macho.CS_SUPPORTSTEAMID)| `u32`|   
[EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE](https://ziglang.org/documentation/master/std/#std.macho.EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE)| `u8`|   
[EXPORT_SYMBOL_FLAGS_KIND_MASK](https://ziglang.org/documentation/master/std/#std.macho.EXPORT_SYMBOL_FLAGS_KIND_MASK)| `u8`|   
[EXPORT_SYMBOL_FLAGS_KIND_REGULAR](https://ziglang.org/documentation/master/std/#std.macho.EXPORT_SYMBOL_FLAGS_KIND_REGULAR)| `u8`|   
[EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL](https://ziglang.org/documentation/master/std/#std.macho.EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL)| `u8`|   
[EXPORT_SYMBOL_FLAGS_REEXPORT](https://ziglang.org/documentation/master/std/#std.macho.EXPORT_SYMBOL_FLAGS_REEXPORT)| `u8`|   
[EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER](https://ziglang.org/documentation/master/std/#std.macho.EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER)| `u8`|   
[EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION](https://ziglang.org/documentation/master/std/#std.macho.EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION)| `u8`|   
[FAT_CIGAM](https://ziglang.org/documentation/master/std/#std.macho.FAT_CIGAM)| | NXSwapLong(FAT_MAGIC)  
[FAT_CIGAM_64](https://ziglang.org/documentation/master/std/#std.macho.FAT_CIGAM_64)| | NXSwapLong(FAT_MAGIC_64)  
[FAT_MAGIC](https://ziglang.org/documentation/master/std/#std.macho.FAT_MAGIC)| | the fat magic number  
[FAT_MAGIC_64](https://ziglang.org/documentation/master/std/#std.macho.FAT_MAGIC_64)| | the 64-bit fat magic number  
[INDIRECT_SYMBOL_ABS](https://ziglang.org/documentation/master/std/#std.macho.INDIRECT_SYMBOL_ABS)| `u32`|   
[INDIRECT_SYMBOL_LOCAL](https://ziglang.org/documentation/master/std/#std.macho.INDIRECT_SYMBOL_LOCAL)| `u32`|   
[LC_REQ_DYLD](https://ziglang.org/documentation/master/std/#std.macho.LC_REQ_DYLD)| | After MacOS X 10.1 when a new load command is added that is required to be understood by the dynamic linker for the image to execute properly the LC_REQ_DYLD bit will be or'ed into the load command constant. If the dynamic linker sees such a load command it it does not understand will issue a "unknown load command required for execution" error and refuse to use the image. Other load commands without this bit that are not understood will simply be ignored.  
[MH_ALLMODSBOUND](https://ziglang.org/documentation/master/std/#std.macho.MH_ALLMODSBOUND)| | indicates that this binary binds to all two-level namespace modules of its dependent libraries. only used when MH_PREBINDABLE and MH_TWOLEVEL are both set.  
[MH_ALLOW_STACK_EXECUTION](https://ziglang.org/documentation/master/std/#std.macho.MH_ALLOW_STACK_EXECUTION)| | When this bit is set, all stacks in the task will be given stack execution privilege. Only used in MH_EXECUTE filetypes.  
[MH_APP_EXTENSION_SAFE](https://ziglang.org/documentation/master/std/#std.macho.MH_APP_EXTENSION_SAFE)| | The code was linked for use in an application extension.  
[MH_BINDATLOAD](https://ziglang.org/documentation/master/std/#std.macho.MH_BINDATLOAD)| | the object file's undefined references are bound by the dynamic linker when loaded.  
[MH_BINDS_TO_WEAK](https://ziglang.org/documentation/master/std/#std.macho.MH_BINDS_TO_WEAK)| | the final linked image uses weak symbols  
[MH_BUNDLE](https://ziglang.org/documentation/master/std/#std.macho.MH_BUNDLE)| | dynamically bound bundle file  
[MH_CANONICAL](https://ziglang.org/documentation/master/std/#std.macho.MH_CANONICAL)| | the binary has been canonicalized via the unprebind operation  
[MH_CIGAM](https://ziglang.org/documentation/master/std/#std.macho.MH_CIGAM)| | NXSwapInt(MH_MAGIC)  
[MH_CIGAM_64](https://ziglang.org/documentation/master/std/#std.macho.MH_CIGAM_64)| | NXSwapInt(MH_MAGIC_64)  
[MH_CORE](https://ziglang.org/documentation/master/std/#std.macho.MH_CORE)| | core file  
[MH_DEAD_STRIPPABLE_DYLIB](https://ziglang.org/documentation/master/std/#std.macho.MH_DEAD_STRIPPABLE_DYLIB)| | Only for use on dylibs. When linking against a dylib that has this bit set, the static linker will automatically not create a LC_LOAD_DYLIB load command to the dylib if no symbols are being referenced from the dylib.  
[MH_DSYM](https://ziglang.org/documentation/master/std/#std.macho.MH_DSYM)| | companion file with only debug sections  
[MH_DYLDLINK](https://ziglang.org/documentation/master/std/#std.macho.MH_DYLDLINK)| | the object file is input for the dynamic linker and can't be statically link edited again  
[MH_DYLIB](https://ziglang.org/documentation/master/std/#std.macho.MH_DYLIB)| | dynamically bound shared library  
[MH_DYLIB_IN_CACHE](https://ziglang.org/documentation/master/std/#std.macho.MH_DYLIB_IN_CACHE)| | Only for use on dylibs. When this bit is set, the dylib is part of the dyld shared cache, rather than loose in the filesystem.  
[MH_DYLIB_STUB](https://ziglang.org/documentation/master/std/#std.macho.MH_DYLIB_STUB)| | shared library stub for static linking only, no section contents  
[MH_DYLINKER](https://ziglang.org/documentation/master/std/#std.macho.MH_DYLINKER)| | dynamic link editor  
[MH_EXECUTE](https://ziglang.org/documentation/master/std/#std.macho.MH_EXECUTE)| | demand paged executable file  
[MH_FORCE_FLAT](https://ziglang.org/documentation/master/std/#std.macho.MH_FORCE_FLAT)| | the executable is forcing all images to use flat name space bindings  
[MH_FVMLIB](https://ziglang.org/documentation/master/std/#std.macho.MH_FVMLIB)| | fixed VM shared library file  
[MH_HAS_TLV_DESCRIPTORS](https://ziglang.org/documentation/master/std/#std.macho.MH_HAS_TLV_DESCRIPTORS)| | Contains a section of type S_THREAD_LOCAL_VARIABLES  
[MH_INCRLINK](https://ziglang.org/documentation/master/std/#std.macho.MH_INCRLINK)| | the object file is the output of an incremental link against a base file and can't be link edited again  
[MH_KEXT_BUNDLE](https://ziglang.org/documentation/master/std/#std.macho.MH_KEXT_BUNDLE)| | x86_64 kexts  
[MH_LAZY_INIT](https://ziglang.org/documentation/master/std/#std.macho.MH_LAZY_INIT)| | the shared library init routine is to be run lazily via catching memory faults to its writeable segments (obsolete)  
[MH_MAGIC](https://ziglang.org/documentation/master/std/#std.macho.MH_MAGIC)| | the mach magic number  
[MH_MAGIC_64](https://ziglang.org/documentation/master/std/#std.macho.MH_MAGIC_64)| | the 64-bit mach magic number  
[MH_NLIST_OUTOFSYNC_WITH_DYLDINFO](https://ziglang.org/documentation/master/std/#std.macho.MH_NLIST_OUTOFSYNC_WITH_DYLDINFO)| | The external symbols listed in the nlist symbol table do not include all the symbols listed in the dyld info.  
[MH_NOFIXPREBINDING](https://ziglang.org/documentation/master/std/#std.macho.MH_NOFIXPREBINDING)| | do not have dyld notify the prebinding agent about this executable  
[MH_NOMULTIDEFS](https://ziglang.org/documentation/master/std/#std.macho.MH_NOMULTIDEFS)| | this umbrella guarantees no multiple definitions of symbols in its sub-images so the two-level namespace hints can always be used.  
[MH_NOUNDEFS](https://ziglang.org/documentation/master/std/#std.macho.MH_NOUNDEFS)| | the object file has no undefined references  
[MH_NO_HEAP_EXECUTION](https://ziglang.org/documentation/master/std/#std.macho.MH_NO_HEAP_EXECUTION)| | When this bit is set, the OS will run the main executable with a non-executable heap even on platforms (e.g. x86) that don't require it. Only used in MH_EXECUTE filetypes.  
[MH_NO_REEXPORTED_DYLIBS](https://ziglang.org/documentation/master/std/#std.macho.MH_NO_REEXPORTED_DYLIBS)| | When this bit is set on a dylib, the static linker does not need to examine dependent dylibs to see if any are re-exported  
[MH_OBJECT](https://ziglang.org/documentation/master/std/#std.macho.MH_OBJECT)| | relocatable object file  
[MH_PIE](https://ziglang.org/documentation/master/std/#std.macho.MH_PIE)| | When this bit is set, the OS will load the main executable at a random address. Only used in MH_EXECUTE filetypes.  
[MH_PREBINDABLE](https://ziglang.org/documentation/master/std/#std.macho.MH_PREBINDABLE)| | the binary is not prebound but can have its prebinding redone. only used when MH_PREBOUND is not set.  
[MH_PREBOUND](https://ziglang.org/documentation/master/std/#std.macho.MH_PREBOUND)| | the file has its dynamic undefined references prebound.  
[MH_PRELOAD](https://ziglang.org/documentation/master/std/#std.macho.MH_PRELOAD)| | preloaded executable file  
[MH_ROOT_SAFE](https://ziglang.org/documentation/master/std/#std.macho.MH_ROOT_SAFE)| | When this bit is set, the binary declares it is safe for use in processes with uid zero  
[MH_SETUID_SAFE](https://ziglang.org/documentation/master/std/#std.macho.MH_SETUID_SAFE)| | When this bit is set, the binary declares it is safe for use in processes when issetugid() is true  
[MH_SIM_SUPPORT](https://ziglang.org/documentation/master/std/#std.macho.MH_SIM_SUPPORT)| | Allow LC_MIN_VERSION_MACOS and LC_BUILD_VERSION load commands with the platforms macOS, iOSMac, iOSSimulator, tvOSSimulator and watchOSSimulator.  
[MH_SPLIT_SEGS](https://ziglang.org/documentation/master/std/#std.macho.MH_SPLIT_SEGS)| | the file has its read-only and read-write segments split  
[MH_SUBSECTIONS_VIA_SYMBOLS](https://ziglang.org/documentation/master/std/#std.macho.MH_SUBSECTIONS_VIA_SYMBOLS)| | safe to divide up the sections into sub-sections via symbols for dead code stripping  
[MH_TWOLEVEL](https://ziglang.org/documentation/master/std/#std.macho.MH_TWOLEVEL)| | the image is using two-level name space bindings  
[MH_WEAK_DEFINES](https://ziglang.org/documentation/master/std/#std.macho.MH_WEAK_DEFINES)| | the final linked image contains external weak symbols  
[N_ABS](https://ziglang.org/documentation/master/std/#std.macho.N_ABS)| | symbol is absolute  
[N_AST](https://ziglang.org/documentation/master/std/#std.macho.N_AST)| | AST file path: name,,NO_SECT,0,0  
[N_BCOMM](https://ziglang.org/documentation/master/std/#std.macho.N_BCOMM)| | begin common: name,,NO_SECT,0,0  
[N_BINCL](https://ziglang.org/documentation/master/std/#std.macho.N_BINCL)| | include file beginning: name,,NO_SECT,0,sum  
[N_BNSYM](https://ziglang.org/documentation/master/std/#std.macho.N_BNSYM)| | begin nsect sym: 0,,n_sect,0,address  
[N_DESC_DISCARDED](https://ziglang.org/documentation/master/std/#std.macho.N_DESC_DISCARDED)| `u16`| Used by the dynamic linker at runtime. Do not set this bit.  
[N_ECOML](https://ziglang.org/documentation/master/std/#std.macho.N_ECOML)| | end common (local name): 0,,n_sect,0,address  
[N_ECOMM](https://ziglang.org/documentation/master/std/#std.macho.N_ECOMM)| | end common: name,,n_sect,0,0  
[N_EINCL](https://ziglang.org/documentation/master/std/#std.macho.N_EINCL)| | include file end: name,,NO_SECT,0,0  
[N_ENSYM](https://ziglang.org/documentation/master/std/#std.macho.N_ENSYM)| | end nsect sym: 0,,n_sect,0,address  
[N_ENTRY](https://ziglang.org/documentation/master/std/#std.macho.N_ENTRY)| | alternate entry: name,,n_sect,linenumber,address  
[N_EXCL](https://ziglang.org/documentation/master/std/#std.macho.N_EXCL)| | deleted include file: name,,NO_SECT,0,sum  
[N_EXT](https://ziglang.org/documentation/master/std/#std.macho.N_EXT)| | external symbol bit, set for external symbols  
[N_FNAME](https://ziglang.org/documentation/master/std/#std.macho.N_FNAME)| | procedure name (f77 kludge): name,,NO_SECT,0,0  
[N_FUN](https://ziglang.org/documentation/master/std/#std.macho.N_FUN)| | procedure: name,,n_sect,linenumber,address  
[N_GSYM](https://ziglang.org/documentation/master/std/#std.macho.N_GSYM)| | global symbol: name,,NO_SECT,type,0  
[N_INDR](https://ziglang.org/documentation/master/std/#std.macho.N_INDR)| | symbol is defined to be the same as another symbol; the n_value field is an index into the string table specifying the name of the other symbol  
[N_LBRAC](https://ziglang.org/documentation/master/std/#std.macho.N_LBRAC)| | left bracket: 0,,NO_SECT,nesting level,address  
[N_LCSYM](https://ziglang.org/documentation/master/std/#std.macho.N_LCSYM)| | .lcomm symbol: name,,n_sect,type,address  
[N_LENG](https://ziglang.org/documentation/master/std/#std.macho.N_LENG)| | second stab entry with length information  
[N_LSYM](https://ziglang.org/documentation/master/std/#std.macho.N_LSYM)| | local sym: name,,NO_SECT,type,offset  
[N_NO_DEAD_STRIP](https://ziglang.org/documentation/master/std/#std.macho.N_NO_DEAD_STRIP)| `u16`| The N_NO_DEAD_STRIP bit of the n_desc field only ever appears in a relocatable .o file (MH_OBJECT filetype). And is used to indicate to the static link editor it is never to dead strip the symbol.  
[N_OLEVEL](https://ziglang.org/documentation/master/std/#std.macho.N_OLEVEL)| | compiler -O level: name,,NO_SECT,0,0  
[N_OPT](https://ziglang.org/documentation/master/std/#std.macho.N_OPT)| | emitted with gcc2_compiled and in gcc source  
[N_OSO](https://ziglang.org/documentation/master/std/#std.macho.N_OSO)| | object file name: name,,0,0,st_mtime  
[N_PARAMS](https://ziglang.org/documentation/master/std/#std.macho.N_PARAMS)| | compiler parameters: name,,NO_SECT,0,0  
[N_PBUD](https://ziglang.org/documentation/master/std/#std.macho.N_PBUD)| | symbol is undefined and the image is using a prebound value for the symbol  
[N_PEXT](https://ziglang.org/documentation/master/std/#std.macho.N_PEXT)| | private external symbol bit  
[N_PSYM](https://ziglang.org/documentation/master/std/#std.macho.N_PSYM)| | parameter: name,,NO_SECT,type,offset  
[N_RBRAC](https://ziglang.org/documentation/master/std/#std.macho.N_RBRAC)| | right bracket: 0,,NO_SECT,nesting level,address  
[N_RSYM](https://ziglang.org/documentation/master/std/#std.macho.N_RSYM)| | register sym: name,,NO_SECT,type,register  
[N_SECT](https://ziglang.org/documentation/master/std/#std.macho.N_SECT)| | symbol is defined in the section number given in n_sect  
[N_SLINE](https://ziglang.org/documentation/master/std/#std.macho.N_SLINE)| | src line: 0,,n_sect,linenumber,address  
[N_SO](https://ziglang.org/documentation/master/std/#std.macho.N_SO)| | source file name: name,,n_sect,0,address  
[N_SOL](https://ziglang.org/documentation/master/std/#std.macho.N_SOL)| | #included file name: name,,n_sect,0,address  
[N_SSYM](https://ziglang.org/documentation/master/std/#std.macho.N_SSYM)| | structure elt: name,,NO_SECT,type,struct_offset  
[N_STAB](https://ziglang.org/documentation/master/std/#std.macho.N_STAB)| | if any of these bits set, a symbolic debugging entry  
[N_STSYM](https://ziglang.org/documentation/master/std/#std.macho.N_STSYM)| | static symbol: name,,n_sect,type,address  
[N_SYMBOL_RESOLVER](https://ziglang.org/documentation/master/std/#std.macho.N_SYMBOL_RESOLVER)| `u16`| The N_SYMBOL_RESOLVER bit of the n_desc field indicates that the that the function is actually a resolver function and should be called to get the address of the real function to use. This bit is only available in .o files (MH_OBJECT filetype)  
[N_TYPE](https://ziglang.org/documentation/master/std/#std.macho.N_TYPE)| | mask for the type bits  
[N_UNDF](https://ziglang.org/documentation/master/std/#std.macho.N_UNDF)| | symbol is undefined  
[N_VERSION](https://ziglang.org/documentation/master/std/#std.macho.N_VERSION)| | compiler version: name,,NO_SECT,0,0  
[N_WEAK_DEF](https://ziglang.org/documentation/master/std/#std.macho.N_WEAK_DEF)| `u16`| Indicates that this symbol is a weak definition. If the static linker or the dynamic linker finds another (non-weak) definition for this symbol, the weak definition is ignored. Only symbols in a coalesced section (page 23) can be marked as a weak definition.  
[N_WEAK_REF](https://ziglang.org/documentation/master/std/#std.macho.N_WEAK_REF)| `u16`| Indicates that this symbol is a weak reference. If the dynamic linker cannot find a definition for this symbol, it sets the address of this symbol to 0. The static linker sets this symbol given the appropriate weak-linking flags.  
[REBASE_IMMEDIATE_MASK](https://ziglang.org/documentation/master/std/#std.macho.REBASE_IMMEDIATE_MASK)| `u8`|   
[REBASE_OPCODE_ADD_ADDR_IMM_SCALED](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_ADD_ADDR_IMM_SCALED)| `u8`|   
[REBASE_OPCODE_ADD_ADDR_ULEB](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_ADD_ADDR_ULEB)| `u8`|   
[REBASE_OPCODE_DONE](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_DONE)| `u8`|   
[REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB)| `u8`|   
[REBASE_OPCODE_DO_REBASE_IMM_TIMES](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_DO_REBASE_IMM_TIMES)| `u8`|   
[REBASE_OPCODE_DO_REBASE_ULEB_TIMES](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_DO_REBASE_ULEB_TIMES)| `u8`|   
[REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB)| `u8`|   
[REBASE_OPCODE_MASK](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_MASK)| `u8`|   
[REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB)| `u8`|   
[REBASE_OPCODE_SET_TYPE_IMM](https://ziglang.org/documentation/master/std/#std.macho.REBASE_OPCODE_SET_TYPE_IMM)| `u8`|   
[REBASE_TYPE_POINTER](https://ziglang.org/documentation/master/std/#std.macho.REBASE_TYPE_POINTER)| `u8`|   
[REBASE_TYPE_TEXT_ABSOLUTE32](https://ziglang.org/documentation/master/std/#std.macho.REBASE_TYPE_TEXT_ABSOLUTE32)| `u8`|   
[REBASE_TYPE_TEXT_PCREL32](https://ziglang.org/documentation/master/std/#std.macho.REBASE_TYPE_TEXT_PCREL32)| `u8`|   
[REFERENCED_DYNAMICALLY](https://ziglang.org/documentation/master/std/#std.macho.REFERENCED_DYNAMICALLY)| `u16`| Must be set for any defined symbol that is referenced by dynamic-loader APIs (such as dlsym and NSLookupSymbolInImage) and not ordinary undefined symbol references. The strip tool uses this bit to avoid removing symbols that must exist: If the symbol has this bit set, strip does not strip it.  
[REFERENCE_FLAG_DEFINED](https://ziglang.org/documentation/master/std/#std.macho.REFERENCE_FLAG_DEFINED)| `u16`| This symbol is defined in this module.  
[REFERENCE_FLAG_PRIVATE_DEFINED](https://ziglang.org/documentation/master/std/#std.macho.REFERENCE_FLAG_PRIVATE_DEFINED)| `u16`| This symbol is defined in this module and is visible only to modules within this shared library.  
[REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY](https://ziglang.org/documentation/master/std/#std.macho.REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY)| `u16`| This symbol is defined in another module in this file, is a lazy (function) symbol, and is visible only to modules within this shared library.  
[REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY](https://ziglang.org/documentation/master/std/#std.macho.REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY)| `u16`| This symbol is defined in another module in this file, is a non-lazy (data) symbol, and is visible only to modules within this shared library.  
[REFERENCE_FLAG_UNDEFINED_LAZY](https://ziglang.org/documentation/master/std/#std.macho.REFERENCE_FLAG_UNDEFINED_LAZY)| `u16`| This symbol is a reference to an external lazy symbol—that is, to a function call.  
[REFERENCE_FLAG_UNDEFINED_NON_LAZY](https://ziglang.org/documentation/master/std/#std.macho.REFERENCE_FLAG_UNDEFINED_NON_LAZY)| `u16`| This symbol is a reference to an external non-lazy (data) symbol.  
[SECTION_ATTRIBUTES](https://ziglang.org/documentation/master/std/#std.macho.SECTION_ATTRIBUTES)| | 24 section attributes  
[SECTION_TYPE](https://ziglang.org/documentation/master/std/#std.macho.SECTION_TYPE)| | The flags field of a section structure is separated into two parts a section type and section attributes. The section types are mutually exclusive (it can only have one type) but the section attributes are not (it may have more than one attribute). 256 section types  
[SG_FVMLIB](https://ziglang.org/documentation/master/std/#std.macho.SG_FVMLIB)| | This segment is the VM that is allocated by a fixed VM library, for overlap checking in the link editor.  
[SG_HIGHVM](https://ziglang.org/documentation/master/std/#std.macho.SG_HIGHVM)| | Segment flags The file contents for this segment is for the high part of the VM space, the low part is zero filled (for stacks in core files).  
[SG_NORELOC](https://ziglang.org/documentation/master/std/#std.macho.SG_NORELOC)| | This segment has nothing that was relocated in it and nothing relocated to it, that is it maybe safely replaced without relocation.  
[SG_PROTECTED_VERSION_1](https://ziglang.org/documentation/master/std/#std.macho.SG_PROTECTED_VERSION_1)| | This segment is protected. If the segment starts at file offset 0, the first page of the segment is not protected. All other pages of the segment are protected.  
[SG_READ_ONLY](https://ziglang.org/documentation/master/std/#std.macho.SG_READ_ONLY)| | This segment is made read-only after fixups  
[S_16BYTE_LITERALS](https://ziglang.org/documentation/master/std/#std.macho.S_16BYTE_LITERALS)| | section with only 16 byte literals  
[S_4BYTE_LITERALS](https://ziglang.org/documentation/master/std/#std.macho.S_4BYTE_LITERALS)| | section with only 4 byte literals  
[S_8BYTE_LITERALS](https://ziglang.org/documentation/master/std/#std.macho.S_8BYTE_LITERALS)| | section with only 8 byte literals  
[S_ATTR_DEBUG](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_DEBUG)| | a debug section  
[S_ATTR_EXT_RELOC](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_EXT_RELOC)| | section has external relocation entries  
[S_ATTR_LIVE_SUPPORT](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_LIVE_SUPPORT)| | blocks are live if they reference live blocks  
[S_ATTR_LOC_RELOC](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_LOC_RELOC)| | section has local relocation entries  
[S_ATTR_NO_DEAD_STRIP](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_NO_DEAD_STRIP)| | no dead stripping  
[S_ATTR_NO_TOC](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_NO_TOC)| | section contains coalesced symbols that are not to be in a ranlib table of contents  
[S_ATTR_PURE_INSTRUCTIONS](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_PURE_INSTRUCTIONS)| | section contains only true machine instructions  
[S_ATTR_SELF_MODIFYING_CODE](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_SELF_MODIFYING_CODE)| | used with x86 code stubs written on by dyld  
[S_ATTR_SOME_INSTRUCTIONS](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_SOME_INSTRUCTIONS)| | section contains some machine instructions  
[S_ATTR_STRIP_STATIC_SYMS](https://ziglang.org/documentation/master/std/#std.macho.S_ATTR_STRIP_STATIC_SYMS)| | ok to strip static symbols in this section in files with the MH_DYLDLINK flag  
[S_COALESCED](https://ziglang.org/documentation/master/std/#std.macho.S_COALESCED)| | section contains symbols that are to be coalesced  
[S_CSTRING_LITERALS](https://ziglang.org/documentation/master/std/#std.macho.S_CSTRING_LITERALS)| | section with only literal C string  
[S_DTRACE_DOF](https://ziglang.org/documentation/master/std/#std.macho.S_DTRACE_DOF)| | section contains DTrace Object Format  
[S_GB_ZEROFILL](https://ziglang.org/documentation/master/std/#std.macho.S_GB_ZEROFILL)| | zero fill on demand section (that can be larger than 4 gigabytes)  
[S_INIT_FUNC_OFFSETS](https://ziglang.org/documentation/master/std/#std.macho.S_INIT_FUNC_OFFSETS)| | 32-bit offsets to initializers  
[S_INTERPOSING](https://ziglang.org/documentation/master/std/#std.macho.S_INTERPOSING)| | section with only pairs of function pointers for interposing  
[S_LAZY_DYLIB_SYMBOL_POINTERS](https://ziglang.org/documentation/master/std/#std.macho.S_LAZY_DYLIB_SYMBOL_POINTERS)| | section with only lazy symbol pointers to lazy loaded dylibs  
[S_LAZY_SYMBOL_POINTERS](https://ziglang.org/documentation/master/std/#std.macho.S_LAZY_SYMBOL_POINTERS)| | section with only lazy symbol pointers  
[S_LITERAL_POINTERS](https://ziglang.org/documentation/master/std/#std.macho.S_LITERAL_POINTERS)| | section with only pointers to  
[S_MOD_INIT_FUNC_POINTERS](https://ziglang.org/documentation/master/std/#std.macho.S_MOD_INIT_FUNC_POINTERS)| | section with only function pointers for initialization  
[S_MOD_TERM_FUNC_POINTERS](https://ziglang.org/documentation/master/std/#std.macho.S_MOD_TERM_FUNC_POINTERS)| | section with only function pointers for termination  
[S_NON_LAZY_SYMBOL_POINTERS](https://ziglang.org/documentation/master/std/#std.macho.S_NON_LAZY_SYMBOL_POINTERS)| | section with only non-lazy symbol pointers  
[S_REGULAR](https://ziglang.org/documentation/master/std/#std.macho.S_REGULAR)| | regular section  
[S_SYMBOL_STUBS](https://ziglang.org/documentation/master/std/#std.macho.S_SYMBOL_STUBS)| | section with only symbol stubs, byte size of stub in the reserved2 field  
[S_THREAD_LOCAL_INIT_FUNCTION_POINTERS](https://ziglang.org/documentation/master/std/#std.macho.S_THREAD_LOCAL_INIT_FUNCTION_POINTERS)| | functions to call to initialize TLV values  
[S_THREAD_LOCAL_REGULAR](https://ziglang.org/documentation/master/std/#std.macho.S_THREAD_LOCAL_REGULAR)| | template of initial values for TLVs  
[S_THREAD_LOCAL_VARIABLES](https://ziglang.org/documentation/master/std/#std.macho.S_THREAD_LOCAL_VARIABLES)| | TLV descriptors  
[S_THREAD_LOCAL_VARIABLE_POINTERS](https://ziglang.org/documentation/master/std/#std.macho.S_THREAD_LOCAL_VARIABLE_POINTERS)| | pointers to TLV descriptors  
[S_THREAD_LOCAL_ZEROFILL](https://ziglang.org/documentation/master/std/#std.macho.S_THREAD_LOCAL_ZEROFILL)| | template of initial values for TLVs  
[S_ZEROFILL](https://ziglang.org/documentation/master/std/#std.macho.S_ZEROFILL)| | zero fill on demand section  
[UNWIND_ARM64_DWARF_SECTION_OFFSET](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_DWARF_SECTION_OFFSET)| `u32`|   
[UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK)| `u32`|   
[UNWIND_ARM64_FRAME_D10_D11_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_D10_D11_PAIR)| `u32`|   
[UNWIND_ARM64_FRAME_D12_D13_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_D12_D13_PAIR)| `u32`|   
[UNWIND_ARM64_FRAME_D14_D15_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_D14_D15_PAIR)| `u32`|   
[UNWIND_ARM64_FRAME_D8_D9_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_D8_D9_PAIR)| `u32`|   
[UNWIND_ARM64_FRAME_X19_X20_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_X19_X20_PAIR)| `u32`|   
[UNWIND_ARM64_FRAME_X21_X22_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_X21_X22_PAIR)| `u32`|   
[UNWIND_ARM64_FRAME_X23_X24_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_X23_X24_PAIR)| `u32`|   
[UNWIND_ARM64_FRAME_X25_X26_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_X25_X26_PAIR)| `u32`|   
[UNWIND_ARM64_FRAME_X27_X28_PAIR](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_FRAME_X27_X28_PAIR)| `u32`|   
[UNWIND_ARM64_MODE_MASK](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_ARM64_MODE_MASK)| `u32`|   
[UNWIND_HAS_LSDA](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_HAS_LSDA)| `u32`|   
[UNWIND_IS_NOT_FUNCTION_START](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_IS_NOT_FUNCTION_START)| `u32`|   
[UNWIND_PERSONALITY_MASK](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_PERSONALITY_MASK)| `u32`|   
[UNWIND_SECTION_VERSION](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_SECTION_VERSION)| |   
[UNWIND_X86_64_DWARF_SECTION_OFFSET](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_DWARF_SECTION_OFFSET)| `u32`|   
[UNWIND_X86_64_FRAMELESS_STACK_ADJUST](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_FRAMELESS_STACK_ADJUST)| `u32`|   
[UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT)| `u32`|   
[UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION)| `u32`|   
[UNWIND_X86_64_FRAMELESS_STACK_SIZE](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_FRAMELESS_STACK_SIZE)| `u32`|   
[UNWIND_X86_64_MODE_MASK](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_MODE_MASK)| `u32`|   
[UNWIND_X86_64_RBP_FRAME_OFFSET](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_RBP_FRAME_OFFSET)| `u32`|   
[UNWIND_X86_64_RBP_FRAME_REGISTERS](https://ziglang.org/documentation/master/std/#std.macho.UNWIND_X86_64_RBP_FRAME_REGISTERS)| `u32`|   
## Functions
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
