[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [array_list](https://ziglang.org/documentation/master/std/#std.array_list)
  * [ArrayList](https://ziglang.org/documentation/master/std/#std.array_list.ArrayList)


Loading...
# Type Function[[src]](https://ziglang.org/documentation/master/std/#src/std/array_list.zig)
A contiguous, growable list of items in memory. This is a wrapper around an array of T values. Initialize with `init`.
This struct internally stores a `std.mem.Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)` for memory management. To manually specify an allocator with each function call see `ArrayListUnmanaged[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListUnmanaged)`.
## Parameters
```
T: type
```

## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
items: Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.Slice)
```

Contents of the list. This field is intended to be accessed directly.
Pointers to elements in this slice are invalidated by various functions of this ArrayList in accordance with the respective documentation. In all cases, "invalidated" means that the memory has been passed to this allocator's resize or free function.
```
capacity: usize
```

How many T values this list can hold without allocating additional memory.
```
allocator: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)
```

## Types
  * [FixedWriter](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.FixedWriter)
  * [SentinelSlice](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.SentinelSlice)
  * [Slice](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.Slice)
  * [Writer](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.Writer)


## Namespaces
## Global Variables
## Values
## Functions `pub fn addManyAsArray[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addManyAsArray)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), comptime n: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!*[n]T`
    
Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. The returned pointer becomes invalid when the list is resized. Resizes list if `self.capacity` is not large enough. `pub fn addManyAsArrayAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addManyAsArrayAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), comptime n: usize) *[n]T`
    
Resize the array, adding `n` new elements, which have `undefined` values. The return value is an array pointing to the newly allocated elements. Never invalidates element pointers. The returned pointer becomes invalid when the list is resized. Asserts that the list can hold the additional items. `pub fn addManyAsSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addManyAsSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), n: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)![]T`
    
Resize the array, adding `n` new elements, which have `undefined` values. The return value is a slice pointing to the newly allocated elements. The returned pointer becomes invalid when the list is resized. Resizes list if `self.capacity` is not large enough. `pub fn addManyAsSliceAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addManyAsSliceAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), n: usize) []T`
    
Resize the array, adding `n` new elements, which have `undefined` values. The return value is a slice pointing to the newly allocated elements. Never invalidates element pointers. The returned pointer becomes invalid when the list is resized. Asserts that the list can hold the additional items. `pub fn addManyAt[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addManyAt)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), index: usize, count: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)![]T`
    
Add `count` new elements at position `index`, which have `undefined` values. Returns a slice pointing to the newly allocated elements, which becomes invalid after various `ArrayList` operations. Invalidates pre-existing pointers to elements at and after `index`. Invalidates all pre-existing element pointers if capacity must be increased to accommodate the new elements. Asserts that the index is in bounds or equal to the length. `pub fn addManyAtAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addManyAtAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), index: usize, count: usize) []T`
    
Add `count` new elements at position `index`, which have `undefined` values. Returns a slice pointing to the newly allocated elements, which becomes invalid after various `ArrayList` operations. Asserts that there is enough capacity for the new elements. Invalidates pre-existing pointers to elements at and after `index`, but does not invalidate any before that. Asserts that the index is in bounds or equal to the length. `pub fn addOne[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addOne)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!*T`
    
Increase length by 1, returning pointer to the new item. The returned pointer becomes invalid when the list resized. `pub fn addOneAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.addOneAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) *T`
    
Increase length by 1, returning pointer to the new item. The returned pointer becomes invalid when the list is resized. Never invalidates element pointers. Asserts that the list can hold one additional item. `pub fn allocatedSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.allocatedSlice)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.Slice)`
    
Returns a slice of all the items plus the extra capacity, whose memory contents are `undefined`. `pub fn append[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.append)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), item: T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Extends the list by 1 element. Allocates more memory as necessary. Invalidates element pointers if additional memory is needed. `pub fn appendAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.appendAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), item: T) void`
    
Extends the list by 1 element. Never invalidates element pointers. Asserts that the list can hold one additional item. `pub inline fn appendNTimes[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.appendNTimes)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), value: T, n: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Append a value to the list `n` times. Allocates more memory as necessary. Invalidates element pointers if additional memory is needed. The function is inline so that a comptime-known `value` parameter will have a more optimal memset codegen in case it has a repeated byte pattern. `pub inline fn appendNTimesAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.appendNTimesAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), value: T, n: usize) void`
    
Append a value to the list `n` times. Never invalidates element pointers. The function is inline so that a comptime-known `value` parameter will have a more optimal memset codegen in case it has a repeated byte pattern. Asserts that the list can hold the additional items. `pub fn appendSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.appendSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), items: []const T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Append the slice of items to the list. Allocates more memory as necessary. Invalidates element pointers if additional memory is needed. `pub fn appendSliceAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.appendSliceAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), items: []const T) void`
    
Append the slice of items to the list. Never invalidates element pointers. Asserts that the list can hold the additional items. `pub fn appendUnalignedSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.appendUnalignedSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), items: []align(1) const T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Append an unaligned slice of items to the list. Allocates more memory as necessary. Only call this function if calling `appendSlice` instead would be a compile error. Invalidates element pointers if additional memory is needed. `pub fn appendUnalignedSliceAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.appendUnalignedSliceAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), items: []align(1) const T) void`
    
Append the slice of items to the list. Never invalidates element pointers. This function is only needed when calling `appendSliceAssumeCapacity` instead would be a compile error due to the alignment of the `items` parameter. Asserts that the list can hold the additional items. `pub fn clearAndFree[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.clearAndFree)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) void`
    
Invalidates all element pointers. `pub fn clearRetainingCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.clearRetainingCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) void`
    
Invalidates all element pointers. `pub fn clone[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.clone)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)`
    
Creates a copy of this ArrayList, using the same allocator. `pub fn deinit[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.deinit)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) void`
    
Release all allocated memory. `pub fn ensureTotalCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.ensureTotalCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), new_capacity: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
If the current capacity is less than `new_capacity`, this function will modify the array so that it can hold at least `new_capacity` items. Invalidates element pointers if additional memory is needed. `pub fn ensureTotalCapacityPrecise[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.ensureTotalCapacityPrecise)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), new_capacity: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
If the current capacity is less than `new_capacity`, this function will modify the array so that it can hold exactly `new_capacity` items. Invalidates element pointers if additional memory is needed. `pub fn ensureUnusedCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.ensureUnusedCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), additional_count: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Modify the array so that it can hold at least `additional_count` **more** items. Invalidates element pointers if additional memory is needed. `pub fn expandToCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.expandToCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) void`
    
Increases the array's length to match the full capacity that is already allocated. The new elements have `undefined` values. Never invalidates element pointers. `pub fn fixedWriter[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.fixedWriter)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) FixedWriter[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.FixedWriter)`
    
Initializes a Writer which will append to the list but will return `error.OutOfMemory` rather than increasing capacity. `pub fn fromOwnedSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.fromOwnedSlice)(gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), slice: Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.Slice)) Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)`
    
ArrayList takes ownership of the passed in slice. The slice must have been allocated with `gpa`. Deinitialize with `deinit` or use `toOwnedSlice`. `pub fn fromOwnedSliceSentinel[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.fromOwnedSliceSentinel)(gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), comptime sentinel: T, slice: [:sentinel]T) Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)`
    
ArrayList takes ownership of the passed in slice. The slice must have been allocated with `gpa`. Deinitialize with `deinit` or use `toOwnedSlice`. `pub fn getLast[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.getLast)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) T`
    
Returns the last element from the list. Asserts that the list is not empty. `pub fn getLastOrNull[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.getLastOrNull)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) ?T`
    
Returns the last element from the list, or `null` if list is empty. `pub fn init[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.init)(gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)`
    
Deinitialize with `deinit` or use `toOwnedSlice`. `pub fn initCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.initCapacity)(gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), num: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)`
    
Initialize with capacity to hold `num` elements. The resulting capacity will equal `num` exactly. Deinitialize with `deinit` or use `toOwnedSlice`. `pub fn insert[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.insert)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), i: usize, item: T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Insert `item` at index `i`. Moves `list[i .. list.len]` to higher indices to make room. If `i` is equal to the length of the list this operation is equivalent to append. This operation is O(N). Invalidates element pointers if additional memory is needed. Asserts that the index is in bounds or equal to the length. `pub fn insertAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.insertAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), i: usize, item: T) void`
    
Insert `item` at index `i`. Moves `list[i .. list.len]` to higher indices to make room. If `i` is equal to the length of the list this operation is equivalent to appendAssumeCapacity. This operation is O(N). Asserts that there is enough capacity for the new item. Asserts that the index is in bounds or equal to the length. `pub fn insertSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.insertSlice)( self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), index: usize, items: []const T, ) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Insert slice `items` at index `i` by moving `list[i .. list.len]` to make room. This operation is O(N). Invalidates pre-existing pointers to elements at and after `index`. Invalidates all pre-existing element pointers if capacity must be increased to accommodate the new elements. Asserts that the index is in bounds or equal to the length. `pub fn moveToUnmanaged[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.moveToUnmanaged)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) ArrayListAlignedUnmanaged[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAlignedUnmanaged)(T, alignment)`
    
Initializes an ArrayListUnmanaged with the `items` and `capacity` fields of this ArrayList. Empties this ArrayList. `pub fn orderedRemove[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.orderedRemove)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), i: usize) T`
    
Remove the element at index `i`, shift elements after index `i` forward, and return the removed element. Invalidates element pointers to end of list. This operation is O(N). This preserves item order. Use `swapRemove` if order preservation is not important. Asserts that the index is in bounds. Asserts that the list is not empty. `pub fn pop[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.pop)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) ?T`
    
Remove and return the last element from the list, or return `null` if list is empty. Invalidates element pointers to the removed element, if any. `pub fn replaceRange[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.replaceRange)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), start: usize, len: usize, new_items: []const T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Grows or shrinks the list as necessary. Invalidates element pointers if additional capacity is allocated. Asserts that the range is in bounds. `pub fn replaceRangeAssumeCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.replaceRangeAssumeCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), start: usize, len: usize, new_items: []const T) void`
    
Grows or shrinks the list as necessary. Never invalidates element pointers. Asserts the capacity is enough for additional items. `pub fn resize[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.resize)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), new_len: usize) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Adjust the list length to `new_len`. Additional elements contain the value `undefined`. Invalidates element pointers if additional memory is needed. `pub fn shrinkAndFree[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.shrinkAndFree)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), new_len: usize) void`
    
Reduce allocated capacity to `new_len`. May invalidate element pointers. Asserts that the new length is less than or equal to the previous length. `pub fn shrinkRetainingCapacity[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.shrinkRetainingCapacity)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), new_len: usize) void`
    
Reduce length to `new_len`. Invalidates element pointers for the elements `items[new_len..]`. Asserts that the new length is less than or equal to the previous length. `pub fn swapRemove[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.swapRemove)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), i: usize) T`
    
Removes the element at the specified index and returns it. The empty slot is filled from the end of the list. This operation is O(1). This may not preserve item order. Use `orderedRemove` if you need to preserve order. Asserts that the list is not empty. Asserts that the index is in bounds. `pub fn toOwnedSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.toOwnedSlice)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!Slice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.Slice)`
    
The caller owns the returned memory. Empties this ArrayList. Its capacity is cleared, making `deinit` safe but unnecessary to call. `pub fn toOwnedSliceSentinel[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.toOwnedSliceSentinel)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned), comptime sentinel: T) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!SentinelSlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.SentinelSlice)(sentinel)`
    
The caller owns the returned memory. Empties this ArrayList. `pub fn unusedCapacitySlice[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.unusedCapacitySlice)(self: Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) []T`
    
Returns a slice of only the extra capacity after items. This can be useful for writing directly into an ArrayList. Note that such an operation must be followed up with a direct modification of `self.items.len`. `pub fn writer[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.writer)(self: *Self[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned)) Writer[](https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.Writer)`
    
Initializes a Writer which will append to the list.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
