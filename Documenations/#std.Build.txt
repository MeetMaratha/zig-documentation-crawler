[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [Build](https://ziglang.org/documentation/master/std/#std.Build)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/Build.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
graph: *Graph[](https://ziglang.org/documentation/master/std/#std.Build.Graph)
```

Shared state among all Build instances.
```
install_tls: TopLevelStep[](https://ziglang.org/documentation/master/std/#std.Build.TopLevelStep)
```

```
uninstall_tls: TopLevelStep[](https://ziglang.org/documentation/master/std/#std.Build.TopLevelStep)
```

```
allocator: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)
```

```
user_input_options: UserInputOptionsMap[](https://ziglang.org/documentation/master/std/#std.Build.UserInputOptionsMap)
```

```
available_options_map: AvailableOptionsMap[](https://ziglang.org/documentation/master/std/#std.Build.AvailableOptionsMap)
```

```
available_options_list: ArrayList[](https://ziglang.org/documentation/master/std/#std.ArrayList)(AvailableOption[](https://ziglang.org/documentation/master/std/#std.Build.AvailableOption))
```

```
verbose: bool
```

```
verbose_link: bool
```

```
verbose_cc: bool
```

```
verbose_air: bool
```

```
verbose_llvm_ir: ?[]const u8
```

```
verbose_llvm_bc: ?[]const u8
```

```
verbose_cimport: bool
```

```
verbose_llvm_cpu_features: bool
```

```
reference_trace: ?u32 = null
```

```
invalid_user_input: bool
```

```
default_step: *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step)
```

```
top_level_steps: std[](https://ziglang.org/documentation/master/std/#std).StringArrayHashMapUnmanaged[](https://ziglang.org/documentation/master/std/#std.StringArrayHashMapUnmanaged)(*TopLevelStep[](https://ziglang.org/documentation/master/std/#std.Build.TopLevelStep))
```

```
install_prefix: []const u8
```

```
dest_dir: ?[]const u8
```

```
lib_dir: []const u8
```

```
exe_dir: []const u8
```

```
h_dir: []const u8
```

```
install_path: []const u8
```

```
sysroot: ?[]const u8 = null
```

```
search_prefixes: std[](https://ziglang.org/documentation/master/std/#std).ArrayListUnmanaged[](https://ziglang.org/documentation/master/std/#std.ArrayListUnmanaged)([]const u8)
```

```
libc_file: ?[]const u8 = null
```

```
build_root: Cache[](https://ziglang.org/documentation/master/std/#std.Build.Cache).Directory[](https://ziglang.org/documentation/master/std/#std.Build.Cache.Directory)
```

Path to the directory containing build.zig.
```
cache_root: Cache[](https://ziglang.org/documentation/master/std/#std.Build.Cache).Directory[](https://ziglang.org/documentation/master/std/#std.Build.Cache.Directory)
```

```
pkg_config_pkg_list: ?(PkgConfigError[](https://ziglang.org/documentation/master/std/#std.Build.PkgConfigError)![]const PkgConfigPkg[](https://ziglang.org/documentation/master/std/#std.Build.PkgConfigPkg)) = null
```

```
args: ?[]const []const u8 = null
```

```
debug_log_scopes: []const []const u8 = &.{}
```

```
debug_compile_errors: bool = false
```

```
debug_pkg_config: bool = false
```

```
debug_stack_frames_count: u8 = 8
```

Number of stack frames captured when a `StackTrace` is recorded for debug purposes, in particular at `Step[](https://ziglang.org/documentation/master/std/#std.Build.Step)` creation. Set to 0 to disable stack collection.
```
enable_darling: bool = false
```

Experimental. Use system Darling installation to run cross compiled macOS build artifacts.
```
enable_qemu: bool = false
```

Use system QEMU installation to run cross compiled foreign architecture build artifacts.
```
enable_rosetta: bool = false
```

Darwin. Use Rosetta to run x86_64 macOS build artifacts on arm64 macOS.
```
enable_wasmtime: bool = false
```

Use system Wasmtime installation to run cross compiled wasm/wasi build artifacts.
```
enable_wine: bool = false
```

Use system Wine installation to run cross compiled Windows build artifacts.
```
libc_runtimes_dir: ?[]const u8 = null
```

After following the steps in <https://github.com/ziglang/zig/wiki/Updating-libc#glibc>, this will be the directory $glibc-build-dir/install/glibcs Given the example of the aarch64 target, this is the directory that contains the path `aarch64-linux-gnu/lib/ld-linux-aarch64.so.1`. Also works for dynamic musl.
```
dep_prefix: []const u8 = ""
```

```
modules: std[](https://ziglang.org/documentation/master/std/#std).StringArrayHashMap[](https://ziglang.org/documentation/master/std/#std.StringArrayHashMap)(*Module[](https://ziglang.org/documentation/master/std/#std.Build.Module))
```

```
named_writefiles: std[](https://ziglang.org/documentation/master/std/#std).StringArrayHashMap[](https://ziglang.org/documentation/master/std/#std.StringArrayHashMap)(*Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).WriteFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.WriteFile))
```

```
named_lazy_paths: std[](https://ziglang.org/documentation/master/std/#std).StringArrayHashMap[](https://ziglang.org/documentation/master/std/#std.StringArrayHashMap)(LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath))
```

```
pkg_hash: []const u8
```

The hash of this instance's package. `""` means that this is the root package.
```
available_deps: AvailableDeps[](https://ziglang.org/documentation/master/std/#std.Build.AvailableDeps)
```

A mapping from dependency names to package hashes.
```
release_mode: ReleaseMode[](https://ziglang.org/documentation/master/std/#std.Build.ReleaseMode)
```

```
build_id: ?std[](https://ziglang.org/documentation/master/std/#std).zig[](https://ziglang.org/documentation/master/std/#std.zig).BuildId[](https://ziglang.org/documentation/master/std/#std.zig.BuildId) = null
```

## Types
  * [AssemblyOptions](https://ziglang.org/documentation/master/std/#std.Build.AssemblyOptions)
  * [Cache](https://ziglang.org/documentation/master/std/#std.Build.Cache)
  * [Dependency](https://ziglang.org/documentation/master/std/#std.Build.Dependency)
  * [DirList](https://ziglang.org/documentation/master/std/#std.Build.DirList)
  * [ExecutableOptions](https://ziglang.org/documentation/master/std/#std.Build.ExecutableOptions)
  * [GeneratedFile](https://ziglang.org/documentation/master/std/#std.Build.GeneratedFile)
  * [Graph](https://ziglang.org/documentation/master/std/#std.Build.Graph)
  * [InstallDir](https://ziglang.org/documentation/master/std/#std.Build.InstallDir)
  * [LazyPath](https://ziglang.org/documentation/master/std/#std.Build.LazyPath)
  * [LibraryOptions](https://ziglang.org/documentation/master/std/#std.Build.LibraryOptions)
  * [Module](https://ziglang.org/documentation/master/std/#std.Build.Module)
  * [ObjectOptions](https://ziglang.org/documentation/master/std/#std.Build.ObjectOptions)
  * [PkgConfigPkg](https://ziglang.org/documentation/master/std/#std.Build.PkgConfigPkg)
  * [ReleaseMode](https://ziglang.org/documentation/master/std/#std.Build.ReleaseMode)
  * [ResolvedTarget](https://ziglang.org/documentation/master/std/#std.Build.ResolvedTarget)
  * [SharedLibraryOptions](https://ziglang.org/documentation/master/std/#std.Build.SharedLibraryOptions)
  * [StandardOptimizeOptionOptions](https://ziglang.org/documentation/master/std/#std.Build.StandardOptimizeOptionOptions)
  * [StandardTargetOptionsArgs](https://ziglang.org/documentation/master/std/#std.Build.StandardTargetOptionsArgs)
  * [StaticLibraryOptions](https://ziglang.org/documentation/master/std/#std.Build.StaticLibraryOptions)
  * [Step](https://ziglang.org/documentation/master/std/#std.Build.Step)
  * [SystemIntegrationOptionConfig](https://ziglang.org/documentation/master/std/#std.Build.SystemIntegrationOptionConfig)
  * [TestOptions](https://ziglang.org/documentation/master/std/#std.Build.TestOptions)
  * [Watch](https://ziglang.org/documentation/master/std/#std.Build.Watch)


## Namespaces
  * [Fuzz](https://ziglang.org/documentation/master/std/#std.Build.Fuzz)


## Global Variables
## Values
## Functions `pub fn addAssembly[](https://ziglang.org/documentation/master/std/#std.Build.addAssembly)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: AssemblyOptions[](https://ziglang.org/documentation/master/std/#std.Build.AssemblyOptions)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)`
    
Deprecated; prefer using `addObject[](https://ziglang.org/documentation/master/std/#std.Build.addObject)` where the `root_module` has an empty `root_source_file` and contains an assembly file via `Module.addAssemblyFile[](https://ziglang.org/documentation/master/std/#std.Build.Module.addAssemblyFile)`. `pub fn addCheckFile[](https://ziglang.org/documentation/master/std/#std.Build.addCheckFile)( b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), file_source: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath), options: Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).CheckFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.CheckFile).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.CheckFile.Options), ) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).CheckFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.CheckFile)`
`pub fn addConfigHeader[](https://ziglang.org/documentation/master/std/#std.Build.addConfigHeader)( b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).ConfigHeader[](https://ziglang.org/documentation/master/std/#std.Build.Step.ConfigHeader).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.ConfigHeader.Options), values: anytype, ) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).ConfigHeader[](https://ziglang.org/documentation/master/std/#std.Build.Step.ConfigHeader)`
    
Using the `values` provided, produces a C header file, possibly based on a template input file (e.g. config.h.in). When an input template file is provided, this function will fail the build when an option not found in the input file is provided in `values`, and when an option found in the input file is missing from `values`. `pub fn addExecutable[](https://ziglang.org/documentation/master/std/#std.Build.addExecutable)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: ExecutableOptions[](https://ziglang.org/documentation/master/std/#std.Build.ExecutableOptions)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)`
`pub fn addFail[](https://ziglang.org/documentation/master/std/#std.Build.addFail)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), error_msg: []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Fail[](https://ziglang.org/documentation/master/std/#std.Build.Step.Fail)`
`pub fn addFmt[](https://ziglang.org/documentation/master/std/#std.Build.addFmt)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Fmt[](https://ziglang.org/documentation/master/std/#std.Build.Step.Fmt).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.Fmt.Options)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Fmt[](https://ziglang.org/documentation/master/std/#std.Build.Step.Fmt)`
`pub fn addInstallArtifact[](https://ziglang.org/documentation/master/std/#std.Build.addInstallArtifact)( b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), artifact: *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile), options: Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallArtifact[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallArtifact).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallArtifact.Options), ) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallArtifact[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallArtifact)`
    
This merely creates the step; it does not add it to the dependencies of the top-level install step. `pub fn addInstallBinFile[](https://ziglang.org/documentation/master/std/#std.Build.addInstallBinFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), source: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath), dest_rel_path: []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallFile)`
    
`dest_rel_path` is relative to bin path `pub fn addInstallDirectory[](https://ziglang.org/documentation/master/std/#std.Build.addInstallDirectory)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallDir[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallDir).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallDir.Options)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallDir[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallDir)`
`pub fn addInstallFile[](https://ziglang.org/documentation/master/std/#std.Build.addInstallFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), source: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath), dest_rel_path: []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallFile)`
    
`dest_rel_path` is relative to install prefix path `pub fn addInstallFileWithDir[](https://ziglang.org/documentation/master/std/#std.Build.addInstallFileWithDir)( b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), source: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath), install_dir: InstallDir[](https://ziglang.org/documentation/master/std/#std.Build.InstallDir), dest_rel_path: []const u8, ) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallFile)`
`pub fn addInstallHeaderFile[](https://ziglang.org/documentation/master/std/#std.Build.addInstallHeaderFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), source: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath), dest_rel_path: []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallFile)`
    
`dest_rel_path` is relative to header path `pub fn addInstallLibFile[](https://ziglang.org/documentation/master/std/#std.Build.addInstallLibFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), source: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath), dest_rel_path: []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallFile)`
    
`dest_rel_path` is relative to lib path `pub fn addLibrary[](https://ziglang.org/documentation/master/std/#std.Build.addLibrary)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: LibraryOptions[](https://ziglang.org/documentation/master/std/#std.Build.LibraryOptions)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)`
`pub fn addModule[](https://ziglang.org/documentation/master/std/#std.Build.addModule)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name: []const u8, options: Module[](https://ziglang.org/documentation/master/std/#std.Build.Module).CreateOptions[](https://ziglang.org/documentation/master/std/#std.Build.Module.CreateOptions)) *Module[](https://ziglang.org/documentation/master/std/#std.Build.Module)`
    
This function creates a module and adds it to the package's module set, making it available to other packages which depend on this one. `createModule[](https://ziglang.org/documentation/master/std/#std.Build.createModule)` can be used instead to create a private module. `pub fn addNamedLazyPath[](https://ziglang.org/documentation/master/std/#std.Build.addNamedLazyPath)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name: []const u8, lp: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath)) void`
`pub fn addNamedWriteFiles[](https://ziglang.org/documentation/master/std/#std.Build.addNamedWriteFiles)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name: []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).WriteFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.WriteFile)`
`pub fn addObjCopy[](https://ziglang.org/documentation/master/std/#std.Build.addObjCopy)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), source: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath), options: Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).ObjCopy[](https://ziglang.org/documentation/master/std/#std.Build.Step.ObjCopy).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.ObjCopy.Options)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).ObjCopy[](https://ziglang.org/documentation/master/std/#std.Build.Step.ObjCopy)`
`pub fn addObject[](https://ziglang.org/documentation/master/std/#std.Build.addObject)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: ObjectOptions[](https://ziglang.org/documentation/master/std/#std.Build.ObjectOptions)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)`
`pub fn addOptions[](https://ziglang.org/documentation/master/std/#std.Build.addOptions)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.Options)`
    
Create a set of key-value pairs that can be converted into a Zig source file and then inserted into a Zig compilation's module table for importing. In other words, this provides a way to expose build.zig values to Zig source code with `@import`. Related: `Module.addOptions[](https://ziglang.org/documentation/master/std/#std.Build.Module.addOptions)`. `pub fn addRemoveDirTree[](https://ziglang.org/documentation/master/std/#std.Build.addRemoveDirTree)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), dir_path: LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).RemoveDir[](https://ziglang.org/documentation/master/std/#std.Build.Step.RemoveDir)`
`pub fn addRunArtifact[](https://ziglang.org/documentation/master/std/#std.Build.addRunArtifact)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), exe: *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Run[](https://ziglang.org/documentation/master/std/#std.Build.Step.Run)`
    
Creates a `Step.Run[](https://ziglang.org/documentation/master/std/#std.Build.Step.Run)` with an executable built with `addExecutable[](https://ziglang.org/documentation/master/std/#std.Build.addExecutable)`. Add command line arguments with methods of `Step.Run[](https://ziglang.org/documentation/master/std/#std.Build.Step.Run)`. `pub fn addSearchPrefix[](https://ziglang.org/documentation/master/std/#std.Build.addSearchPrefix)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), search_prefix: []const u8) void`
`pub fn addSharedLibrary[](https://ziglang.org/documentation/master/std/#std.Build.addSharedLibrary)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: SharedLibraryOptions[](https://ziglang.org/documentation/master/std/#std.Build.SharedLibraryOptions)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)`
    
Deprecated: use `b.addLibrary(.{ ..., .linkage = .dynamic })` instead. `pub fn addStaticLibrary[](https://ziglang.org/documentation/master/std/#std.Build.addStaticLibrary)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: StaticLibraryOptions[](https://ziglang.org/documentation/master/std/#std.Build.StaticLibraryOptions)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)`
    
Deprecated: use `b.addLibrary(.{ ..., .linkage = .static })` instead. `pub fn addSystemCommand[](https://ziglang.org/documentation/master/std/#std.Build.addSystemCommand)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), argv: []const []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Run[](https://ziglang.org/documentation/master/std/#std.Build.Step.Run)`
    
Initializes a `Step.Run[](https://ziglang.org/documentation/master/std/#std.Build.Step.Run)` with argv, which must at least have the path to the executable. More command line arguments can be added with `addArg`, `addArgs`, and `addArtifactArg`. Be careful using this function, as it introduces a system dependency. To run an executable built with zig build, see `Step.Compile.run`. `pub fn addTest[](https://ziglang.org/documentation/master/std/#std.Build.addTest)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: TestOptions[](https://ziglang.org/documentation/master/std/#std.Build.TestOptions)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)`
    
Creates an executable containing unit tests. `pub fn addTranslateC[](https://ziglang.org/documentation/master/std/#std.Build.addTranslateC)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).TranslateC[](https://ziglang.org/documentation/master/std/#std.Build.Step.TranslateC).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.TranslateC.Options)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).TranslateC[](https://ziglang.org/documentation/master/std/#std.Build.Step.TranslateC)`
`pub fn addUpdateSourceFiles[](https://ziglang.org/documentation/master/std/#std.Build.addUpdateSourceFiles)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).UpdateSourceFiles[](https://ziglang.org/documentation/master/std/#std.Build.Step.UpdateSourceFiles)`
`pub fn addUserInputFlag[](https://ziglang.org/documentation/master/std/#std.Build.addUserInputFlag)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name_raw: []const u8) error{OutOfMemory}!bool`
`pub fn addUserInputOption[](https://ziglang.org/documentation/master/std/#std.Build.addUserInputOption)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name_raw: []const u8, value_raw: []const u8) error{OutOfMemory}!bool`
`pub fn addWriteFile[](https://ziglang.org/documentation/master/std/#std.Build.addWriteFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), file_path: []const u8, data: []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).WriteFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.WriteFile)`
`pub fn addWriteFiles[](https://ziglang.org/documentation/master/std/#std.Build.addWriteFiles)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).WriteFile[](https://ziglang.org/documentation/master/std/#std.Build.Step.WriteFile)`
`pub fn create[](https://ziglang.org/documentation/master/std/#std.Build.create)( graph: *Graph[](https://ziglang.org/documentation/master/std/#std.Build.Graph), build_root: Cache[](https://ziglang.org/documentation/master/std/#std.Build.Cache).Directory[](https://ziglang.org/documentation/master/std/#std.Build.Cache.Directory), cache_root: Cache[](https://ziglang.org/documentation/master/std/#std.Build.Cache).Directory[](https://ziglang.org/documentation/master/std/#std.Build.Cache.Directory), available_deps: AvailableDeps[](https://ziglang.org/documentation/master/std/#std.Build.AvailableDeps), ) error{OutOfMemory}!*Build[](https://ziglang.org/documentation/master/std/#std.Build)`
`pub fn createModule[](https://ziglang.org/documentation/master/std/#std.Build.createModule)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: Module[](https://ziglang.org/documentation/master/std/#std.Build.Module).CreateOptions[](https://ziglang.org/documentation/master/std/#std.Build.Module.CreateOptions)) *Module[](https://ziglang.org/documentation/master/std/#std.Build.Module)`
    
This function creates a private module, to be used by the current package, but not exposed to other packages depending on this one. `addModule[](https://ziglang.org/documentation/master/std/#std.Build.addModule)` can be used instead to create a public module. `pub fn dependency[](https://ziglang.org/documentation/master/std/#std.Build.dependency)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name: []const u8, args: anytype) *Dependency[](https://ziglang.org/documentation/master/std/#std.Build.Dependency)`
`pub fn dependencyFromBuildZig[](https://ziglang.org/documentation/master/std/#std.Build.dependencyFromBuildZig)( b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), comptime build_zig: type, args: anytype, ) *Dependency[](https://ziglang.org/documentation/master/std/#std.Build.Dependency)`
`pub fn dumpBadGetPathHelp[](https://ziglang.org/documentation/master/std/#std.Build.dumpBadGetPathHelp)( s: *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step), stderr: fs[](https://ziglang.org/documentation/master/std/#std.fs).File[](https://ziglang.org/documentation/master/std/#std.fs.File), src_builder: *Build[](https://ziglang.org/documentation/master/std/#std.Build), asking_step: ?*Step[](https://ziglang.org/documentation/master/std/#std.Build.Step), ) anyerror!void`
    
In this function the stderr mutex has already been locked. `pub fn dupe[](https://ziglang.org/documentation/master/std/#std.Build.dupe)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), bytes: []const u8) []u8`
    
Allocator.dupe without the need to handle out of memory. `pub fn dupeInner[](https://ziglang.org/documentation/master/std/#std.Build.dupeInner)(allocator: std[](https://ziglang.org/documentation/master/std/#std).mem[](https://ziglang.org/documentation/master/std/#std.mem).Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), bytes: []const u8) []u8`
`pub fn dupePath[](https://ziglang.org/documentation/master/std/#std.Build.dupePath)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), bytes: []const u8) []u8`
    
Duplicates a path and converts all slashes to the OS's canonical path separator. `pub fn dupeStrings[](https://ziglang.org/documentation/master/std/#std.Build.dupeStrings)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), strings: []const []const u8) [][]u8`
    
Duplicates an array of strings without the need to handle out of memory. `pub fn findProgram[](https://ziglang.org/documentation/master/std/#std.Build.findProgram)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), names: []const []const u8, paths: []const []const u8) error{FileNotFound}![]const u8`
`pub fn fmt[](https://ziglang.org/documentation/master/std/#std.Build.fmt)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), comptime format: []const u8, args: anytype) []u8`
`pub fn getInstallPath[](https://ziglang.org/documentation/master/std/#std.Build.getInstallPath)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), dir: InstallDir[](https://ziglang.org/documentation/master/std/#std.Build.InstallDir), dest_rel_path: []const u8) []const u8`
`pub fn getInstallStep[](https://ziglang.org/documentation/master/std/#std.Build.getInstallStep)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step)`
`pub fn getUninstallStep[](https://ziglang.org/documentation/master/std/#std.Build.getUninstallStep)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build)) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step)`
`pub fn hex64[](https://ziglang.org/documentation/master/std/#std.Build.hex64)(x: u64) [16]u8`
    
Deprecated; use `std.fmt.hex[](https://ziglang.org/documentation/master/std/#std.fmt.hex)` instead. `pub fn installArtifact[](https://ziglang.org/documentation/master/std/#std.Build.installArtifact)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), artifact: *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).Compile[](https://ziglang.org/documentation/master/std/#std.Build.Step.Compile)) void`
    
This creates the install step and adds it to the dependencies of the top-level install step, using all the default options. See `addInstallArtifact[](https://ziglang.org/documentation/master/std/#std.Build.addInstallArtifact)` for a more flexible function. `pub fn installBinFile[](https://ziglang.org/documentation/master/std/#std.Build.installBinFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), src_path: []const u8, dest_rel_path: []const u8) void`
    
`dest_rel_path` is relative to bin path `pub fn installDirectory[](https://ziglang.org/documentation/master/std/#std.Build.installDirectory)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: Step[](https://ziglang.org/documentation/master/std/#std.Build.Step).InstallDir[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallDir).Options[](https://ziglang.org/documentation/master/std/#std.Build.Step.InstallDir.Options)) void`
`pub fn installFile[](https://ziglang.org/documentation/master/std/#std.Build.installFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), src_path: []const u8, dest_rel_path: []const u8) void`
    
`dest_rel_path` is relative to prefix path `pub fn installLibFile[](https://ziglang.org/documentation/master/std/#std.Build.installLibFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), src_path: []const u8, dest_rel_path: []const u8) void`
    
`dest_rel_path` is relative to lib path `pub fn lazyDependency[](https://ziglang.org/documentation/master/std/#std.Build.lazyDependency)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name: []const u8, args: anytype) ?*Dependency[](https://ziglang.org/documentation/master/std/#std.Build.Dependency)`
    
When this function is called, it means that the current build does, in fact, require this dependency. If the dependency is already fetched, it proceeds in the same manner as `dependency[](https://ziglang.org/documentation/master/std/#std.Build.dependency)`. However if the dependency was not fetched, then when the build script is finished running, the build will not proceed to the make phase. Instead, the parent process will additionally fetch all the lazy dependencies that were actually required by running the build script, rebuild the build script, and then run it again. In other words, if this function returns `null` it means that the only purpose of completing the configure phase is to find out all the other lazy dependencies that are also required. It is allowed to use this function for non-lazy dependencies, in which case it will never return `null`. This allows toggling laziness via build.zig.zon without changing build.zig logic. `pub inline fn lazyImport[](https://ziglang.org/documentation/master/std/#std.Build.lazyImport)( b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), comptime asking_build_zig: type, comptime dep_name: []const u8, ) ?type`
    
In a build.zig file, this function is to `@import` what `lazyDependency[](https://ziglang.org/documentation/master/std/#std.Build.lazyDependency)` is to `dependency[](https://ziglang.org/documentation/master/std/#std.Build.dependency)`. If the dependency is lazy and has not yet been fetched, it instructs the parent process to fetch that dependency after the build script has finished running, then returns `null`. If the dependency is lazy but has already been fetched, or if it is eager, it returns the build.zig struct of that dependency, just like a regular `@import`. `pub fn makeTempPath[](https://ziglang.org/documentation/master/std/#std.Build.makeTempPath)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build)) []const u8`
    
This function is intended to be called in the `configure` phase only. It returns an absolute directory path, which is potentially going to be a source of API breakage in the future, so keep that in mind when using this function. `pub fn option[](https://ziglang.org/documentation/master/std/#std.Build.option)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), comptime T: type, name_raw: []const u8, description_raw: []const u8) ?T`
    
Creates a configuration option to be passed to the build.zig script. When a user directly runs `zig build`, they can set these options with `-D` arguments. When a project depends on a Zig package as a dependency, it programmatically sets these options when calling the dependency's build.zig script as a function. `null` is returned when an option is left to default. `pub fn parseTargetQuery[](https://ziglang.org/documentation/master/std/#std.Build.parseTargetQuery)(options: std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Query[](https://ziglang.org/documentation/master/std/#std.Target.Query).ParseOptions[](https://ziglang.org/documentation/master/std/#std.Target.Query.ParseOptions)) error{ParseFailed}!std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Query[](https://ziglang.org/documentation/master/std/#std.Target.Query)`
    
Obtain a target query from a string, reporting diagnostics to stderr if the parsing failed. Asserts that the `diagnostics` field of `options` is `null`. This use case is handled instead by calling `std.Target.Query.parse[](https://ziglang.org/documentation/master/std/#std.Target.Query.parse)` directly. `pub fn path[](https://ziglang.org/documentation/master/std/#std.Build.path)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), sub_path: []const u8) LazyPath[](https://ziglang.org/documentation/master/std/#std.Build.LazyPath)`
    
References a file or directory relative to the source root. `pub fn pathFromRoot[](https://ziglang.org/documentation/master/std/#std.Build.pathFromRoot)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), sub_path: []const u8) []u8`
    
This is low-level implementation details of the build system, not meant to be called by users' build scripts. Even in the build system itself it is a code smell to call this function. `pub fn pathJoin[](https://ziglang.org/documentation/master/std/#std.Build.pathJoin)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), paths: []const []const u8) []u8`
`pub fn pathResolve[](https://ziglang.org/documentation/master/std/#std.Build.pathResolve)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), paths: []const []const u8) []u8`
`pub fn resolveInstallPrefix[](https://ziglang.org/documentation/master/std/#std.Build.resolveInstallPrefix)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), install_prefix: ?[]const u8, dir_list: DirList[](https://ziglang.org/documentation/master/std/#std.Build.DirList)) void`
    
This function is intended to be called by lib/build_runner.zig, not a build.zig file. `pub fn resolveTargetQuery[](https://ziglang.org/documentation/master/std/#std.Build.resolveTargetQuery)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), query: Target[](https://ziglang.org/documentation/master/std/#std.Target).Query[](https://ziglang.org/documentation/master/std/#std.Target.Query)) ResolvedTarget[](https://ziglang.org/documentation/master/std/#std.Build.ResolvedTarget)`
    
Converts a target query into a fully resolved target that can be passed to various parts of the API. `pub fn run[](https://ziglang.org/documentation/master/std/#std.Build.run)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), argv: []const []const u8) []u8`
    
This is a helper function to be called from build.zig scripts, _not_ from inside step make() functions. If any errors occur, it fails the build with a helpful message. `pub fn runAllowFail[](https://ziglang.org/documentation/master/std/#std.Build.runAllowFail)( b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), argv: []const []const u8, out_code: *u8, stderr_behavior: std[](https://ziglang.org/documentation/master/std/#std).process[](https://ziglang.org/documentation/master/std/#std.process).Child[](https://ziglang.org/documentation/master/std/#std.process.Child).StdIo[](https://ziglang.org/documentation/master/std/#std.process.Child.StdIo), ) RunError[](https://ziglang.org/documentation/master/std/#std.Build.RunError)![]u8`
`pub fn runBuild[](https://ziglang.org/documentation/master/std/#std.Build.runBuild)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), build_zig: anytype) anyerror!void`
`pub fn standardOptimizeOption[](https://ziglang.org/documentation/master/std/#std.Build.standardOptimizeOption)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), options: StandardOptimizeOptionOptions[](https://ziglang.org/documentation/master/std/#std.Build.StandardOptimizeOptionOptions)) std[](https://ziglang.org/documentation/master/std/#std).builtin[](https://ziglang.org/documentation/master/std/#std.builtin).OptimizeMode[](https://ziglang.org/documentation/master/std/#std.builtin.OptimizeMode)`
`pub fn standardTargetOptions[](https://ziglang.org/documentation/master/std/#std.Build.standardTargetOptions)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), args: StandardTargetOptionsArgs[](https://ziglang.org/documentation/master/std/#std.Build.StandardTargetOptionsArgs)) ResolvedTarget[](https://ziglang.org/documentation/master/std/#std.Build.ResolvedTarget)`
    
Exposes standard `zig build` options for choosing a target and additionally resolves the target query. `pub fn standardTargetOptionsQueryOnly[](https://ziglang.org/documentation/master/std/#std.Build.standardTargetOptionsQueryOnly)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), args: StandardTargetOptionsArgs[](https://ziglang.org/documentation/master/std/#std.Build.StandardTargetOptionsArgs)) Target[](https://ziglang.org/documentation/master/std/#std.Target).Query[](https://ziglang.org/documentation/master/std/#std.Target.Query)`
    
Exposes standard `zig build` options for choosing a target. `pub fn step[](https://ziglang.org/documentation/master/std/#std.Build.step)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name: []const u8, description: []const u8) *Step[](https://ziglang.org/documentation/master/std/#std.Build.Step)`
`pub fn systemIntegrationOption[](https://ziglang.org/documentation/master/std/#std.Build.systemIntegrationOption)( b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), name: []const u8, config: SystemIntegrationOptionConfig[](https://ziglang.org/documentation/master/std/#std.Build.SystemIntegrationOptionConfig), ) bool`
`pub fn truncateFile[](https://ziglang.org/documentation/master/std/#std.Build.truncateFile)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build), dest_path: []const u8) (fs[](https://ziglang.org/documentation/master/std/#std.fs).Dir[](https://ziglang.org/documentation/master/std/#std.fs.Dir).MakeError[](https://ziglang.org/documentation/master/std/#std.fs.Dir.MakeError) || fs[](https://ziglang.org/documentation/master/std/#std.fs).Dir[](https://ziglang.org/documentation/master/std/#std.fs.Dir).StatFileError[](https://ziglang.org/documentation/master/std/#std.fs.Dir.StatFileError))!void`
`pub fn validateUserInputDidItFail[](https://ziglang.org/documentation/master/std/#std.Build.validateUserInputDidItFail)(b: *Build[](https://ziglang.org/documentation/master/std/#std.Build)) bool`
`pub fn wantSharedLibSymLinks[](https://ziglang.org/documentation/master/std/#std.Build.wantSharedLibSymLinks)(target: Target[](https://ziglang.org/documentation/master/std/#std.Target)) bool`

## Error Sets
  * [PkgConfigError](https://ziglang.org/documentation/master/std/#std.Build.PkgConfigError)
  * [RunError](https://ziglang.org/documentation/master/std/#std.Build.RunError)


## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
