[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [buf_map](https://ziglang.org/documentation/master/std/#std.buf_map)
  * [BufMap](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/buf_map.zig)
BufMap copies keys and values before they go into the map and frees them when they get removed.
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
hash_map: BufMapHashMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.BufMapHashMap)
```

## Types
## Namespaces
## Global Variables
## Values
## Functions `pub fn count[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.count)(self: BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap)) BufMapHashMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.BufMapHashMap).Size[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.BufMapHashMap.Size)`
    
Returns the number of KV pairs stored in the map. `pub fn deinit[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.deinit)(self: *BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap)) void`
    
Free the backing storage of the map, as well as all of the stored keys and values. `pub fn get[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.get)(self: BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap), key: []const u8) ?[]const u8`
    
Return the map's copy of the value associated with a key. The returned string is invalidated if this key is removed from the map. `pub fn getPtr[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.getPtr)(self: BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap), key: []const u8) ?*[]const u8`
    
Find the address of the value associated with a key. The returned pointer is invalidated if the map resizes. `pub fn init[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.init)(allocator: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap)`
    
Create a BufMap backed by a specific allocator. That allocator will be used for both backing allocations and string deduplication. `pub fn iterator[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.iterator)(self: *const BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap)) BufMapHashMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.BufMapHashMap).Iterator[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.BufMapHashMap.Iterator)`
    
Returns an iterator over entries in the map. `pub fn put[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.put)(self: *BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap), key: []const u8, value: []const u8) !void`
    
`key` and `value` are copied into the BufMap. `pub fn putMove[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.putMove)(self: *BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap), key: []u8, value: []u8) !void`
    
Same as `put` but the key and value become owned by the BufMap rather than being copied. If `putMove` fails, the ownership of key and value does not transfer. `pub fn remove[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap.remove)(self: *BufMap[](https://ziglang.org/documentation/master/std/#std.buf_map.BufMap), key: []const u8) void`
    
Removes the item from the map and frees its value. This invalidates the value returned by get() for this key.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
