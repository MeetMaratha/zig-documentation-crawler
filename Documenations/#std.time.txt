[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [time](https://ziglang.org/documentation/master/std/#std.time)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/time.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [Instant](https://ziglang.org/documentation/master/std/#std.time.Instant)
  * [Timer](https://ziglang.org/documentation/master/std/#std.time.Timer)


## Namespaces
  * [epoch](https://ziglang.org/documentation/master/std/#std.time.epoch)


## Global Variables
## Values
[ms_per_day](https://ziglang.org/documentation/master/std/#std.time.ms_per_day)| |   
---|---|---  
[ms_per_hour](https://ziglang.org/documentation/master/std/#std.time.ms_per_hour)| |   
[ms_per_min](https://ziglang.org/documentation/master/std/#std.time.ms_per_min)| |   
[ms_per_s](https://ziglang.org/documentation/master/std/#std.time.ms_per_s)| |   
[ms_per_week](https://ziglang.org/documentation/master/std/#std.time.ms_per_week)| |   
[ns_per_day](https://ziglang.org/documentation/master/std/#std.time.ns_per_day)| |   
[ns_per_hour](https://ziglang.org/documentation/master/std/#std.time.ns_per_hour)| |   
[ns_per_min](https://ziglang.org/documentation/master/std/#std.time.ns_per_min)| |   
[ns_per_ms](https://ziglang.org/documentation/master/std/#std.time.ns_per_ms)| |   
[ns_per_s](https://ziglang.org/documentation/master/std/#std.time.ns_per_s)| |   
[ns_per_us](https://ziglang.org/documentation/master/std/#std.time.ns_per_us)| |   
[ns_per_week](https://ziglang.org/documentation/master/std/#std.time.ns_per_week)| |   
[s_per_day](https://ziglang.org/documentation/master/std/#std.time.s_per_day)| |   
[s_per_hour](https://ziglang.org/documentation/master/std/#std.time.s_per_hour)| |   
[s_per_min](https://ziglang.org/documentation/master/std/#std.time.s_per_min)| |   
[s_per_week](https://ziglang.org/documentation/master/std/#std.time.s_per_week)| |   
[us_per_day](https://ziglang.org/documentation/master/std/#std.time.us_per_day)| |   
[us_per_hour](https://ziglang.org/documentation/master/std/#std.time.us_per_hour)| |   
[us_per_min](https://ziglang.org/documentation/master/std/#std.time.us_per_min)| |   
[us_per_ms](https://ziglang.org/documentation/master/std/#std.time.us_per_ms)| |   
[us_per_s](https://ziglang.org/documentation/master/std/#std.time.us_per_s)| |   
[us_per_week](https://ziglang.org/documentation/master/std/#std.time.us_per_week)| |   
## Functions `pub fn microTimestamp[](https://ziglang.org/documentation/master/std/#std.time.microTimestamp)() i64`
    
Get a calendar timestamp, in microseconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. The return value is signed because it is possible to have a date that is before the epoch. See `posix.clock_gettime[](https://ziglang.org/documentation/master/std/#std.posix.clock_gettime)` for a POSIX timestamp. `pub fn milliTimestamp[](https://ziglang.org/documentation/master/std/#std.time.milliTimestamp)() i64`
    
Get a calendar timestamp, in milliseconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. The return value is signed because it is possible to have a date that is before the epoch. See `posix.clock_gettime[](https://ziglang.org/documentation/master/std/#std.posix.clock_gettime)` for a POSIX timestamp. `pub fn nanoTimestamp[](https://ziglang.org/documentation/master/std/#std.time.nanoTimestamp)() i128`
    
Get a calendar timestamp, in nanoseconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. On Windows this has a maximum granularity of 100 nanoseconds. The return value is signed because it is possible to have a date that is before the epoch. See `posix.clock_gettime[](https://ziglang.org/documentation/master/std/#std.posix.clock_gettime)` for a POSIX timestamp. `pub fn sleep[](https://ziglang.org/documentation/master/std/#std.Thread.sleep)(nanoseconds: u64) void`
    
Spurious wakeups are possible and no precision of timing is guaranteed. `pub fn timestamp[](https://ziglang.org/documentation/master/std/#std.time.timestamp)() i64`
    
Get a calendar timestamp, in seconds, relative to UTC 1970-01-01. Precision of timing depends on the hardware and operating system. The return value is signed because it is possible to have a date that is before the epoch. See `posix.clock_gettime[](https://ziglang.org/documentation/master/std/#std.posix.clock_gettime)` for a POSIX timestamp.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
