[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [buf_set](https://ziglang.org/documentation/master/std/#std.buf_set)
  * [BufSet](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/buf_set.zig)
A BufSet is a set of strings. The BufSet duplicates strings internally, and never takes ownership of strings which are passed to it.
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
```
hash_map: BufSetHashMap[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.BufSetHashMap)
```

## Types
## Namespaces
## Global Variables
## Values
[Iterator](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.Iterator)| |   
---|---|---  
## Functions `pub fn allocator[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.allocator)(self: *const BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)`
    
Get the allocator used by this set `pub fn clone[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.clone)(self: *const BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)`
    
Creates a copy of this BufSet, using the same allocator. `pub fn cloneWithAllocator[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.cloneWithAllocator)( self: *const BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet), new_allocator: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), ) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)`
    
Creates a copy of this BufSet, using a specified allocator. `pub fn contains[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.contains)(self: BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet), value: []const u8) bool`
    
Check if the set contains an item matching the passed string `pub fn count[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.count)(self: *const BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)) usize`
    
Returns the number of items stored in the set `pub fn deinit[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.deinit)(self: *BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)) void`
    
Free a BufSet along with all stored keys. `pub fn init[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.init)(a: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator)) BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)`
    
Create a BufSet using an allocator. The allocator will be used internally for both backing allocations and string duplication. `pub fn insert[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.insert)(self: *BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet), value: []const u8) !void`
    
Insert an item into the BufSet. The item will be copied, so the caller may delete or reuse the passed string immediately. `pub fn iterator[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.iterator)(self: *const BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet)) Iterator[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.Iterator)`
    
Returns an iterator over the items stored in the set. Iteration order is arbitrary. `pub fn remove[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet.remove)(self: *BufSet[](https://ziglang.org/documentation/master/std/#std.buf_set.BufSet), value: []const u8) void`
    
Remove an item from the set.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
