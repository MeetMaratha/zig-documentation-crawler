[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [zig](https://ziglang.org/documentation/master/std/#std.zig)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/zig.zig)
Builds of the Zig compiler are distributed partly in source form. That source lives here. These APIs are provided as-is and have absolutely no API guarantees whatsoever.
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [Ast](https://ziglang.org/documentation/master/std/#std.zig.Ast)
  * [AstGen](https://ziglang.org/documentation/master/std/#std.zig.AstGen)
  * [AstRlAnnotate](https://ziglang.org/documentation/master/std/#std.zig.AstRlAnnotate)
  * [BinNameOptions](https://ziglang.org/documentation/master/std/#std.zig.BinNameOptions)
  * [BuildId](https://ziglang.org/documentation/master/std/#std.zig.BuildId)
  * [BuiltinFn](https://ziglang.org/documentation/master/std/#std.zig.BuiltinFn)
  * [Color](https://ziglang.org/documentation/master/std/#std.zig.Color)
  * [EnvVar](https://ziglang.org/documentation/master/std/#std.zig.EnvVar)
  * [ErrorBundle](https://ziglang.org/documentation/master/std/#std.zig.ErrorBundle)
  * [LibCDirs](https://ziglang.org/documentation/master/std/#std.zig.LibCDirs)
  * [LibCInstallation](https://ziglang.org/documentation/master/std/#std.zig.LibCInstallation)
  * [Loc](https://ziglang.org/documentation/master/std/#std.zig.Loc)
  * [LtoMode](https://ziglang.org/documentation/master/std/#std.zig.LtoMode)
  * [ParsedCharLiteral](https://ziglang.org/documentation/master/std/#std.zig.string_literal.ParsedCharLiteral)
  * [SanitizeC](https://ziglang.org/documentation/master/std/#std.zig.SanitizeC)
  * [Server](https://ziglang.org/documentation/master/std/#std.zig.Server)
  * [SimpleComptimeReason](https://ziglang.org/documentation/master/std/#std.zig.SimpleComptimeReason)
  * [SrcHash](https://ziglang.org/documentation/master/std/#std.zig.SrcHash)
  * [SrcHasher](https://ziglang.org/documentation/master/std/#std.crypto.blake3.Blake3)
  * [Token](https://ziglang.org/documentation/master/std/#std.zig.tokenizer.Token)
  * [Tokenizer](https://ziglang.org/documentation/master/std/#std.zig.tokenizer.Tokenizer)
  * [WindowsSdk](https://ziglang.org/documentation/master/std/#std.zig.WindowsSdk)
  * [Zir](https://ziglang.org/documentation/master/std/#std.zig.Zir)
  * [Zoir](https://ziglang.org/documentation/master/std/#std.zig.Zoir)
  * [ZonGen](https://ziglang.org/documentation/master/std/#std.zig.ZonGen)


## Namespaces
  * [Client](https://ziglang.org/documentation/master/std/#std.zig.Client)
  * [c_builtins](https://ziglang.org/documentation/master/std/#std.zig.c_builtins)
  * [c_translation](https://ziglang.org/documentation/master/std/#std.zig.c_translation)
  * [llvm](https://ziglang.org/documentation/master/std/#std.zig.llvm)
  * [number_literal](https://ziglang.org/documentation/master/std/#std.zig.number_literal)
  * [primitives](https://ziglang.org/documentation/master/std/#std.zig.primitives)
  * [string_literal](https://ziglang.org/documentation/master/std/#std.zig.string_literal)
  * [system](https://ziglang.org/documentation/master/std/#std.zig.system)
  * [target](https://ziglang.org/documentation/master/std/#std.zig.target)


## Global Variables
## Values
[CrossTarget](https://ziglang.org/documentation/master/std/#std.zig.CrossTarget)| |   
---|---|---  
[max_src_size](https://ziglang.org/documentation/master/std/#std.zig.max_src_size)| | There are many assumptions in the entire codebase that Zig source files can be byte-indexed with a u32 integer.  
## Functions `pub fn binNameAlloc[](https://ziglang.org/documentation/master/std/#std.zig.binNameAlloc)(allocator: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), options: BinNameOptions[](https://ziglang.org/documentation/master/std/#std.zig.BinNameOptions)) error{OutOfMemory}![]u8`
    
Returns the standard file system basename of a binary generated by the Zig compiler. `pub fn fatal[](https://ziglang.org/documentation/master/std/#std.process.fatal)(comptime format: []const u8, format_arguments: anytype) noreturn`
    
Logs an error and then terminates the process with exit code 1. `pub fn findLineColumn[](https://ziglang.org/documentation/master/std/#std.zig.findLineColumn)(source: []const u8, byte_offset: usize) Loc[](https://ziglang.org/documentation/master/std/#std.zig.Loc)`
`pub fn fmtEscapes[](https://ziglang.org/documentation/master/std/#std.zig.fmtEscapes)(bytes: []const u8) std[](https://ziglang.org/documentation/master/std/#std).fmt[](https://ziglang.org/documentation/master/std/#std.fmt).Formatter[](https://ziglang.org/documentation/master/std/#std.fmt.Formatter)(stringEscape[](https://ziglang.org/documentation/master/std/#std.zig.stringEscape))`
    
Return a Formatter for Zig Escapes of a double quoted string. The format specifier must be one of:
  * `{}` treats contents as a double-quoted string.
  * `{'}` treats contents as a single-quoted string.

`pub fn fmtId[](https://ziglang.org/documentation/master/std/#std.zig.fmtId)(bytes: []const u8) std[](https://ziglang.org/documentation/master/std/#std).fmt[](https://ziglang.org/documentation/master/std/#std.fmt).Formatter[](https://ziglang.org/documentation/master/std/#std.fmt.Formatter)(formatId[](https://ziglang.org/documentation/master/std/#std.zig.formatId))`
    
Return a Formatter for a Zig identifier, escaping it with `@""` syntax if needed. `pub fn hashName[](https://ziglang.org/documentation/master/std/#std.zig.hashName)(parent_hash: SrcHash[](https://ziglang.org/documentation/master/std/#std.zig.SrcHash), sep: []const u8, name: []const u8) SrcHash[](https://ziglang.org/documentation/master/std/#std.zig.SrcHash)`
`pub fn hashSrc[](https://ziglang.org/documentation/master/std/#std.zig.hashSrc)(src: []const u8) SrcHash[](https://ziglang.org/documentation/master/std/#std.zig.SrcHash)`
`pub fn isPrimitive[](https://ziglang.org/documentation/master/std/#std.zig.primitives.isPrimitive)(name: []const u8) bool`
    
Returns true if a name matches a primitive type or value, excluding `_`. Integer type names like `u8` or `i32` are only matched for syntax, so this will still return true when they have an oversized bit count or leading zeroes. `pub fn isUnderscore[](https://ziglang.org/documentation/master/std/#std.zig.isUnderscore)(bytes: []const u8) bool`
`pub fn isValidId[](https://ziglang.org/documentation/master/std/#std.zig.isValidId)(bytes: []const u8) bool`
`pub fn lineDelta[](https://ziglang.org/documentation/master/std/#std.zig.lineDelta)(source: []const u8, start: usize, end: usize) isize`
`pub fn parseCharLiteral[](https://ziglang.org/documentation/master/std/#std.zig.string_literal.parseCharLiteral)(slice: []const u8) ParsedCharLiteral[](https://ziglang.org/documentation/master/std/#std.zig.string_literal.ParsedCharLiteral)`
    
Asserts the slice starts and ends with single-quotes. Returns an error if there is not exactly one UTF-8 codepoint in between. `pub fn parseNumberLiteral[](https://ziglang.org/documentation/master/std/#std.zig.number_literal.parseNumberLiteral)(bytes: []const u8) Result[](https://ziglang.org/documentation/master/std/#std.zig.number_literal.Result)`
    
Parse Zig number literal accepted by fmt.parseInt, fmt.parseFloat and big_int.setString. Valid for any input. `pub fn parseTargetQueryOrReportFatalError[](https://ziglang.org/documentation/master/std/#std.zig.parseTargetQueryOrReportFatalError)( allocator: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), opts: std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Query[](https://ziglang.org/documentation/master/std/#std.Target.Query).ParseOptions[](https://ziglang.org/documentation/master/std/#std.Target.Query.ParseOptions), ) std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Query[](https://ziglang.org/documentation/master/std/#std.Target.Query)`
`pub fn printAstErrorsToStderr[](https://ziglang.org/documentation/master/std/#std.zig.printAstErrorsToStderr)(gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), tree: Ast[](https://ziglang.org/documentation/master/std/#std.zig.Ast), path: []const u8, color: Color[](https://ziglang.org/documentation/master/std/#std.zig.Color)) !void`
`pub fn putAstErrorsIntoBundle[](https://ziglang.org/documentation/master/std/#std.zig.putAstErrorsIntoBundle)( gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), tree: Ast[](https://ziglang.org/documentation/master/std/#std.zig.Ast), path: []const u8, wip_errors: *std[](https://ziglang.org/documentation/master/std/#std).zig[](https://ziglang.org/documentation/master/std/#std.zig).ErrorBundle[](https://ziglang.org/documentation/master/std/#std.zig.ErrorBundle).Wip[](https://ziglang.org/documentation/master/std/#std.zig.ErrorBundle.Wip), ) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
`pub fn readSourceFileToEndAlloc[](https://ziglang.org/documentation/master/std/#std.zig.readSourceFileToEndAlloc)(gpa: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), input: std[](https://ziglang.org/documentation/master/std/#std).fs[](https://ziglang.org/documentation/master/std/#std.fs).File[](https://ziglang.org/documentation/master/std/#std.fs.File), size_hint: ?usize) ![:0]u8`
`pub fn resolveTargetQueryOrFatal[](https://ziglang.org/documentation/master/std/#std.zig.resolveTargetQueryOrFatal)(target_query: std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Query[](https://ziglang.org/documentation/master/std/#std.Target.Query)) std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target)`
`pub fn serializeCpu[](https://ziglang.org/documentation/master/std/#std.zig.serializeCpu)(buffer: *std[](https://ziglang.org/documentation/master/std/#std).ArrayList[](https://ziglang.org/documentation/master/std/#std.ArrayList)(u8), cpu: std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Cpu[](https://ziglang.org/documentation/master/std/#std.Target.Cpu)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)!void`
    
Renders a `std.Target.Cpu[](https://ziglang.org/documentation/master/std/#std.Target.Cpu)` value into a textual representation that can be parsed via the `-mcpu` flag passed to the Zig compiler. Appends the result to `buffer`. `pub fn serializeCpuAlloc[](https://ziglang.org/documentation/master/std/#std.zig.serializeCpuAlloc)(ally: Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator), cpu: std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Cpu[](https://ziglang.org/documentation/master/std/#std.Target.Cpu)) Allocator[](https://ziglang.org/documentation/master/std/#std.mem.Allocator).Error[](https://ziglang.org/documentation/master/std/#std.mem.Allocator.Error)![]u8`
`pub fn srcHashEql[](https://ziglang.org/documentation/master/std/#std.zig.srcHashEql)(a: SrcHash[](https://ziglang.org/documentation/master/std/#std.zig.SrcHash), b: SrcHash[](https://ziglang.org/documentation/master/std/#std.zig.SrcHash)) bool`
`pub fn stringEscape[](https://ziglang.org/documentation/master/std/#std.zig.stringEscape)( bytes: []const u8, comptime f: []const u8, options: std[](https://ziglang.org/documentation/master/std/#std).fmt[](https://ziglang.org/documentation/master/std/#std.fmt).FormatOptions[](https://ziglang.org/documentation/master/std/#std.fmt.FormatOptions), writer: anytype, ) !void`
    
Print the string as escaped contents of a double quoted or single-quoted string. Format `{}` treats contents as a double-quoted string. Format `{'}` treats contents as a single-quoted string.
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
