[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [simd](https://ziglang.org/documentation/master/std/#std.simd)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/simd.zig)
SIMD (Single Instruction; Multiple Data) convenience functions.
May offer a potential boost in performance on some targets by performing the same operation on multiple elements at once.
Some functions are known to not work on MIPS.
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [VectorCount](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)
  * [VectorIndex](https://ziglang.org/documentation/master/std/#std.simd.VectorIndex)


## Namespaces
## Global Variables
## Values
## Functions `pub fn countElementsWithValue[](https://ziglang.org/documentation/master/std/#std.simd.countElementsWithValue)(vec: anytype, value: std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vec))) VectorCount[](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)(@TypeOf(vec))`
`pub fn countTrues[](https://ziglang.org/documentation/master/std/#std.simd.countTrues)(vec: anytype) VectorCount[](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)(@TypeOf(vec))`
`pub fn deinterlace[](https://ziglang.org/documentation/master/std/#std.simd.deinterlace)( comptime vec_count: usize, interlaced: anytype, ) [vec_count]@Vector( vectorLength[](https://ziglang.org/documentation/master/std/#std.simd.vectorLength)(@TypeOf(interlaced)) / vec_count, std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(interlaced)), )`
    
The contents of `interlaced` is evenly split between vec_count vectors that are returned as an array. They "take turns", receiving one element from `interlaced` at a time. `pub fn extract[](https://ziglang.org/documentation/master/std/#std.simd.extract)( vec: anytype, comptime first: VectorIndex[](https://ziglang.org/documentation/master/std/#std.simd.VectorIndex)(@TypeOf(vec)), comptime count: VectorCount[](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)(@TypeOf(vec)), ) @Vector(count, std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vec)))`
`pub fn firstIndexOfValue[](https://ziglang.org/documentation/master/std/#std.simd.firstIndexOfValue)(vec: anytype, value: std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vec))) ?VectorIndex[](https://ziglang.org/documentation/master/std/#std.simd.VectorIndex)(@TypeOf(vec))`
`pub fn firstTrue[](https://ziglang.org/documentation/master/std/#std.simd.firstTrue)(vec: anytype) ?VectorIndex[](https://ziglang.org/documentation/master/std/#std.simd.VectorIndex)(@TypeOf(vec))`
`pub fn interlace[](https://ziglang.org/documentation/master/std/#std.simd.interlace)(vecs: anytype) @Vector(vectorLength[](https://ziglang.org/documentation/master/std/#std.simd.vectorLength)(@TypeOf(vecs[0])) * vecs.len, std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vecs[0])))`
    
Returns a vector whose elements alternates between those of each input vector. For example, `interlace(.{[4]u32{11, 12, 13, 14}, [4]u32{21, 22, 23, 24}})` returns a vector containing `.{11, 21, 12, 22, 13, 23, 14, 24}`. `pub inline fn iota[](https://ziglang.org/documentation/master/std/#std.simd.iota)(comptime T: type, comptime len: usize) @Vector(len, T)`
    
Returns a vector containing the first `len` integers in order from 0 to `len`-1. For example, `iota(i32, 8)` will return a vector containing `.{0, 1, 2, 3, 4, 5, 6, 7}`. `pub fn join[](https://ziglang.org/documentation/master/std/#std.simd.join)(a: anytype, b: anytype) @Vector(vectorLength[](https://ziglang.org/documentation/master/std/#std.simd.vectorLength)(@TypeOf(a)) + vectorLength[](https://ziglang.org/documentation/master/std/#std.simd.vectorLength)(@TypeOf(b)), std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(a)))`
    
Returns a vector containing all elements of the first vector at the lower indices followed by all elements of the second vector at the higher indices. `pub fn lastIndexOfValue[](https://ziglang.org/documentation/master/std/#std.simd.lastIndexOfValue)(vec: anytype, value: std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vec))) ?VectorIndex[](https://ziglang.org/documentation/master/std/#std.simd.VectorIndex)(@TypeOf(vec))`
`pub fn lastTrue[](https://ziglang.org/documentation/master/std/#std.simd.lastTrue)(vec: anytype) ?VectorIndex[](https://ziglang.org/documentation/master/std/#std.simd.VectorIndex)(@TypeOf(vec))`
`pub fn mergeShift[](https://ziglang.org/documentation/master/std/#std.simd.mergeShift)(a: anytype, b: anytype, comptime shift: VectorCount[](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)(@TypeOf(a, b))) @TypeOf(a, b)`
    
Joins two vectors, shifts them leftwards (towards lower indices) and extracts the leftmost elements into a vector the length of a and b. `pub fn prefixScan[](https://ziglang.org/documentation/master/std/#std.simd.prefixScan)(comptime op: std[](https://ziglang.org/documentation/master/std/#std).builtin[](https://ziglang.org/documentation/master/std/#std.builtin).ReduceOp[](https://ziglang.org/documentation/master/std/#std.builtin.ReduceOp), comptime hop: isize, vec: anytype) @TypeOf(vec)`
    
Returns a vector whose elements are the result of performing the specified operation on the corresponding element of the input vector and every hop'th element that came before it (or after, if hop is negative). Supports the same operations as the @reduce() builtin. Takes O(logN) to compute. The scan is not linear, which may affect floating point errors. This may affect the determinism of algorithms that use this function. `pub fn prefixScanWithFunc[](https://ziglang.org/documentation/master/std/#std.simd.prefixScanWithFunc)( comptime hop: isize, vec: anytype, comptime ErrorType: type, comptime func: fn (@TypeOf(vec), @TypeOf(vec)) if (ErrorType == void) @TypeOf(vec) else ErrorType!@TypeOf(vec), comptime identity: std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vec)), ) if (ErrorType == void) @TypeOf(vec) else ErrorType!@TypeOf(vec)`
    
Same as prefixScan, but with a user-provided, mathematically associative function. `pub fn repeat[](https://ziglang.org/documentation/master/std/#std.simd.repeat)(comptime len: usize, vec: anytype) @Vector(len, std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vec)))`
    
Returns a vector containing the same elements as the input, but repeated until the desired length is reached. For example, `repeat(8, [_]u32{1, 2, 3})` will return a vector containing `.{1, 2, 3, 1, 2, 3, 1, 2}`. `pub fn reverseOrder[](https://ziglang.org/documentation/master/std/#std.simd.reverseOrder)(vec: anytype) @TypeOf(vec)`
`pub fn rotateElementsLeft[](https://ziglang.org/documentation/master/std/#std.simd.rotateElementsLeft)(vec: anytype, comptime amount: VectorCount[](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)(@TypeOf(vec))) @TypeOf(vec)`
    
Elements are shifted leftwards (towards lower indices). Elements that leave to the left will reappear to the right in the same order. `pub fn rotateElementsRight[](https://ziglang.org/documentation/master/std/#std.simd.rotateElementsRight)(vec: anytype, comptime amount: VectorCount[](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)(@TypeOf(vec))) @TypeOf(vec)`
    
Elements are shifted rightwards (towards higher indices). Elements that leave to the right will reappear to the left in the same order. `pub fn shiftElementsLeft[](https://ziglang.org/documentation/master/std/#std.simd.shiftElementsLeft)(vec: anytype, comptime amount: VectorCount[](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)(@TypeOf(vec)), shift_in: std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vec))) @TypeOf(vec)`
    
Elements are shifted leftwards (towards lower indices). New elements are added to the right, and the leftmost elements are cut off so that no elements with indices below 0 remain. `pub fn shiftElementsRight[](https://ziglang.org/documentation/master/std/#std.simd.shiftElementsRight)(vec: anytype, comptime amount: VectorCount[](https://ziglang.org/documentation/master/std/#std.simd.VectorCount)(@TypeOf(vec)), shift_in: std[](https://ziglang.org/documentation/master/std/#std).meta[](https://ziglang.org/documentation/master/std/#std.meta).Child[](https://ziglang.org/documentation/master/std/#std.meta.Child)(@TypeOf(vec))) @TypeOf(vec)`
    
Elements are shifted rightwards (towards higher indices). New elements are added to the left, and the rightmost elements are cut off so that the length of the vector stays the same. `pub fn suggestVectorLength[](https://ziglang.org/documentation/master/std/#std.simd.suggestVectorLength)(comptime T: type) ?comptime_int`
    
Suggests a target-dependant vector length for a given type, or null if scalars are recommended. Not yet implemented for every CPU architecture. `pub fn suggestVectorLengthForCpu[](https://ziglang.org/documentation/master/std/#std.simd.suggestVectorLengthForCpu)(comptime T: type, comptime cpu: std[](https://ziglang.org/documentation/master/std/#std).Target[](https://ziglang.org/documentation/master/std/#std.Target).Cpu[](https://ziglang.org/documentation/master/std/#std.Target.Cpu)) ?comptime_int`

## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
