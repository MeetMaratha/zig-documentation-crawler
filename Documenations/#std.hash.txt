[ ](https://ziglang.org/documentation/master/std/)
  * [std](https://ziglang.org/documentation/master/std/#std)
  * [hash](https://ziglang.org/documentation/master/std/#std.hash)


Loading...
# struct[[src]](https://ziglang.org/documentation/master/std/#src/std/hash.zig)
## Parameters
## Errors
anyerror means the error set is known only at runtime.
## Search Results
## No Results Found
Press escape to exit search and then '?' to see more options.
## Fields
## Types
  * [Adler32](https://ziglang.org/documentation/master/std/#std.hash.adler.Adler32)
  * [Crc32](https://ziglang.org/documentation/master/std/#std.hash.crc.Crc32IsoHdlc)
  * [Fnv1a_128](https://ziglang.org/documentation/master/std/#std.hash.fnv.Fnv1a_128)
  * [Fnv1a_32](https://ziglang.org/documentation/master/std/#std.hash.fnv.Fnv1a_32)
  * [Fnv1a_64](https://ziglang.org/documentation/master/std/#std.hash.fnv.Fnv1a_64)
  * [SipHash128](https://ziglang.org/documentation/master/std/#std.crypto.siphash.SipHash128)
  * [SipHash64](https://ziglang.org/documentation/master/std/#std.crypto.siphash.SipHash64)
  * [Strategy](https://ziglang.org/documentation/master/std/#std.hash.auto_hash.HashStrategy)
  * [Wyhash](https://ziglang.org/documentation/master/std/#std.hash.wyhash.Wyhash)
  * [XxHash3](https://ziglang.org/documentation/master/std/#std.hash.xxhash.XxHash3)
  * [XxHash32](https://ziglang.org/documentation/master/std/#std.hash.xxhash.XxHash32)
  * [XxHash64](https://ziglang.org/documentation/master/std/#std.hash.xxhash.XxHash64)


## Namespaces
  * [CityHash32](https://ziglang.org/documentation/master/std/#std.hash.cityhash.CityHash32)
  * [CityHash64](https://ziglang.org/documentation/master/std/#std.hash.cityhash.CityHash64)
  * [Murmur2_32](https://ziglang.org/documentation/master/std/#std.hash.murmur.Murmur2_32)
  * [Murmur2_64](https://ziglang.org/documentation/master/std/#std.hash.murmur.Murmur2_64)
  * [Murmur3_32](https://ziglang.org/documentation/master/std/#std.hash.murmur.Murmur3_32)
  * [RapidHash](https://ziglang.org/documentation/master/std/#std.hash.RapidHash)
  * [cityhash](https://ziglang.org/documentation/master/std/#std.hash.cityhash)
  * [crc](https://ziglang.org/documentation/master/std/#std.hash.crc)
  * [murmur](https://ziglang.org/documentation/master/std/#std.hash.murmur)


## Global Variables
## Values
## Functions `pub fn autoHash[](https://ziglang.org/documentation/master/std/#std.hash.auto_hash.autoHash)(hasher: anytype, key: anytype) void`
    
Provides generic hashing for any eligible type. Only hashes `key` itself, pointers are not followed. Slices as well as unions and structs containing slices are rejected to avoid ambiguity on the user's intention. `pub fn hash[](https://ziglang.org/documentation/master/std/#std.hash.auto_hash.hash)(hasher: anytype, key: anytype, comptime strat: HashStrategy[](https://ziglang.org/documentation/master/std/#std.hash.auto_hash.HashStrategy)) void`
    
Provides generic hashing for any eligible type. Strategy is provided to determine if pointers should be followed or not. `pub fn int[](https://ziglang.org/documentation/master/std/#std.hash.int)(input: anytype) @TypeOf(input)`
    
Integer-to-integer hashing for bit widths <= 256. `pub fn uint32[](https://ziglang.org/documentation/master/std/#std.hash.uint32)(input: u32) u32`
    
DEPRECATED: use std.hash.int() Source: <https://github.com/skeeto/hash-prospector>
## Error Sets
## Example Usage
## Source Code
# Keyboard Shortcuts 

`?`
    Show this help dialog 

`Esc`
    Clear focus; close this dialog 

`s`
    Focus the search field 

`u`
    Go to source code 

`↑`
    Move up in search results 

`↓`
    Move down in search results 

`⏎`
    Go to active search result
# Errors
